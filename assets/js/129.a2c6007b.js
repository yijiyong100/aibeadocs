(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{645:function(t,s,a){"use strict";a.r(s);var r=a(53),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("本文主要是介绍 线性数据结构-栈与队列 。")])]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#栈与队列"}},[t._v("栈与队列")])]),a("li",[a("a",{attrs:{href:"#栈"}},[t._v("栈")]),a("ul",[a("li",[a("a",{attrs:{href:"#栈定义"}},[t._v("栈定义")])]),a("li",[a("a",{attrs:{href:"#栈的模型"}},[t._v("栈的模型")])])])]),a("li",[a("a",{attrs:{href:"#队列"}},[t._v("队列")]),a("ul",[a("li",[a("a",{attrs:{href:"#队列定义"}},[t._v("队列定义")])]),a("li",[a("a",{attrs:{href:"#队列示意图"}},[t._v("队列示意图")])])])]),a("li",[a("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"栈与队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈与队列"}},[t._v("#")]),t._v(" 栈与队列")]),t._v(" "),a("p",[t._v("栈和队列也是比较常见的数据结构，它们是比较特殊的线性表，因为对于栈来说，访问、插入和删除元素只能在栈顶进行，对于队列来说，元素只能从队列尾插入，从队列头访问和删除。")]),t._v(" "),a("h2",{attrs:{id:"栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),a("h3",{attrs:{id:"栈定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈定义"}},[t._v("#")]),t._v(" 栈定义")]),t._v(" "),a("p",[t._v("栈是限制插入和删除只能在一个位置上进行的表，该位置是表的末端，叫作栈顶，对栈的基本操作有push(进栈)和pop(出栈)，前者相当于插入，后者相当于删除最后一个元素。栈有时又叫作LIFO(Last In First Out)表，即后进先出。")]),t._v(" "),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/basic/stackandqueue/2243690-2e9540a7b4b61cbd.png"),alt:"wxmp"}}),t._v(" "),a("h3",{attrs:{id:"栈的模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈的模型"}},[t._v("#")]),t._v(" 栈的模型")]),t._v(" "),a("p",[t._v("下面我们看一道经典题目，加深对栈的理解。")]),t._v(" "),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/basic/stackandqueue/2243690-54461e74300fb358.png"),alt:"wxmp"}}),t._v(" "),a("p",[t._v("关于栈的一道经典题目")]),t._v(" "),a("p",[t._v("上图中的答案是C，其中的原理可以好好想一想。")]),t._v(" "),a("p",[t._v("因为栈也是一个表，所以任何实现表的方法都能实现栈。我们打开JDK中的类Stack的源码，可以看到它就是继承类Vector的。当然，Stack是Java2前的容器类，现在我们可以使用LinkedList来进行栈的所有操作。")]),t._v(" "),a("h2",{attrs:{id:"队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),a("h3",{attrs:{id:"队列定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列定义"}},[t._v("#")]),t._v(" 队列定义")]),t._v(" "),a("p",[t._v("队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。")]),t._v(" "),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/basic/stackandqueue/2243690-3116f05bb106b789.png"),alt:"wxmp"}}),t._v(" "),a("h3",{attrs:{id:"队列示意图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列示意图"}},[t._v("#")]),t._v(" 队列示意图")]),t._v(" "),a("p",[t._v("我们可以使用链表来实现队列，下面代码简单展示了利用LinkedList来实现队列类。")]),t._v(" "),a("ul",[a("li",[t._v("代码9 简单实现队列类")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyQueue")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("E"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" LinkedList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("E"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" LinkedList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 入队")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("enqueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("E e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addLast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出队")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" E "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dequeue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("普通的队列是一种先进先出的数据结构，而优先队列中，元素都被赋予优先级。当访问元素的时候，具有最高优先级的元素最先被删除。优先队列在生活中的应用还是比较多的，比如医院的急症室为病人赋予优先级，具有最高优先级的病人最先得到治疗。在Java集合框架中，类PriorityQueue就是优先队列的实现类，具体大家可以去阅读源码。")]),t._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),a("ul",[a("li",[t._v("https://www.jianshu.com/p/230e6fde9c75")])])])}),[],!1,null,null,null);s.default=e.exports}}]);