(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{661:function(t,s,a){"use strict";a.r(s);var v=a(53),e=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("本文主要是介绍 图-最小生成树(Prim) 算法。")])]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#prim算法-普里姆算法"}},[t._v("Prim算法(普里姆算法)")])]),a("li",[a("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),a("p"),t._v(" "),a("p",[t._v("关于图的几个概念定义：")]),t._v(" "),a("ul",[a("li",[t._v("连通图：在无向图中，若任意两个顶点vivi与vjvj都有路径相通，则称该无向图为连通图。")]),t._v(" "),a("li",[t._v("强连通图：在有向图中，若任意两个顶点vivi与vjvj都有路径相通，则称该有向图为强连通图。")]),t._v(" "),a("li",[t._v("连通网：在连通图中，若图的边具有一定的意义，每一条边都对应着一个数，称为权；权代表着连接连个顶点的代价，称这种连通图叫做连通网。")]),t._v(" "),a("li",[t._v("生成树：一个连通图的生成树是指一个连通子图，它含有图中全部n个顶点，但只有足以构成一棵树的n-1条边。一颗有n个顶点的生成树有且仅有n-1条边，如果生成树中再添加一条边，则必定成环。")]),t._v(" "),a("li",[t._v("最小生成树：在连通网的所有生成树中，所有边的代价和最小的生成树，称为最小生成树。\n"),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/basic/mst-1.png"),alt:"wxmp"}})])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("下面介绍两种求最小生成树算法")]),t._v(" "),a("h2",{attrs:{id:"prim算法-普里姆算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prim算法-普里姆算法"}},[t._v("#")]),t._v(" Prim算法(普里姆算法)")]),t._v(" "),a("p",[t._v("此算法可以称为“加点法”，每次迭代选择代价最小的边对应的点，加入到最小生成树中。算法从某一个顶点s开始，逐渐长大覆盖整个连通网的所有顶点。")]),t._v(" "),a("ol",[a("li",[t._v("图的所有顶点集合为VV；初始令集合u={s},v=V?uu={s},v=V?u;")]),t._v(" "),a("li",[t._v("在两个集合u,vu,v能够组成的边中，选择一条代价最小的边(u0,v0)(u0,v0)，加入到最小生成树中，并把v0v0并入到集合u中。")]),t._v(" "),a("li",[t._v("重复上述步骤，直到最小生成树有n-1条边或者n个顶点为止。")])]),t._v(" "),a("p",[t._v("由于不断向集合u中加点，所以最小代价边必须同步更新；需要建立一个辅助数组closedge,用来维护集合v中每个顶点与集合u中最小代价边信息，：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" vertexData   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示u中顶点信息")]),t._v("\n  UINT lowestcost   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最小代价")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("closedge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vexCounts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/basic/mst-3.png"),alt:"wxmp"}}),t._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),a("ul",[a("li",[t._v("https://blog.csdn.net/a2392008643/article/details/81781766")])])])}),[],!1,null,null,null);s.default=e.exports}}]);