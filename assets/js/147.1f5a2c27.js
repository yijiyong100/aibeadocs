(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{664:function(t,s,a){"use strict";a.r(s);var n=a(53),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("本文主要是介绍 图-最短路径(Dijkstra)算法 。")])]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#最短路径的概念"}},[t._v("最短路径的概念")])]),a("li",[a("a",{attrs:{href:"#迪杰斯特拉-dijkstra-算法"}},[t._v("迪杰斯特拉(Dijkstra)算法")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-定义概览"}},[t._v("1.定义概览")])]),a("li",[a("a",{attrs:{href:"#_2-算法思想"}},[t._v("2.算法思想")])]),a("li",[a("a",{attrs:{href:"#_3-算法步骤"}},[t._v("3.算法步骤")])]),a("li",[a("a",{attrs:{href:"#_4-动画演示"}},[t._v("4.动画演示")])]),a("li",[a("a",{attrs:{href:"#_5-代码实现"}},[t._v("5.代码实现")])])])]),a("li",[a("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"最短路径的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最短路径的概念"}},[t._v("#")]),t._v(" 最短路径的概念")]),t._v(" "),a("p",[t._v("从某顶点(源点)出发到另一顶点(目的点)的路径中,有一条各边(或弧)权值之和最小的路径称为最短路径。")]),t._v(" "),a("p",[t._v("形式化表述:")]),t._v(" "),a("blockquote",[a("p",[t._v("设有带权的有向图D=(V,{E})，D中的边权为W(e)。已知源点为v0，求v0到其它各顶点的最短路径。")])]),t._v(" "),a("p",[t._v("最短路径有两种算法:迪杰斯特拉(Dijkstra)算法和弗洛伊德(Floyd)算法")]),t._v(" "),a("h2",{attrs:{id:"迪杰斯特拉-dijkstra-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迪杰斯特拉-dijkstra-算法"}},[t._v("#")]),t._v(" 迪杰斯特拉(Dijkstra)算法")]),t._v(" "),a("h3",{attrs:{id:"_1-定义概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义概览"}},[t._v("#")]),t._v(" 1.定义概览")]),t._v(" "),a("p",[t._v("Dijkstra(迪杰斯特拉)算法是典型的单源最短路径算法，用于计算"),a("strong",[t._v("一个节点到其他所有节点")]),t._v("的最短路径。主要特点是以起始点为中心向外层层扩展，直到扩展到终点为止。")]),t._v(" "),a("p",[t._v("问题描述：在无向图 G=(V,E) 中，假设每条边 E[i] 的长度为 w[i]，找到由顶点 V0 到其余各点的最短路径。（单源最短路径）")]),t._v(" "),a("h3",{attrs:{id:"_2-算法思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-算法思想"}},[t._v("#")]),t._v(" 2.算法思想")]),t._v(" "),a("p",[t._v("如果源点v0到顶点vi的弧是v0到各点(最短)路径集合中最短者，则一定可以确定的是< v0,vi>是源点v0到vi的最短路径。")]),t._v(" "),a("ul",[a("li",[t._v("第一条最短路径(vo到vi是所有点中路径最短)最短路径的特点:\n这条路径上，必定只含有一条弧，并且这条弧权值最小。")]),t._v(" "),a("li",[t._v("下一条(路径次短)的最短路径的特点:\n它只含有两种情况：或者直接从源点到改点vj，或者"),a("strong",[t._v("从源点到vi，在到达vj")])]),t._v(" "),a("li",[t._v("再下一条长度次短的特点:\n它可能有两种情况：或者直接从源点到达改点，或者从源点到达vi/cj,然后到达该点")]),t._v(" "),a("li",[t._v("其余最短路径的的特点:\n它或者是直接从源点到该点(只含一条弧)； 或者是从源点经过已求得最短路径的顶点，再到达该点")])]),t._v(" "),a("h3",{attrs:{id:"_3-算法步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-算法步骤"}},[t._v("#")]),t._v(" 3.算法步骤")]),t._v(" "),a("ol",[a("li",[t._v("初始化：S={v},v为源点。U={除V外所有点}")]),t._v(" "),a("li",[t._v("从U中选择到v距离最小的顶点k，把K加入到S中。")]),t._v(" "),a("li",[t._v("把k作为新的中间点，更新U中各点到源点的距离")]),t._v(" "),a("li",[t._v("重复2,3过程直到所有点都在S中")])]),t._v(" "),a("h3",{attrs:{id:"_4-动画演示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-动画演示"}},[t._v("#")]),t._v(" 4.动画演示")]),t._v(" "),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/basic/shortestpath-1.gif"),alt:"wxmp"}}),t._v(" "),a("h3",{attrs:{id:"_5-代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-代码实现"}},[t._v("#")]),t._v(" 5.代码实现")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//G--\x3e图，v0--\x3e源点，P[v]表示v前驱顶点下标,D[v]表示V0到v的最短路径长度和 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ShortestPath_Dijkstra")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AdjMatrix "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("D"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("min"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXVEX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//标记顶点v是否已找到最短路径")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("G"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("vexnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始化数据 ")]),t._v("\n        book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        D"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("G"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("acre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n    D"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("v0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//v0到v0距离为0 ")]),t._v("\n    book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("v0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//开始主循环，每次求得v0到某个顶点的最短距离")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("G"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("vexnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        min"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("INFINITY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("G"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("vexnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//寻找到达v0距离最短的点 ")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("D"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("min"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                min"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("D"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将此时找到的点标记 ")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("G"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("vexnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//根据本次找达v0最短的点，更新其他点到v0的距离 ")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果经过顶点k的路径比现在路径更短的话")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("min"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("G"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("acre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("D"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                D"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("min"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("G"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("acre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/basic/shortestpath-2.png"),alt:"wxmp"}}),t._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),a("ul",[a("li",[t._v("https://www.freesion.com/article/1065562680/")])])])}),[],!1,null,null,null);s.default=r.exports}}]);