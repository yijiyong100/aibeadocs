(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{680:function(t,a,s){"use strict";s.r(a);var e=s(53),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("本文主要是介绍 常用搜索算法-树表查找 。")])]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#树表查找"}},[t._v("树表查找")]),s("ul",[s("li",[s("a",{attrs:{href:"#最简单的树表查找算法"}},[t._v("最简单的树表查找算法——")])]),s("li",[s("a",{attrs:{href:"#基本思想"}},[t._v("基本思想：")])]),s("li",[s("a",{attrs:{href:"#二叉查找树"}},[t._v("二叉查找树")])]),s("li",[s("a",{attrs:{href:"#二叉查找树性质"}},[t._v("二叉查找树性质：")])]),s("li",[s("a",{attrs:{href:"#复杂度分析"}},[t._v("复杂度分析：")])]),s("li",[s("a",{attrs:{href:"#平衡查找树之2-3查找树-2-3-tree"}},[t._v("平衡查找树之2-3查找树（2-3 Tree）")])]),s("li",[s("a",{attrs:{href:"#_2-3查找树定义"}},[t._v("2-3查找树定义：")])]),s("li",[s("a",{attrs:{href:"#_2-3查找树的性质"}},[t._v("2-3查找树的性质：")])]),s("li",[s("a",{attrs:{href:"#_2-3查找树复杂度分析"}},[t._v("2-3查找树复杂度分析：")])]),s("li",[s("a",{attrs:{href:"#平衡查找树之红黑树-red-black-tree"}},[t._v("平衡查找树之红黑树（Red-Black Tree）")])]),s("li",[s("a",{attrs:{href:"#基本思想"}},[t._v("基本思想：")])]),s("li",[s("a",{attrs:{href:"#红黑树的定义"}},[t._v("红黑树的定义：")])]),s("li",[s("a",{attrs:{href:"#红黑树的性质"}},[t._v("红黑树的性质：")])]),s("li",[s("a",{attrs:{href:"#复杂度分析"}},[t._v("复杂度分析：")])]),s("li",[s("a",{attrs:{href:"#b树和b-树-b-tree-b-tree"}},[t._v("B树和B+树（B Tree/B+ Tree）")])]),s("li",[s("a",{attrs:{href:"#b树定义"}},[t._v("B树定义：")])]),s("li",[s("a",{attrs:{href:"#b-树定义"}},[t._v("B+树定义：")])]),s("li",[s("a",{attrs:{href:"#b-树的优点在于"}},[t._v("B+ 树的优点在于：")])]),s("li",[s("a",{attrs:{href:"#下面是b-树和b-树的区别图"}},[t._v("下面是B 树和B+树的区别图：")])]),s("li",[s("a",{attrs:{href:"#树表查找总结"}},[t._v("树表查找总结：")])])])]),s("li",[s("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"树表查找"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树表查找"}},[t._v("#")]),t._v(" 树表查找")]),t._v(" "),s("h3",{attrs:{id:"最简单的树表查找算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最简单的树表查找算法"}},[t._v("#")]),t._v(" 最简单的树表查找算法——")]),t._v(" "),s("p",[t._v("二叉树查找算法。")]),t._v(" "),s("h3",{attrs:{id:"基本思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本思想"}},[t._v("#")]),t._v(" 基本思想：")]),t._v(" "),s("p",[t._v("二叉查找树是先对待查找的数据进行生成树，确保树的左分支的值小于右分支的值，然后在就行和每个节点的父节点比较大小，查找最适合的范围。 这个算法的查找效率很高，但是如果使用这种查找方法要首先创建树。")]),t._v(" "),s("h3",{attrs:{id:"二叉查找树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉查找树"}},[t._v("#")]),t._v(" 二叉查找树")]),t._v(" "),s("p",[t._v("（BinarySearch Tree，也叫二叉搜索树，或称二叉排序树Binary Sort Tree）或者是一棵空树，或者是具有下列性质的二叉树：")]),t._v(" "),s("p",[t._v("1）若任意节点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；")]),t._v(" "),s("p",[t._v("2）若任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；")]),t._v(" "),s("p",[t._v("3）任意节点的左、右子树也分别为二叉查找树。")]),t._v(" "),s("h3",{attrs:{id:"二叉查找树性质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉查找树性质"}},[t._v("#")]),t._v(" 二叉查找树性质：")]),t._v(" "),s("p",[s("strong",[t._v("对二叉查找树进行中序遍历，即可得到有序的数列。")])]),t._v(" "),s("p",[t._v("不同形态的二叉查找树如下图所示：")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/search/comm8/1333691114_6839.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("有关二叉查找树的查找、插入、删除等操作的详细讲解，请移步"),s("a",{attrs:{href:"http://www.cnblogs.com/yangecnu/p/Introduce-Binary-Search-Tree.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅谈算法和数据结构: 七 二叉查找树"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"复杂度分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析"}},[t._v("#")]),t._v(" 复杂度分析：")]),t._v(" "),s("p",[t._v("它和二分查找一样，插入和查找的时间复杂度均为O(logn)，但是在最坏的情况下仍然会有O(n)的时间复杂度。原因在于插入和删除元素的时候，树没有保持平衡（比如，我们查找上图（b）中的“93”，我们需要进行n次查找操作）。我们追求的是在最坏的情况下仍然有较好的时间复杂度，这就是平衡查找树设计的初衷。**")]),t._v(" "),s("p",[t._v("下图为二叉树查找和顺序查找以及二分查找性能的对比图：")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/search/comm8/242110240767812.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("基于二叉查找树进行优化，进而可以得到其他的树表查找算法，如平衡树、红黑树等高效算法。")]),t._v(" "),s("h3",{attrs:{id:"平衡查找树之2-3查找树-2-3-tree"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平衡查找树之2-3查找树-2-3-tree"}},[t._v("#")]),t._v(" 平衡查找树之2-3查找树（2-3 Tree）")]),t._v(" "),s("h3",{attrs:{id:"_2-3查找树定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3查找树定义"}},[t._v("#")]),t._v(" 2-3查找树定义：")]),t._v(" "),s("p",[t._v("和二叉树不一样，2-3树运行每个节点保存1个或者两个的值。对于普通的2节点(2-node)，他保存1个key和左右两个自己点。对应3节点(3-node)，保存两个Key，2-3查找树的定义如下：")]),t._v(" "),s("p",[t._v("1）要么为空，要么：")]),t._v(" "),s("p",[t._v("2）对于2节点，该节点保存一个key及对应value，以及两个指向左右节点的节点，左节点也是一个2-3节点，所有的值都比key要小，右节点也是一个2-3节点，所有的值比key要大。")]),t._v(" "),s("p",[t._v("3）对于3节点，该节点保存两个key及对应value，以及三个指向左中右的节点。左节点也是一个2-3节点，所有的值均比两个key中的最小的key还要小；中间节点也是一个2-3节点，中间节点的key值在两个跟节点key值之间；右节点也是一个2-3节点，节点的所有key值比两个key中的最大的key还要大。")]),t._v(" "),s("p",[t._v("Definition of 2-3 tree")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/search/comm8/252248450292152.png"),alt:"wxmp"}}),t._v(" "),s("h3",{attrs:{id:"_2-3查找树的性质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3查找树的性质"}},[t._v("#")]),t._v(" 2-3查找树的性质：")]),t._v(" "),s("p",[s("strong",[t._v("1）如果中序遍历2-3查找树，就可以得到排好序的序列；")])]),t._v(" "),s("p",[s("strong",[t._v("2）在一个完全平衡的2-3查找树中，根节点到每一个为空节点的距离都相同。（这也是平衡树中“平衡”一词的概念，根节点到叶节点的最长距离对应于查找算法的最坏情况，而平衡树中根节点到叶节点的距离都一样，最坏情况也具有对数复杂度。）")])]),t._v(" "),s("p",[t._v("性质2）如下图所示：")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/search/comm8/252249082017906.png"),alt:"wxmp"}}),t._v(" "),s("h3",{attrs:{id:"_2-3查找树复杂度分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3查找树复杂度分析"}},[t._v("#")]),t._v(" 2-3查找树复杂度分析：")]),t._v(" "),s("p",[t._v("2-3树的查找效率与树的高度是息息相关的。")]),t._v(" "),s("ul",[s("li",[t._v("在最坏的情况下，也就是所有的节点都是2-node节点，查找效率为lgN")]),t._v(" "),s("li",[t._v("在最好的情况下，所有的节点都是3-node节点，查找效率为log3N约等于0.631lgN")])]),t._v(" "),s("p",[t._v("距离来说，对于1百万个节点的2-3树，树的高度为12-20之间，对于10亿个节点的2-3树，树的高度为18-30之间。")]),t._v(" "),s("p",[t._v("对于插入来说，只需要常数次操作即可完成，因为他只需要修改与该节点关联的节点即可，不需要检查其他节点，所以效率和查找类似。下面是2-3查找树的效率：")]),t._v(" "),s("p",[t._v("analysis of 2-3 tree")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/search/comm8/252249104513019.png"),alt:"wxmp"}}),t._v(" "),s("h3",{attrs:{id:"平衡查找树之红黑树-red-black-tree"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平衡查找树之红黑树-red-black-tree"}},[t._v("#")]),t._v(" 平衡查找树之红黑树（Red-Black Tree）")]),t._v(" "),s("p",[t._v("2-3查找树能保证在插入元素之后能保持树的平衡状态，最坏情况下即所有的子节点都是2-node，树的高度为lgn，从而保证了最坏情况下的时间复杂度。但是2-3树实现起来比较复杂，于是就有了一种简单实现2-3树的数据结构，即红黑树（Red-Black Tree）。")]),t._v(" "),s("h3",{attrs:{id:"基本思想-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本思想-2"}},[t._v("#")]),t._v(" 基本思想：")]),t._v(" "),s("p",[t._v("红黑树的思想就是对2-3查找树进行编码，尤其是对2-3查找树中的3-nodes节点添加额外的信息。红黑树中将节点之间的链接分为两种不同类型，红色链接，他用来链接两个2-nodes节点来表示一个3-nodes节点。黑色链接用来链接普通的2-3节点。特别的，使用红色链接的两个2-nodes来表示一个3-nodes节点，并且向左倾斜，即一个2-node是另一个2-node的左子节点。这种做法的好处是查找的时候不用做任何修改，和普通的二叉查找树相同。")]),t._v(" "),s("p",[t._v("Red black tree")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/search/comm8/270024368439888.png"),alt:"wxmp"}}),t._v(" "),s("h3",{attrs:{id:"红黑树的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#红黑树的定义"}},[t._v("#")]),t._v(" 红黑树的定义：")]),t._v(" "),s("p",[t._v("红黑树是一种具有红色和黑色链接的平衡查找树，同时满足：")]),t._v(" "),s("ul",[s("li",[t._v("红色节点向左倾斜")]),t._v(" "),s("li",[t._v("一个节点不可能有两个红色链接")]),t._v(" "),s("li",[t._v("整个树完全黑色平衡，即从根节点到所以叶子结点的路径上，黑色链接的个数都相同。")])]),t._v(" "),s("p",[t._v("下图可以看到红黑树其实是2-3树的另外一种表现形式：如果我们将红色的连线水平绘制，那么他链接的两个2-node节点就是2-3树中的一个3-node节点了。")]),t._v(" "),s("p",[t._v("1-1 correspondence between 2-3 and LLRB")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/search/comm8/270024403113529.png"),alt:"wxmp"}}),t._v(" "),s("h3",{attrs:{id:"红黑树的性质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#红黑树的性质"}},[t._v("#")]),t._v(" 红黑树的性质：")]),t._v(" "),s("p",[s("strong",[t._v("整个树完全黑色平衡，即从根节点到所以叶子结点的路径上，黑色链接的个数都相同（2-3树的第2）性质，从根节点到叶子节点的距离都相等）。")])]),t._v(" "),s("h3",{attrs:{id:"复杂度分析-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析-2"}},[t._v("#")]),t._v(" 复杂度分析：")]),t._v(" "),s("p",[s("strong",[t._v("最坏的情况就是，红黑树中除了最左侧路径全部是由3-node节点组成，即红黑相间的路径长度是全黑路径长度的2倍。")])]),t._v(" "),s("p",[t._v("下图是一个典型的红黑树，从中可以看到最长的路径(红黑相间的路径)是最短路径的2倍：")]),t._v(" "),s("p",[t._v("a typic red black tree")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/search/comm8/270027368747653.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("红黑树的平均高度大约为logn。")]),t._v(" "),s("p",[t._v("下图是红黑树在各种情况下的时间复杂度，可以看出红黑树是2-3查找树的一种实现，它能保证最坏情况下仍然具有对数的时间复杂度。")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/search/comm8/270027378905711.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("红黑树这种数据结构应用十分广泛，在多种编程语言中被用作符号表的实现，如：")]),t._v(" "),s("ul",[s("li",[s("ul",[s("li",[t._v("Java中的java.util.TreeMap,java.util.TreeSet；")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("C++ STL中的：map,multimap,multiset；")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v(".NET中的：SortedDictionary,SortedSet 等。")])])])]),t._v(" "),s("h3",{attrs:{id:"b树和b-树-b-tree-b-tree"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b树和b-树-b-tree-b-tree"}},[t._v("#")]),t._v(" B树和B+树（B Tree/B+ Tree）")]),t._v(" "),s("p",[t._v("平衡查找树中的2-3树以及其实现红黑树。2-3树种，一个节点最多有2个key，而红黑树则使用染色的方式来标识这两个key。")]),t._v(" "),s("p",[t._v("维基百科对B树的定义为“在计算机科学中，B树（B-tree）是一种树状数据结构，它能够存储数据、对其进行排序并允许以O(log n)的时间复杂度运行进行查找、顺序读取、插入和删除的数据结构。B树，概括来说是一个节点可以拥有多于2个子节点的二叉查找树。与自平衡二叉查找树不同，B树为系统最优化"),s("strong",[t._v("大块数据的读和写操作")]),t._v("。B-tree算法减少定位记录时所经历的中间过程，从而加快存取速度。普遍运用在"),s("strong",[t._v("数据库")]),t._v("和"),s("strong",[t._v("文件系统")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"b树定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b树定义"}},[t._v("#")]),t._v(" B树定义：")]),t._v(" "),s("p",[s("strong",[t._v("B树")]),t._v("可以看作是对2-3查找树的一种扩展，即他允许每个节点有M-1个子节点。")]),t._v(" "),s("ul",[s("li",[s("ul",[s("li",[t._v("根节点至少有两个子节点")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("每个节点有M-1个key，并且以升序排列")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("位于M-1和M key的子节点的值位于M-1 和M key对应的Value之间")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("其它节点至少有M/2个子节点")])])])]),t._v(" "),s("p",[t._v("下图是一个M=4 阶的B树:")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/search/comm8/290047034539184.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("可以看到B树是2-3树的一种扩展，他允许一个节点有多于2个的元素。B树的插入及平衡化操作和2-3树很相似，这里就不介绍了。下面是往B树中依次插入")]),t._v(" "),s("p",[s("strong",[t._v("6 10 4 14 5 11 15 3 2 12 1 7 8 8 6 3 6 21 5 15 15 6 32 23 45 65 7 8 6 5 4")])]),t._v(" "),s("p",[t._v("的演示动画：")]),t._v(" "),s("p",[t._v('<img class= "zoom-custom-imgs" :src="$withBase(\'/assets/img/algorithm/search/comm8/btreebuild.gif)')]),t._v(" "),s("h3",{attrs:{id:"b-树定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-树定义"}},[t._v("#")]),t._v(" B+树定义：")]),t._v(" "),s("p",[t._v("**B+**树是对B树的一种变形树，它与B树的差异在于：")]),t._v(" "),s("ul",[s("li",[s("ul",[s("li",[t._v("有k个子结点的结点必然有k个关键码；")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("非叶结点仅具有索引作用，跟记录有关的信息均存放在叶结点中。")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("树的所有叶结点构成一个有序链表，可以按照关键码排序的次序遍历全部记录。")])])])]),t._v(" "),s("p",[t._v("如下图，是一个B+树:")]),t._v(" "),s("p",[t._v("B Plus tree")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/search/comm8/290050048129679.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("下图是B+树的插入动画：")]),t._v(" "),s("p",[t._v('<img class= "zoom-custom-imgs" :src="$withBase(\'/assets/img/algorithm/search/comm8/Bplustreebuild.gif)')]),t._v(" "),s("p",[s("strong",[t._v("B和B+树的区别在于，B+树的非叶子结点只包含导航信息，不包含实际的值，所有的叶子结点和相连的节点使用链表相连，便于区间查找和遍历。")])]),t._v(" "),s("h3",{attrs:{id:"b-树的优点在于"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-树的优点在于"}},[t._v("#")]),t._v(" B+ 树的优点在于：")]),t._v(" "),s("ul",[s("li",[s("ul",[s("li",[t._v("由于B+树在内部节点上不好含数据信息，因此在内存页中能够存放更多的key。 数据存放的更加紧密，具有更好的空间局部性。因此访问叶子几点上关联的数据也具有更好的缓存命中率。")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("B+树的叶子结点都是相链的，因此对整棵树的便利只需要一次线性遍历叶子结点即可。而且由于数据顺序排列并且相连，所以便于区间查找和搜索。而B树则需要进行每一层的递归遍历。相邻的元素可能在内存中不相邻，所以缓存命中性没有B+树好。")])])])]),t._v(" "),s("p",[s("strong",[t._v("但是B树也有优点，其优点在于，由于B树的每一个节点都包含key和value，因此经常访问的元素可能离根节点更近，因此访问也更迅速。")])]),t._v(" "),s("h3",{attrs:{id:"下面是b-树和b-树的区别图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下面是b-树和b-树的区别图"}},[t._v("#")]),t._v(" 下面是B 树和B+树的区别图：")]),t._v(" "),s("p",[t._v("Different between B tree and B plus tree")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/search/comm8/290050088914733.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("B/B+树常用于文件系统和数据库系统中，它通过对每个节点存储个数的扩展，使得对连续的数据能够进行较快的定位和访问，能够有效减少查找时间，提高存储的空间局部性从而减少IO操作。它广泛用于文件系统及数据库中，如：")]),t._v(" "),s("ul",[s("li",[s("ul",[s("li",[t._v("Windows：HPFS文件系统；")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("Mac：HFS，HFS+文件系统；")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("Linux：ResiserFS，XFS，Ext3FS，JFS文件系统；")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("数据库：ORACLE，MYSQL，SQLSERVER等中。")])])])]),t._v(" "),s("p",[t._v("有关B/B+树在数据库索引中的应用，请看张洋的"),s("a",{attrs:{href:"http://blog.codinglabs.org/articles/theory-of-mysql-index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL索引背后的数据结构及算法原理"),s("OutboundLink")],1),t._v("这篇文章，这篇文章对MySQL中的如何使用B+树进行索引有比较详细的介绍，推荐阅读。")]),t._v(" "),s("h3",{attrs:{id:"树表查找总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树表查找总结"}},[t._v("#")]),t._v(" 树表查找总结：")]),t._v(" "),s("p",[t._v("二叉查找树平均查找性能不错，为O(logn)，但是最坏情况会退化为O(n)。在二叉查找树的基础上进行优化，我们可以使用平衡查找树。平衡查找树中的2-3查找树，这种数据结构在插入之后能够进行自平衡操作，从而保证了树的高度在一定的范围内进而能够保证最坏情况下的时间复杂度。但是2-3查找树实现起来比较困难，红黑树是2-3树的一种简单高效的实现，他巧妙地使用颜色标记来替代2-3树中比较难处理的3-node节点问题。红黑树是一种比较高效的平衡查找树，应用非常广泛，很多编程语言的内部实现都或多或少的采用了红黑树。")]),t._v(" "),s("p",[t._v("除此之外，2-3查找树的另一个扩展——B/B+平衡树，在文件系统和数据库系统中有着广泛的应用。")]),t._v(" "),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),s("ul",[s("li",[t._v("http://www.cnblogs.com/maybe2030/")]),t._v(" "),s("li",[t._v("https://www.cnblogs.com/magic-sea/tag/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/")]),t._v(" "),s("li",[t._v("https://www.cnblogs.com/hyserendipity/p/8591949.html")])])])}),[],!1,null,null,null);a.default=r.exports}}]);