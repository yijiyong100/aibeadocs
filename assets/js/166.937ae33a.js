(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{682:function(t,a,s){"use strict";s.r(a);var h=s(53),r=Object(h.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("本文主要是介绍 常用搜索算法-哈希查找 。")])]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#哈希查找"}},[t._v("哈希查找")]),s("ul",[s("li",[s("a",{attrs:{href:"#什么是哈希表-hash"}},[t._v("什么是哈希表（Hash）？")])]),s("li",[s("a",{attrs:{href:"#什么是哈希函数"}},[t._v("什么是哈希函数？")])]),s("li",[s("a",{attrs:{href:"#算法流程"}},[t._v("算法流程：")])]),s("li",[s("a",{attrs:{href:"#复杂度分析"}},[t._v("复杂度分析：")])]),s("li",[s("a",{attrs:{href:"#使用hash-我们付出了什么"}},[t._v("使用Hash，我们付出了什么？")])]),s("li",[s("a",{attrs:{href:"#hash算法和其他查找算法的性能对比"}},[t._v("Hash算法和其他查找算法的性能对比：")])])])]),s("li",[s("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"哈希查找"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希查找"}},[t._v("#")]),t._v(" 哈希查找")]),t._v(" "),s("h3",{attrs:{id:"什么是哈希表-hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是哈希表-hash"}},[t._v("#")]),t._v(" 什么是哈希表（Hash）？")]),t._v(" "),s("p",[t._v('我们使用一个下标范围比较大的数组来存储元素。可以设计一个函数（哈希函数， 也叫做散列函数），使得每个元素的关键字都与一个函数值（即数组下标）相对应，于是用这个数组单元来存储这个元素；也可以简单的理解为，按照关键字为每一个元素"分类"，然后将这个元素存储在相应"类"所对应的地方。但是，不能够保证每个元素的关键字与函数值是一一对应的，因此极有可能出现对于不同的元素，却计算出了相同的函数值，这样就产生了"冲突"，换句话说，就是把不同的元素分在了相同的"类"之中。后面我们将看到一种解决"冲突"的简便做法。')]),t._v(" "),s("p",[s("strong",[t._v('总的来说，"直接定址"与"解决冲突"是哈希表的两大特点。')])]),t._v(" "),s("h3",{attrs:{id:"什么是哈希函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是哈希函数"}},[t._v("#")]),t._v(" 什么是哈希函数？")]),t._v(" "),s("p",[t._v("哈希函数的规则是：通过某种转换关系，使关键字适度的分散到指定大小的的顺序结构中，越分散，则以后查找的时间复杂度越小，空间复杂度越高。")]),t._v(" "),s("p",[t._v("**算法思想：**哈希的思路很简单，如果所有的键都是整数，那么就可以使用一个简单的无序数组来实现：将键作为索引，值即为其对应的值，这样就可以快速访问任意键的值。这是对于简单的键的情况，我们将其扩展到可以处理更加复杂的类型的键。")]),t._v(" "),s("h3",{attrs:{id:"算法流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法流程"}},[t._v("#")]),t._v(" 算法流程：")]),t._v(" "),s("p",[t._v("1）用给定的哈希函数构造哈希表；")]),t._v(" "),s("p",[t._v("2）根据选择的冲突处理方法解决地址冲突；")]),t._v(" "),s("p",[t._v("常见的解决冲突的方法：拉链法和线性探测法。")]),t._v(" "),s("p",[t._v("3）在哈希表的基础上执行哈希查找。")]),t._v(" "),s("p",[s("strong",[t._v("哈希表是一个在时间和空间上做出权衡的经典例子。如果没有内存限制，那么可以直接将键作为数组的索引。那么所有的查找时间复杂度为O(1)；如果没有时间限制，那么我们可以使用无序数组并进行顺序查找，这样只需要很少的内存。哈希表使用了适度的时间和空间来在这两个极端之间找到了平衡。只需要调整哈希函数算法即可在时间和空间上做出取舍。")])]),t._v(" "),s("h3",{attrs:{id:"复杂度分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析"}},[t._v("#")]),t._v(" 复杂度分析：")]),t._v(" "),s("p",[t._v("单纯论查找复杂度：对于无冲突的Hash表而言，查找复杂度为O(1)（注意，在查找之前我们需要构建相应的Hash表）。")]),t._v(" "),s("h3",{attrs:{id:"使用hash-我们付出了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用hash-我们付出了什么"}},[t._v("#")]),t._v(" 使用Hash，我们付出了什么？")]),t._v(" "),s("p",[t._v("我们在实际编程中存储一个大规模的数据，最先想到的存储结构可能就是map，也就是我们常说的KV pair，经常使用Python的博友可能更有这种体会。使用map的好处就是，我们在后续处理数据处理时，可以根据数据的key快速的查找到对应的value值。map的本质就是Hash表，那我们在获取了超高查找效率的基础上，我们付出了什么？")]),t._v(" "),s("p",[t._v("Hash是一种典型"),s("strong",[t._v("以空间换时间")]),t._v("的算法，比如原来一个长度为100的数组，对其查找，只需要遍历且匹配相应记录即可，从空间复杂度上来看，假如数组存储的是byte类型数据，那么该数组占用100byte空间。现在我们采用Hash算法，我们前面说的Hash必须有一个规则，约束键与存储位置的关系，那么就需要一个固定长度的hash表，此时，仍然是100byte的数组，假设我们需要的100byte用来记录键与位置的关系，那么总的空间为200byte,而且用于记录规则的表大小会根据规则，大小可能是不定的。")]),t._v(" "),s("h3",{attrs:{id:"hash算法和其他查找算法的性能对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash算法和其他查找算法的性能对比"}},[t._v("#")]),t._v(" Hash算法和其他查找算法的性能对比：")]),t._v(" "),s("p",[t._v("search method efficient conclusion")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/search/comm8/312301180197071.png"),alt:"wxmp"}}),t._v(" "),s("ul",[s("li",[s("p",[t._v("作者："),s("a",{attrs:{href:"http://www.cnblogs.com/maybe2030/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Poll的笔记"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[t._v("博客出处：http://www.cnblogs.com/maybe2030/")])]),t._v(" "),s("li",[s("p",[t._v("本文版权归作者和博客园所有，欢迎转载，转载请标明出处。")])])]),t._v(" "),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),s("ul",[s("li",[t._v("http://www.cnblogs.com/maybe2030/")]),t._v(" "),s("li",[t._v("https://www.cnblogs.com/magic-sea/tag/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/")]),t._v(" "),s("li",[t._v("https://www.cnblogs.com/hyserendipity/p/8591949.html")])])])}),[],!1,null,null,null);a.default=r.exports}}]);