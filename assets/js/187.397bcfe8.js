(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{703:function(t,s,a){"use strict";a.r(s);var n=a(53),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("本文主要是介绍 Trie 树(字典树)算法 。")])]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#【算法入门】trie-树详解及其应用"}},[t._v("【算法入门】Trie 树详解及其应用")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-trie树-特例结构树"}},[t._v("1.Trie树 （特例结构树）")])]),a("li",[a("a",{attrs:{href:"#_2-三个基本特性"}},[t._v("2.  三个基本特性：")])]),a("li",[a("a",{attrs:{href:"#_3-例子"}},[t._v("3 .例子")])])])]),a("li",[a("a",{attrs:{href:"#基本思想-以字母树为例"}},[t._v("基本思想（以字母树为例）：")])]),a("li",[a("a",{attrs:{href:"#_1、插入过程"}},[t._v("1、插入过程")])]),a("li",[a("a",{attrs:{href:"#_2、查询过程"}},[t._v("2、查询过程")])]),a("li",[a("a",{attrs:{href:"#_2-trie树的实现"}},[t._v("2. trie树的实现")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-插入过程"}},[t._v("1．插入过程")])]),a("li",[a("a",{attrs:{href:"#_2-查找过程"}},[t._v("2. 查找过程")])]),a("li",[a("a",{attrs:{href:"#程序实现-c"}},[t._v("程序实现(c++)")])])])]),a("li",[a("a",{attrs:{href:"#_3-trie树的应用"}},[t._v("3. trie树的应用：")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-字符串检索-词频统计-搜索引擎的热门查询"}},[t._v("1. 字符串检索，词频统计，搜索引擎的热门查询")])]),a("li",[a("a",{attrs:{href:"#_2-字符串最长公共前缀"}},[t._v("2. 字符串最长公共前缀")])]),a("li",[a("a",{attrs:{href:"#_3-排序"}},[t._v("3.  排序")])]),a("li",[a("a",{attrs:{href:"#_4-作为其他数据结构和算法的辅助结构"}},[t._v("4 作为其他数据结构和算法的辅助结构")])])])]),a("li",[a("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),a("p"),t._v(" "),a("p",[t._v("Trie 树(字典树 算法)")]),t._v(" "),a("h2",{attrs:{id:"【算法入门】trie-树详解及其应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【算法入门】trie-树详解及其应用"}},[t._v("#")]),t._v(" 【算法入门】Trie 树详解及其应用")]),t._v(" "),a("h3",{attrs:{id:"_1-trie树-特例结构树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-trie树-特例结构树"}},[t._v("#")]),t._v(" 1.Trie树 （特例结构树）")]),t._v(" "),a("p",[t._v("Trie树，又称单词查找树、字典树，是一种树形结构，是一种哈希树的变种，是一种用于快速检索的多叉树结构。典型应用是用于统计和排序大量的字符串（但不仅限于字符串）、敏感词过滤。"),a("em",[a("strong",[t._v("*它的优点是：*"),a("em",[t._v("最大限度地减少无谓的字符串比较，查询效率比")])])]),t._v("**"),a("em",[t._v("*哈希表**")]),t._v("*"),a("em",[t._v("*高。*")]),t._v("**")]),t._v(" "),a("p",[t._v("****Trie的核心思想是空间换时间。**利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。")]),t._v(" "),a("p",[t._v("**")]),t._v(" "),a("p",[t._v("****Trie树也有它的缺点，****Trie树的内存消耗非常大。")]),t._v(" "),a("h3",{attrs:{id:"_2-三个基本特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-三个基本特性"}},[t._v("#")]),t._v(" 2.  三个基本特性：")]),t._v(" "),a("p",[t._v("1）根节点不包含字符，除根节点外每一个节点都只包含一个字符。")]),t._v(" "),a("p",[t._v("2）从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。")]),t._v(" "),a("p",[t._v("3）每个节点的所有子节点包含的字符都不相同。")]),t._v(" "),a("h3",{attrs:{id:"_3-例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-例子"}},[t._v("#")]),t._v(" 3 .例子")]),t._v(" "),a("p",[t._v("和二叉查找树不同，在trie树中，每个结点上并非存储一个元素。")]),t._v(" "),a("p",[t._v("trie树把要查找的关键词看作一个字符序列。并根据构成关键词字符的先后顺序构造用于检索的树结构。")]),t._v(" "),a("p",[t._v("在trie树上进行检索类似于查阅英语词典。")]),t._v(" "),a("h2",{attrs:{id:"基本思想-以字母树为例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本思想-以字母树为例"}},[t._v("#")]),t._v(" 基本思想（以字母树为例）：")]),t._v(" "),a("h2",{attrs:{id:"_1、插入过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、插入过程"}},[t._v("#")]),t._v(" 1、插入过程")]),t._v(" "),a("p",[t._v("对于一个单词，从根开始，沿着单词的各个字母所对应的树中的节点分支向下走，直到单词遍历完，将最后的节点标记为红色，表示该单词已插入Trie 树。")]),t._v(" "),a("h2",{attrs:{id:"_2、查询过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、查询过程"}},[t._v("#")]),t._v(" 2、查询过程")]),t._v(" "),a("p",[t._v("同样的，从根开始按照单词的字母顺序向下遍历trie树，一旦发现某个节点标记不存在或者单词遍历完成而最后的节点未标记为红色，则表示该单词不存在，若最后的节点标记为红色，表示该单词存在。")]),t._v(" "),a("p",[t._v('如给出字符串"abcd","ab","bd","dda","ddb"，根据该字符串序列构建一棵Trie树。则构建的树如下:')]),t._v(" "),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/algorithm/strmatch/comm8/20170731162625118.png"),alt:"wxmp"}}),t._v(" "),a("p",[t._v("Trie树的根结点不包含任何信息，第一个字符串为\"abcd\"，第一个字母为'a'，因此根结点的NextChar（map）中存在字符 'a'，其他同理，构建的Trie树如图所示，红色结点表示在该处可以构成一个单词。在一条路径上可能存在多个单词，因此有多个节点被标记为红色。")]),t._v(" "),a("p",[t._v("字符 'ab' 和 'abcd' 都存在，但 'abc' 不存在，虽然 'abc' 可以从树的路径中找到，但是这条路径中的 'c' 节点不是字符串的结尾（不是红色）。")]),t._v(" "),a("p",[t._v('很显然，如果要查找单词"abcd"是否存在，查找长度则为O(len)，len为要查找的字符串的长度。而若采用一般的逐个匹配查找，则查找长度为O(len*n)，n为字符串的个数。显然基于Trie树的查找效率要高很多。')]),t._v(" "),a("p",[t._v("因为当查询如字符串abc是否为某个字符串的前缀时，显然以b、c、d....等不是以a开头的字符串就不用查找了，这样迅速缩小查找的范围和提高查找的针对性。所以建立Trie的复杂度为O(n"),a("em",[t._v("len)，而建立+查询在trie中是可以同时执行的，建立的过程也就可以成为查询的过程，hash就不能实现这个功能。所以总的复杂度为O(n")]),t._v("len)，实际查询的复杂度只是O(len)。")]),t._v(" "),a("h2",{attrs:{id:"_2-trie树的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-trie树的实现"}},[t._v("#")]),t._v(" 2. trie树的实现")]),t._v(" "),a("h3",{attrs:{id:"_1-插入过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-插入过程"}},[t._v("#")]),t._v(" 1．插入过程")]),t._v(" "),a("p",[t._v("对于一个单词，从根开始，沿着单词的各个字母所对应的树中的节点分支向下走，直到单词遍历完，将最后的节点标记为红色，表示该单词已插入trie树。")]),t._v(" "),a("h3",{attrs:{id:"_2-查找过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-查找过程"}},[t._v("#")]),t._v(" 2. 查找过程")]),t._v(" "),a("p",[t._v("(1) 从根结点开始一次搜索；")]),t._v(" "),a("p",[t._v("(2) 取得要查找关键词的第一个字母，并根据该字母选择对应的子树并转到该子树继续进行检索")]),t._v(" "),a("p",[t._v("(3) 在相应的子树上，取得要查找关键词的第二个字母,并进一步选择对应的子树进行检索。")]),t._v(" "),a("p",[t._v("(4) 迭代过程……")]),t._v(" "),a("p",[t._v("(5) 在某个结点处，关键词的所有字母已被取出。根据最后一个节点是否标记为末尾，判断关键词是否存在。")]),t._v(" "),a("h3",{attrs:{id:"程序实现-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序实现-c"}},[t._v("#")]),t._v(" 程序实现(c++)")]),t._v(" "),a("p",[t._v("用char字符 ch 来保存字符串的每个字符，unordered_map （字典）来保存当前字符的所有下一个字符以及节点指针，isEnd 作为一个字符串结束的标识。")]),t._v(" "),a("p",[t._v("insert 函数用来插入一个字符串，isExist 函数用来判断一个字符串是否存在；findNextChar 函数用来返回下一个字符的节点指针（如果存在）。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unordered_map>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<vector>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<set>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TrieTree")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TrieTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" _ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEnd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始化")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//增加一个单词")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isExist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断字符串是否存在")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TrieTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//字符")]),t._v("\n\tunordered_map"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TrieTree"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" NextChar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当前字符的下一个字符及对应节点的集合")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" isEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//是否为结尾")]),t._v("\n \n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//下一个字符集合种查找指定字符")]),t._v("\n\tTrieTree "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findNextChar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" ch_find"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NextChar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch_find"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//找到，返回节点指针")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" NextChar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" NextChar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ch_find"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TrieTree")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tTrieTree "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//匹配，则移到下一个字符")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findNextChar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\tnode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("NextChar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//未匹配")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//从未匹配的字符索引 it 处开始构建树")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" it_char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" it_char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("it_char"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//每个字符生成一个节点，加入到下一层的 map 中")]),t._v("\n\t\t\t\tTrieTree "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TrieTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("it_char"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\tnode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("NextChar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("it_char"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\tnode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将最后一个节点设置为单词末尾")]),t._v("\n\tnode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("isEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TrieTree")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isExist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tTrieTree "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findNextChar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tnode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("NextChar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果到达末尾，则匹配存在")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("isEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"_3-trie树的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-trie树的应用"}},[t._v("#")]),t._v(" 3. trie树的应用：")]),t._v(" "),a("h3",{attrs:{id:"_1-字符串检索-词频统计-搜索引擎的热门查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-字符串检索-词频统计-搜索引擎的热门查询"}},[t._v("#")]),t._v(" 1. 字符串检索，词频统计，搜索引擎的热门查询")]),t._v(" "),a("p",[t._v("​    事先将已知的一些字符串（字典）的有关信息保存到trie树里，查找另外一些未知字符串是否出现过或者出现频率。")]),t._v(" "),a("p",[t._v("​    举例：")]),t._v(" "),a("p",[t._v("​    1）有一个1G大小的一个文件，里面每一行是一个词，词的大小不超过16字节，内存限制大小是1M。返回频数最高的100个词。")]),t._v(" "),a("p",[t._v("​    2）给出N 个单词组成的熟词表，以及一篇全用小写英文书写的文章，请你按最早出现的顺序写出所有不在熟词表中的生词。")]),t._v(" "),a("p",[t._v("​    3）1000万字符串，其中有些是重复的，需要把重复的全部去掉，保留没有重复的字符串")]),t._v(" "),a("p",[t._v("​    "),a("strong",[t._v("4）寻找热门查询")]),t._v("：搜索引擎 会通过日志文件把用户每次检索使用的所有检索串都记录下来，每个查询串的长度为1-255字节。假设目前有一千万个记录，这些查询串的重复读比较高，虽然总数是1千万，但是如果去除重复和，不超过3百万个。一个查询串的重复度越高，说明查询它的用户越多，也就越热门。请你统计最热门的10个查询串，要求使用的内存不能超过1G。")]),t._v(" "),a("p",[t._v("5）敏感词过滤：详细分析可以参考这里。")]),t._v(" "),a("h3",{attrs:{id:"_2-字符串最长公共前缀"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-字符串最长公共前缀"}},[t._v("#")]),t._v(" 2. 字符串最长公共前缀")]),t._v(" "),a("p",[t._v("​    Trie树利用多个字符串的公共前缀来节省存储空间，反之，当我们把大量字符串存储到一棵trie树上时，我们可以快速得到某些字符串的公共前缀。举例：")]),t._v(" "),a("ol",[a("li",[t._v("给出N 个小写英文字母串，以及Q 个查询，即查询某两个串的最长公共前缀的长度是多少。")])]),t._v(" "),a("p",[t._v("解决方案：")]),t._v(" "),a("p",[t._v("​    首先对所有的串建立其对应的字母树。此时发现，对于两个串的最长公共前缀的长度即它们所在结点的公共祖先个数，于是问题就转化为了离线  （Offline）的最近公共祖先（Least Common Ancestor，简称LCA）问题。")]),t._v(" "),a("h3",{attrs:{id:"_3-排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-排序"}},[t._v("#")]),t._v(" 3.  排序")]),t._v(" "),a("p",[t._v("​    Trie树是一棵多叉树，只要先序遍历整棵树，输出相应的字符串便是按字典序排序的结果。")]),t._v(" "),a("p",[t._v("​    举例： 给你N 个互不相同的仅由一个单词构成的英文名，让你将它们按字典序从小到大排序输出。")]),t._v(" "),a("h3",{attrs:{id:"_4-作为其他数据结构和算法的辅助结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-作为其他数据结构和算法的辅助结构"}},[t._v("#")]),t._v(" 4 作为其他数据结构和算法的辅助结构")]),t._v(" "),a("p",[t._v("​    如后缀树，AC自动机等。")]),t._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),a("ul",[a("li",[t._v("https://www.cnblogs.com/gaochundong/p/string_matching.html")]),t._v(" "),a("li",[t._v("https://www.cnblogs.com/magic-sea/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/")]),t._v(" "),a("li",[t._v("https://blog.csdn.net/xgf415/article/details/76436066")])])])}),[],!1,null,null,null);s.default=r.exports}}]);