(window.webpackJsonp=window.webpackJsonp||[]).push([[197],{713:function(t,_,v){"use strict";v.r(_);var r=v(53),a=Object(r.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[t._v("本文主要是介绍 常用算法思想-分支限界法 。")])]),t._v(" "),v("p"),v("div",{staticClass:"table-of-contents"},[v("ul",[v("li",[v("a",{attrs:{href:"#一、基本描述"}},[t._v("一、基本描述")])]),v("li",[v("a",{attrs:{href:"#_1-分支搜索算法"}},[t._v("（1）分支搜索算法")])]),v("li",[v("a",{attrs:{href:"#_2-分支限界搜索算法"}},[t._v("（2）分支限界搜索算法")])]),v("li",[v("a",{attrs:{href:"#二、分支限界法的一般过程"}},[t._v("二、分支限界法的一般过程")])]),v("li",[v("a",{attrs:{href:"#三、回溯法和分支限界法的一些区别"}},[t._v("三、回溯法和分支限界法的一些区别")])]),v("li",[v("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),v("p"),t._v(" "),v("p",[t._v("五大常用算法之五：分支限界法")]),t._v(" "),v("p",[t._v("分支限界法")]),t._v(" "),v("h2",{attrs:{id:"一、基本描述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、基本描述"}},[t._v("#")]),t._v(" 一、基本描述")]),t._v(" "),v("p",[t._v("类似于回溯法，也是一种在问题的解空间树T上搜索问题解的算法。但在一般情况下，分支限界法与回溯法的求解目标不同。"),v("strong",[t._v("回溯法的求解目标是找出T中满足约束条件的所有解")]),t._v("，而"),v("strong",[t._v("分支限界法")]),t._v("的求解目标则是找出"),v("strong",[t._v("满足约束条件的一个解")]),t._v("，或是在满足约束条件的解中找出使某一目标函数值达到"),v("strong",[t._v("极大或极小的解")]),t._v("，即在某种意义下的"),v("strong",[t._v("最优解")]),t._v("。")]),t._v(" "),v("h2",{attrs:{id:"_1-分支搜索算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-分支搜索算法"}},[t._v("#")]),t._v(" （1）分支搜索算法")]),t._v(" "),v("p",[t._v("所谓“分支”就是采用广度优先的策略，依次搜索E-结点的所有分支，也就是所有相邻结点，抛弃不满足约束条件的结点，其余结点加入活结点表。然后从表中选择一个结点作为下一个E-结点，继续搜索。")]),t._v(" "),v("p",[t._v("选择下一个E-结点的方式不同，则会有几种不同的分支搜索方式。")]),t._v(" "),v("p",[t._v("1）FIFO搜索")]),t._v(" "),v("p",[t._v("2）LIFO搜索")]),t._v(" "),v("p",[t._v("3）优先队列式搜索")]),t._v(" "),v("h2",{attrs:{id:"_2-分支限界搜索算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-分支限界搜索算法"}},[t._v("#")]),t._v(" （2）分支限界搜索算法")]),t._v(" "),v("h2",{attrs:{id:"二、分支限界法的一般过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、分支限界法的一般过程"}},[t._v("#")]),t._v(" 二、分支限界法的一般过程")]),t._v(" "),v("p",[t._v("由于求解目标不同，导致分支限界法与回溯法在解空间树T上的搜索方式也不相同。"),v("strong",[t._v("回溯法以深度优先的方式搜索解空间树T")]),t._v("，而"),v("strong",[t._v("分支限界法则以广度优先或以最小耗费优先的方式搜索解空间树T")]),t._v("。")]),t._v(" "),v("p",[t._v("分支限界法的"),v("strong",[t._v("搜索策略是")]),t._v("：在扩展结点处，先生成其所有的儿子结点（分支），然后再从当前的活结点表中选择下一个扩展对点。为了有效地选择下一扩展结点，以加速搜索的进程，在每一活结点处，计算一个函数值（限界），并根据这些已计算出的函数值，从当前活结点表中选择一个最有利的结点作为扩展结点，使搜索朝着解空间树上有最优解的分支推进，以便尽快地找出一个最优解。")]),t._v(" "),v("p",[t._v("分支限界法常以广度优先或以最小耗费（最大效益）优先的方式搜索问题的解空间树。问题的"),v("strong",[t._v("解空间树是表示问题解空间的一棵有序树，常见的有子集树和排列树")]),t._v("。在搜索问题的解空间树时，分支限界法与回溯法对当前扩展结点所使用的扩展方式不同。在分支限界法中，每一个活结点只有一次机会成为扩展结点。活结点一旦成为扩展结点，就一次性产生其所有儿子结点。在这些儿子结点中，那些导致不可行解或导致非最优解的儿子结点被舍弃，其余儿子结点被子加入活结点表中。此后，从活结点表中取下一结点成为当前扩展结点，并重复上述结点扩展过程。这个过程一直持续到找到所求的解或活结点表为空时为止。")]),t._v(" "),v("h2",{attrs:{id:"三、回溯法和分支限界法的一些区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、回溯法和分支限界法的一些区别"}},[t._v("#")]),t._v(" 三、回溯法和分支限界法的一些区别")]),t._v(" "),v("p",[t._v("有一些问题其实无论用回溯法还是分支限界法都可以得到很好的解决，但是另外一些则不然。也许我们需要具体一些的分析——到底何时使用分支限界而何时使用回溯呢？")]),t._v(" "),v("p",[t._v("回溯法和分支限界法的一些区别：")]),t._v(" "),v("p",[t._v("方法对解空间树的搜索方式")]),t._v(" "),v("p",[v("a",{attrs:{href:"http://www.storworld.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("存储"),v("OutboundLink")],1),t._v("结点的常用数据结构")]),t._v(" "),v("p",[t._v("结点"),v("a",{attrs:{href:"http://www.storworld.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("存储"),v("OutboundLink")],1),t._v("特性常用应用")]),t._v(" "),v("p",[t._v("回溯法深度优先搜索堆栈活结点的所有可行子结点被遍历后才被从栈中弹出找出满足约束条件的所有解")]),t._v(" "),v("p",[t._v("分支限界法广度优先或最小消耗优先搜索队列、优先队列每个结点只有一次成为活结点的机会找出满足约束条件的一个解或特定意义下的最优解")]),t._v(" "),v("h2",{attrs:{id:"参考文章"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),v("ul",[v("li",[t._v("https://www.cnblogs.com/steven_oyj/archive/2010/05/22/1741378.html")])])])}),[],!1,null,null,null);_.default=a.exports}}]);