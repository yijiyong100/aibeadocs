(window.webpackJsonp=window.webpackJsonp||[]).push([[316],{831:function(s,t,i){"use strict";i.r(t);var e=i(53),a=Object(e.a)({},(function(){var s=this,t=s.$createElement,i=s._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),i("p",[s._v("本文主要是 Redis入门介绍 。")])]),s._v(" "),i("p"),i("div",{staticClass:"table-of-contents"},[i("ul",[i("li",[i("a",{attrs:{href:"#redis-是什么"}},[s._v("Redis 是什么？")])]),i("li",[i("a",{attrs:{href:"#redis-数据结构"}},[s._v("Redis 数据结构")]),i("ul",[i("li",[i("a",{attrs:{href:"#value-对应的五种数据结构"}},[s._v("value 对应的五种数据结构")])]),i("li",[i("a",{attrs:{href:"#value-五种数据结构说明"}},[s._v("value 五种数据结构说明")])]),i("li",[i("a",{attrs:{href:"#redis-核心对象-redisobject"}},[s._v("Redis 核心对象 redisObject")])])])]),i("li",[i("a",{attrs:{href:"#编码方式-encoding"}},[s._v("编码方式（encoding）")]),i("ul",[i("li",[i("a",{attrs:{href:"#redis-五种数据结构对应的内部编码"}},[s._v("Redis 五种数据结构对应的内部编码")])]),i("li",[i("a",{attrs:{href:"#string"}},[s._v("string")])]),i("li",[i("a",{attrs:{href:"#hash"}},[s._v("hash")])]),i("li",[i("a",{attrs:{href:"#list"}},[s._v("list")])]),i("li",[i("a",{attrs:{href:"#set"}},[s._v("set")])]),i("li",[i("a",{attrs:{href:"#zset"}},[s._v("zset")])]),i("li",[i("a",{attrs:{href:"#reference"}},[s._v("reference")])])])]),i("li",[i("a",{attrs:{href:"#参考文章"}},[s._v("参考文章")])])])]),i("p"),s._v(" "),i("h2",{attrs:{id:"redis-是什么"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#redis-是什么"}},[s._v("#")]),s._v(" Redis 是什么？")]),s._v(" "),i("p",[s._v("Redis是一个开源（BSD许可）的，利用内存进行存储的数据结构存储系统；它可以用作数据库、缓存和消息中间件。")]),s._v(" "),i("ul",[i("li",[s._v("redis由意大利人 Salvatore Sanfilippo 使用C语言开发")]),s._v(" "),i("li",[s._v("redis支持字符串（string）、列表（list）、集合（set）、有序集合（zset）、散列表（hash）五种基本数据结构类型")]),s._v(" "),i("li",[s._v("redis从 2.2.0 版本开始支持bitmap；在 2.8.9 版本添加了 HyperLogLog 用以进行基数统计；在 3.2 版本中新增了对GEO(地理位置)的支持")]),s._v(" "),i("li",[s._v("redis支持简单事务与数据持久化，提供 RDB、AOF两种可选的持久化方式")]),s._v(" "),i("li",[s._v("redis可以用作数据库、缓存、消息队列等")])]),s._v(" "),i("h2",{attrs:{id:"redis-数据结构"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#redis-数据结构"}},[s._v("#")]),s._v(" Redis 数据结构")]),s._v(" "),i("h3",{attrs:{id:"value-对应的五种数据结构"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#value-对应的五种数据结构"}},[s._v("#")]),s._v(" value 对应的五种数据结构")]),s._v(" "),i("p",[s._v("Redis存储key-value键值对数据，其中key类型为字符串，value对应五种数据结构，如下图所示：")]),s._v(" "),i("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/db/redis/intro-1.png"),alt:"wxmp"}}),s._v(" "),i("h3",{attrs:{id:"value-五种数据结构说明"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#value-五种数据结构说明"}},[s._v("#")]),s._v(" value 五种数据结构说明")]),s._v(" "),i("ul",[i("li",[s._v("字符串（string）类型的数据结构，对应的就是一个普通的字符串")]),s._v(" "),i("li",[s._v("散列表（hash）类型的数据结构，对应的就是一个hash table，散列表特别适合用于存储对象")]),s._v(" "),i("li",[s._v("列表（list）类型的数据结构，对应的就是一个双向列表，按照插入顺序排序")]),s._v(" "),i("li",[s._v("集合（set）类型的数据结构，对应的就是一个string类型的无序集合，集合中的数据不能重复出现")]),s._v(" "),i("li",[s._v("有序集合（zset）类型的数据结构, 对应的就是一个string类型的有序集合，排序因子为每个元素附带的一个double型的分数")])]),s._v(" "),i("h3",{attrs:{id:"redis-核心对象-redisobject"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#redis-核心对象-redisobject"}},[s._v("#")]),s._v(" Redis 核心对象 redisObject")]),s._v(" "),i("p",[s._v("在redis的 key-value存储系统中，value 类型则为 redis 对象 redisObject, redisObject对象可以绑定对应的五种数据类型，如下图所示：")]),s._v(" "),i("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/db/redis/intro-2.png"),alt:"wxmp"}}),s._v(" "),i("p",[s._v("Redis 核心对象 redisObject")]),s._v(" "),i("ul",[i("li",[s._v("数据类型(type)，对应五种数据类型")]),s._v(" "),i("li",[s._v("编码方式(encoding)，指定所绑定数据类型的编码方式")]),s._v(" "),i("li",[s._v("数据指针(ptr), 指向对象底层实现的数据结构")]),s._v(" "),i("li",[s._v("虚拟内存(vm), 该功能默认处于关闭状态，只有打开了redis的虚拟内存功能，才会给vm分配真正的内存")])]),s._v(" "),i("h2",{attrs:{id:"编码方式-encoding"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#编码方式-encoding"}},[s._v("#")]),s._v(" 编码方式（encoding）")]),s._v(" "),i("ul",[i("li",[s._v("raw RAW编码方式使用简单动态字符串来保存字符串对象,才有预分配空间的方式来避免字符串修改时频繁的分配释放内存")]),s._v(" "),i("li",[s._v("int INT编码方式以整数保存字符串数据，仅限能用long类型值表达的字符串")]),s._v(" "),i("li",[s._v("embstr 从Redis 3.0版本开始字符串引入了EMBSTR编码方式，长度小于OBJ_ENCODING_EMBSTR_SIZE_LIMIT(39)的字符串将以EMBSTR方式存储。采用这个方式可以减少内存分配的次数，提高内存分配的效率，降低内存碎片率。")]),s._v(" "),i("li",[s._v("hashtable 当数据类型无法满足使用ziplist的条件时，Redis会使用hashtable作为数据结构的内部实现")]),s._v(" "),i("li",[s._v("ziplist 列表(List),散列表(Hash),有序集合(Sorted Set)在成员较少，成员值较小的时候都会采用压缩列表(ZIPLIST)编码方式进行存储；成员值”较小”的标准可以通过配置项进行配置；压缩列表简单来说就是一系列连续的内存数据块，其内存利用率很高，但增删改查效率较低，所以只会在成员较少，值较小的情况下使用。")]),s._v(" "),i("li",[s._v("linkedlist 在Redis 3.2版本之前，一般的链表使用LINKDEDLIST编码。在Redis 3.2版本开始，所有的链表都是用QUICKLIST编码。两者都是使用基本的双端链表数据结构，区别是QUICKLIST每个节点的值都是使用ZIPLIST进行存储的。")]),s._v(" "),i("li",[s._v("skiplist 跳跃表(SKIPLIST)编码方式为有序集合对象专用，有序集合对象采用了字典+跳跃表的方式实现；其中字典里面保存了有序集合中member与score的键值对，跳跃表则用于实现按score排序的功能")]),s._v(" "),i("li",[s._v("intset 当一个集合只包含整数值元素， 并且这个集合的元素数量不多时， Redis 就会使用整数集合作为集合键的底层实现")])]),s._v(" "),i("p",[s._v("Redis这种通过redisObject指定数据结构编码方式的设计有两个好处：")]),s._v(" "),i("ul",[i("li",[s._v("可以改进内部编码，而对外的数据结构和命令没有影响，这样一旦开发开发出优秀的内部编码，无需改动外部数据结构和命令。")]),s._v(" "),i("li",[s._v("多种内部编码实现可以在不同场景下发挥各自的优势。例如ziplist比较节省内存，但是在列表元素比较多的情况下，性能会有所下降，这时候Redis会根据配置选项将列表类型的内部实现转换为linkedlist。")])]),s._v(" "),i("h3",{attrs:{id:"redis-五种数据结构对应的内部编码"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#redis-五种数据结构对应的内部编码"}},[s._v("#")]),s._v(" Redis 五种数据结构对应的内部编码")]),s._v(" "),i("p",[s._v("Redis在不同的情况下会为数据对象选择适合的编码方式")]),s._v(" "),i("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/db/redis/intro-3.png"),alt:"wxmp"}}),s._v(" "),i("p",[s._v("Redis 五种数据结构对应的内部编码")]),s._v(" "),i("h3",{attrs:{id:"string"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" string")]),s._v(" "),i("ul",[i("li",[s._v("int：8个字节的长整型")]),s._v(" "),i("li",[s._v("embstr：小于等于39个字节的字符串")]),s._v(" "),i("li",[s._v("raw：大于39个字节的字符串")])]),s._v(" "),i("h3",{attrs:{id:"hash"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[s._v("#")]),s._v(" hash")]),s._v(" "),i("ul",[i("li",[s._v("ziplist（压缩列表）：当哈希类型元素个数小于hash-max-ziplist-entries配置（默认512个），同时所有值都小于hash-max-ziplist-value配置（默认64个字节）时，Redis会使用ziplist作为哈希的内部实现ziplist使用更加紧凑的结构实现多个元素的连续存储，所以在节省内存方面比hashtable更加优秀")]),s._v(" "),i("li",[s._v("hashtable（哈希表）：当哈希类型无法满足ziplist的条件时，Redis会使用hashtable作为哈希的内部实现。因为此时ziplist的读写效率会下降，而hashtable的读写时间复杂度为O(1)")])]),s._v(" "),i("h3",{attrs:{id:"list"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[s._v("#")]),s._v(" list")]),s._v(" "),i("ul",[i("li",[s._v("ziplist（压缩列表）：当哈希类型元素个数小于hash-max-ziplist-entries配置（默认512个）同时所有值都小于hash-max-ziplist-value配置（默认64个字节）时，Redis会使用ziplist作为哈希的内部实现")]),s._v(" "),i("li",[s._v("linkedlist（链表）：当列表类型无法满足ziplist的条件时，Redis会使用linkedlist作为列表的内部实现")])]),s._v(" "),i("h3",{attrs:{id:"set"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[s._v("#")]),s._v(" set")]),s._v(" "),i("ul",[i("li",[s._v("intset（整数集合）：当集合中的元素都是整数且元素个数小于set-max-intset-entries配置（默认512个）时，Redis会选用intset来作为集合内部实现，从而减少内存的使用。")]),s._v(" "),i("li",[s._v("hashtable（哈希表）：当集合类型无法满足intset的条件时，Redis会使用hashtable作为集合的内部实现")])]),s._v(" "),i("h3",{attrs:{id:"zset"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#zset"}},[s._v("#")]),s._v(" zset")]),s._v(" "),i("ul",[i("li",[s._v("ziplist（压缩列表）：当有序集合的元素个数小于zset-max-ziplist-entries配置（默认128个）同时每个元素的值小于zset-max-ziplist-value配置（默认64个字节）时，Redis会用ziplist来作为有序集合的内部实现，ziplist可以有效减少内存使用")]),s._v(" "),i("li",[s._v("skiplist（跳跃表）：当ziplist条件不满足时，有序集合会使用skiplist作为内部实现，因为此时zip的读写效率会下降")])]),s._v(" "),i("h3",{attrs:{id:"reference"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[s._v("#")]),s._v(" reference")]),s._v(" "),i("ul",[i("li",[s._v("redis中文官网")]),s._v(" "),i("li",[s._v("菜鸟教程-Redis")]),s._v(" "),i("li",[s._v("Redis数据编码方式详解")]),s._v(" "),i("li",[s._v("Redis的五种数据结构的内部编码")])]),s._v(" "),i("h2",{attrs:{id:"参考文章"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[s._v("#")]),s._v(" 参考文章")]),s._v(" "),i("ul",[i("li",[s._v("https://www.izhangchao.com/internet/internet_235797.html")])])])}),[],!1,null,null,null);t.default=a.exports}}]);