(window.webpackJsonp=window.webpackJsonp||[]).push([[330],{847:function(t,a,s){"use strict";s.r(a);var e=s(53),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("本文主要是介绍 Flume-分布式配置 。")])]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#一、flume介绍"}},[t._v("一、Flume介绍")])]),s("li",[s("a",{attrs:{href:"#设计目标"}},[t._v("设计目标：")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-可靠性"}},[t._v("(1) 可靠性")])]),s("li",[s("a",{attrs:{href:"#_2-可扩展性"}},[t._v("(2) 可扩展性")])]),s("li",[s("a",{attrs:{href:"#_3-可管理性"}},[t._v("(3) 可管理性")])]),s("li",[s("a",{attrs:{href:"#_4-功能可扩展性"}},[t._v("(4) 功能可扩展性")])])])]),s("li",[s("a",{attrs:{href:"#二、flume架构"}},[t._v("二、Flume架构")]),s("ul",[s("li",[s("a",{attrs:{href:"#flume使用两个组件-master和node-node根据在master-shell或web中动态配置-决定其是作为agent还是collector。"}},[t._v("Flume使用两个组件：Master和Node，Node根据在Master shell或web中动态配置，决定其是作为Agent还是Collector。")])]),s("li",[s("a",{attrs:{href:"#_1-agent"}},[t._v("(1) agent")])]),s("li",[s("a",{attrs:{href:"#_2-collector"}},[t._v("(2) collector")])]),s("li",[s("a",{attrs:{href:"#sink-如"}},[t._v("sink，如：")])]),s("li",[s("a",{attrs:{href:"#_3-storage"}},[t._v("(3) storage")])]),s("li",[s("a",{attrs:{href:"#_4-master"}},[t._v("(4) Master")])]),s("li",[s("a",{attrs:{href:"#注-flume框架对hadoop和zookeeper的依赖只是在jar包上-并不要求flume启动时必须将hadoop和zookeeper服务也启动。"}},[t._v("注：Flume框架对hadoop和zookeeper的依赖只是在jar包上，并不要求flume启动时必须将hadoop和zookeeper服务也启动。")])])])]),s("li",[s("a",{attrs:{href:"#三、flume分布式环境部署"}},[t._v("三、Flume分布式环境部署")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-实验场景"}},[t._v("1.实验场景")])]),s("li",[s("a",{attrs:{href:"#注意-flume集群整个集群的网络环境要保证稳定-可靠-否则会出现一些莫名错误-比如-agent端发送不了数据到collector-。"}},[t._v("注意：flume集群整个集群的网络环境要保证稳定，可靠，否则会出现一些莫名错误（比如：agent端发送不了数据到collector）。")])]),s("li",[s("a",{attrs:{href:"#_1-flume环境安装"}},[t._v("1.Flume环境安装")])]),s("li",[s("a",{attrs:{href:"#_2-选择一个或多个节点当做master"}},[t._v("2.选择一个或多个节点当做master")])]),s("li",[s("a",{attrs:{href:"#flume-master数量的选择原则"}},[t._v("Flume master数量的选择原则：")])]),s("li",[s("a",{attrs:{href:"#_3-修改静态配置文件"}},[t._v("3.修改静态配置文件")])]),s("li",[s("a",{attrs:{href:"#_4-启动集群"}},[t._v("4.启动集群")])]),s("li",[s("a",{attrs:{href:"#_5-基于flume-shell的动态配置"}},[t._v("5.基于flume shell的动态配置")])]),s("li",[s("a",{attrs:{href:"#_1-设置逻辑节点-logical-node"}},[t._v("1. 设置逻辑节点（logical node）")])]),s("li",[s("a",{attrs:{href:"#_2-启动collector的监听端口"}},[t._v("2.启动Collector的监听端口")])]),s("li",[s("a",{attrs:{href:"#_3-设置各节点的source和sink"}},[t._v("3.设置各节点的source和sink")])])])]),s("li",[s("a",{attrs:{href:"#四、高级动态配置"}},[t._v("四、高级动态配置")])]),s("li",[s("a",{attrs:{href:"#五、问题和总结"}},[t._v("五、问题和总结")]),s("ul",[s("li",[s("a",{attrs:{href:"#问题总结"}},[t._v("问题总结：")])])])]),s("li",[s("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"一、flume介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、flume介绍"}},[t._v("#")]),t._v(" 一、Flume介绍")]),t._v(" "),s("p",[t._v("Flume是一个分布式、可靠、和高可用的海量日志聚合的系统，支持在系统中定制各类数据发送方，用于收集数据；同时，Flume提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。")]),t._v(" "),s("h2",{attrs:{id:"设计目标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计目标"}},[t._v("#")]),t._v(" 设计目标：")]),t._v(" "),s("h3",{attrs:{id:"_1-可靠性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-可靠性"}},[t._v("#")]),t._v(" (1) 可靠性")]),t._v(" "),s("p",[t._v("当节点出现故障时，日志能够被传送到其他节点上而不会丢失。Flume提供了三种级别的可靠性保障，从强到弱依次分别为：end-to-end（收到数据agent首先将event写到磁盘上，当数据传送成功后，再删除；如果数据发送失败，可以重新发送。），Store on failure（这也是scribe采用的策略，当数据接收方crash时，将数据写到本地，待恢复后，继续发送），Best effort（数据发送到接收方后，不会进行确认）。")]),t._v(" "),s("h3",{attrs:{id:"_2-可扩展性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-可扩展性"}},[t._v("#")]),t._v(" (2) 可扩展性")]),t._v(" "),s("p",[t._v("Flume采用了三层架构，分别为agent，collector和storage，每一层均可以水平扩展。其中，所有agent和collector由master统一管理，这使得系统容易监控和维护，且master允许有多个（使用ZooKeeper进行管理和负载均衡），这就避免了单点故障问题。")]),t._v(" "),s("h3",{attrs:{id:"_3-可管理性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-可管理性"}},[t._v("#")]),t._v(" (3) 可管理性")]),t._v(" "),s("p",[t._v("所有agent和colletor由master统一管理，这使得系统便于维护。多master情况，Flume利用ZooKeeper和gossip，保证动态配置数据的一致性。用户可以在master上查看各个数据源或者数据流执行情况，且可以对各个数据源配置和动态加载。Flume提供了web 和shell script command两种形式对数据流进行管理。")]),t._v(" "),s("h3",{attrs:{id:"_4-功能可扩展性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-功能可扩展性"}},[t._v("#")]),t._v(" (4) 功能可扩展性")]),t._v(" "),s("p",[t._v("用户可以根据需要添加自己的agent，collector或者storage。此外，Flume自带了很多组件，包括各种agent（file， syslog等），collector和storage（file，HDFS等）。")]),t._v(" "),s("h2",{attrs:{id:"二、flume架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、flume架构"}},[t._v("#")]),t._v(" 二、Flume架构")]),t._v(" "),s("p",[t._v("flume的逻辑架构：")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/dc/flume/distri-1.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("正如前面提到的，Flume采用了分层架构：分别为agent，collector和storage。其中，agent和collector均由两部分组成：source和sink，source是数据来源，sink是数据去向。")]),t._v(" "),s("h3",{attrs:{id:"flume使用两个组件-master和node-node根据在master-shell或web中动态配置-决定其是作为agent还是collector。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flume使用两个组件-master和node-node根据在master-shell或web中动态配置-决定其是作为agent还是collector。"}},[t._v("#")]),t._v(" Flume使用两个组件：Master和Node，Node根据在Master shell或web中动态配置，决定其是作为Agent还是Collector。")]),t._v(" "),s("h3",{attrs:{id:"_1-agent"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-agent"}},[t._v("#")]),t._v(" (1) agent")]),t._v(" "),s("p",[t._v("agent的作用是将数据源的数据发送给collector。")]),t._v(" "),s("p",[t._v("Flume自带了很多直接可用的数据源（source），如：")]),t._v(" "),s("ul",[s("li",[t._v("text(“filename”)：将文件filename作为数据源，按行发送")]),t._v(" "),s("li",[t._v("tail(“filename”)：探测filename新产生的数据，按行发送出去")]),t._v(" "),s("li",[t._v("fsyslogTcp(5140)：监听TCP的5140端口，并且接收到的数据发送出去")]),t._v(" "),s("li",[t._v('tailDir("'),s("em",[t._v("dirname")]),t._v('"[, fileregex=".*"[, startFromEnd=false[, recurseDepth=0]]])：监听目录中的文件末尾，使用正则去选定需要监听的文件（不包含目录），recurseDepth为递归监听其下子目录的深度')])]),t._v(" "),s("p",[t._v("更多可参见这位朋友的整理：http://www.cnblogs.com/zhangmiao-chp/archive/2011/05/18/2050465.html")]),t._v(" "),s("p",[t._v("同时提供了很多sink，如：")]),t._v(" "),s("ul",[s("li",[t._v('console[("format")] ：直接将将数据显示在consolr上')]),t._v(" "),s("li",[t._v("text(“txtfile”)：将数据写到文件txtfile中")]),t._v(" "),s("li",[t._v("dfs(“dfsfile”)：将数据写到HDFS上的dfsfile文件中")]),t._v(" "),s("li",[t._v("syslogTcp(“host”,port)：将数据通过TCP传递给host节点")]),t._v(" "),s("li",[t._v('agentSink[("machine"[,port])]：等价于agentE2ESink，如果省略，machine参数，默认使用flume.collector.event.host与flume.collector.event.port作为默认collecotr')]),t._v(" "),s("li",[t._v('agentDFOSink[("machine" [,port])]：本地热备agent，agent发现collector节点故障后，不断检查collector的存活状态以便重新发送event，在此间产生的数据将缓存到本地磁盘中')]),t._v(" "),s("li",[t._v('agentBESink[("machine"[,port])]：不负责的agent，如果collector故障，将不做任何处理，它发送的数据也将被直接丢弃')]),t._v(" "),s("li",[t._v("agentE2EChain：指定多个collector提高可用性。 当向主collector发送event失效后，转向第二个collector发送，当所有的collector失败后，它会非常执着的再来一遍")])]),t._v(" "),s("p",[t._v("更多可参见这位朋友的整理：http://www.cnblogs.com/zhangmiao-chp/archive/2011/05/18/2050472.html")]),t._v(" "),s("h3",{attrs:{id:"_2-collector"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-collector"}},[t._v("#")]),t._v(" (2) collector")]),t._v(" "),s("p",[t._v("collector的作用是将多个agent的数据汇总后，加载到storage中。")]),t._v(" "),s("p",[t._v("它的source和sink与agent类似。")]),t._v(" "),s("p",[t._v("数据源（source），如：")]),t._v(" "),s("ul",[s("li",[t._v("collectorSource[("),s("em",[t._v("port")]),t._v(")]：Collector source，监听端口汇聚数据")]),t._v(" "),s("li",[t._v("autoCollectorSource：通过master协调物理节点自动汇聚数据")]),t._v(" "),s("li",[t._v("logicalSource：逻辑source，由master分配端口并监听rpcSink")])]),t._v(" "),s("h3",{attrs:{id:"sink-如"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sink-如"}},[t._v("#")]),t._v(" sink，如：")]),t._v(" "),s("ul",[s("li",[t._v('collectorSink( "fsdir","fsfileprefix",rollmillis)：collectorSink，数据通过collector汇聚之后发送到hdfs, fsdir 是hdfs目录，fsfileprefix为文件前缀码')]),t._v(" "),s("li",[t._v('customdfs("hdfspath"[, "format"])：自定义格式dfs')])]),t._v(" "),s("h3",{attrs:{id:"_3-storage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-storage"}},[t._v("#")]),t._v(" (3) storage")]),t._v(" "),s("p",[t._v("storage是存储系统，可以是一个普通file，也可以是HDFS，HIVE，HBase，分布式存储等。")]),t._v(" "),s("h3",{attrs:{id:"_4-master"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-master"}},[t._v("#")]),t._v(" (4) Master")]),t._v(" "),s("p",[t._v("Master是管理协调agent和collector的配置等信息，是flume集群的控制器。")]),t._v(" "),s("p",[t._v("在Flume中，最重要的抽象是data flow（数据流），data flow描述了数据从产生，传输、处理并最终写入目标的一条路径。")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/dc/flume/distri-2.png"),alt:"wxmp"}}),t._v(" "),s("ol",[s("li",[t._v("对于agent数据流配置就是从哪得到数据，把数据发送到哪个collector。")]),t._v(" "),s("li",[t._v("对于collector是接收agent发过来的数据，把数据发送到指定的目标机器上。")])]),t._v(" "),s("h3",{attrs:{id:"注-flume框架对hadoop和zookeeper的依赖只是在jar包上-并不要求flume启动时必须将hadoop和zookeeper服务也启动。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注-flume框架对hadoop和zookeeper的依赖只是在jar包上-并不要求flume启动时必须将hadoop和zookeeper服务也启动。"}},[t._v("#")]),t._v(" 注：Flume框架对hadoop和zookeeper的依赖只是在jar包上，并不要求flume启动时必须将hadoop和zookeeper服务也启动。")]),t._v(" "),s("h2",{attrs:{id:"三、flume分布式环境部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、flume分布式环境部署"}},[t._v("#")]),t._v(" 三、Flume分布式环境部署")]),t._v(" "),s("h3",{attrs:{id:"_1-实验场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-实验场景"}},[t._v("#")]),t._v(" 1.实验场景")]),t._v(" "),s("ul",[s("li",[t._v("操作系统版本：RedHat 5.6")]),t._v(" "),s("li",[t._v("Hadoop版本：0.20.2")]),t._v(" "),s("li",[t._v("Jdk版本：jdk1.6.0_26")]),t._v(" "),s("li",[t._v("安装flume版本：flume-distribution-0.9.4-bin")])]),t._v(" "),s("p",[t._v("部署flume在集群上，按照如下步骤：")]),t._v(" "),s("ol",[s("li",[t._v("在集群上的每台机器上安装flume")]),t._v(" "),s("li",[t._v("选择一个或多个节点当做master")]),t._v(" "),s("li",[t._v("修改静态配置文件")]),t._v(" "),s("li",[t._v("在至少一台机器上启动一个master ，所有节点启动flume node")]),t._v(" "),s("li",[t._v("动态配置")])]),t._v(" "),s("p",[t._v("需要在集群的每台机器上部署Flume。")]),t._v(" "),s("h3",{attrs:{id:"注意-flume集群整个集群的网络环境要保证稳定-可靠-否则会出现一些莫名错误-比如-agent端发送不了数据到collector-。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意-flume集群整个集群的网络环境要保证稳定-可靠-否则会出现一些莫名错误-比如-agent端发送不了数据到collector-。"}},[t._v("#")]),t._v(" 注意：flume集群整个集群的网络环境要保证稳定，可靠，否则会出现一些莫名错误（比如：agent端发送不了数据到collector）。")]),t._v(" "),s("h3",{attrs:{id:"_1-flume环境安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-flume环境安装"}},[t._v("#")]),t._v(" 1.Flume环境安装")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$wget")]),t._v(" http://cloud.github.com/downloads/cloudera/flume/flume-distribution-0.9.4-bin.tar.gz\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$tar")]),t._v(" -xzvf flume-distribution-0.9.4-bin.tar.gz\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$cp")]),t._v(" -rf flume-distribution-0.9.4-bin /usr/local/flume\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$vi")]),t._v(" /etc/profile  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#添加环境配置")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("FLUME_HOME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/usr/local/flume\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(".:"),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),t._v("::"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$FLUME_HOME")]),t._v("/bin\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$source")]),t._v(" /etc/profile\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$flume")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#验证安装")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-选择一个或多个节点当做master"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-选择一个或多个节点当做master"}},[t._v("#")]),t._v(" 2.选择一个或多个节点当做master")]),t._v(" "),s("p",[t._v("对于master的选择情况，可以在集群上定义一个master，也可以为了提高可用性选择多个节点做为master。")]),t._v(" "),s("ul",[s("li",[t._v("单点master模式：容易管理，但在系统的容错和扩展性有缺陷")]),t._v(" "),s("li",[t._v("多点master模式：通常是运行3/5个master，能很好的容错")])]),t._v(" "),s("h3",{attrs:{id:"flume-master数量的选择原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flume-master数量的选择原则"}},[t._v("#")]),t._v(" Flume master数量的选择原则：")]),t._v(" "),s("p",[s("em",[t._v("分布式的master能够继续正常工作不会崩溃的前提是正常工作的master数量超过总master数量的一半。")])]),t._v(" "),s("p",[t._v("Flume master 的作用主要有两个：")]),t._v(" "),s("ul",[s("li",[t._v("跟踪各节点的配置情况，通知节点配置的改变；")]),t._v(" "),s("li",[t._v("跟踪来自flow的结尾操控在可靠模式下（E2E）的信息，以至于让flow的源头知道什么时候停止传输event。")])]),t._v(" "),s("h3",{attrs:{id:"_3-修改静态配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-修改静态配置文件"}},[t._v("#")]),t._v(" 3.修改静态配置文件")]),t._v(" "),s("p",[t._v("site-specific设置对于flume节点和master通过在每一个集群节点的conf/flume-site.xml是可配置的，如果这个文件不存在，设置的属性默认的在conf/flume--conf.xml中，在接下来的例子中，在flume的节点上设置master名，让节点自己去寻找叫“master”的flume Master。")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token prolog"}},[t._v('<?xml version="1.0"?>')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token prolog"}},[t._v('<?xml-stylesheet type="text/xsl"  href="configuration.xsl"?>')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("configuration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("flume.master.servers"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("master"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("configuration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("在多master的情况下需要如下配置：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("flume.master.servers"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("hadoopmaster.com,hadoopedge.com,datanode4.com"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("A comma-separated list of hostnames, one for each machine in the Flume Master."),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("flume.master.store"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("zookeeper"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("How the Flume Master stores node configurations. Must be either 'zookeeper' or 'memory'."),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("flume.master.serverid"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("The unique identifier for a machine in a Flume Master ensemble. Must be different on every master instance."),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[s("em",[t._v("注意：flume.master.serverid 属性的配置主要是针对master，集群上Master节点的flume.master.serverid 必须是不能相同的，该属性的值以0开始。")])]),t._v(" "),s("p",[t._v("当使用agent角色时，你可以通过添加下面的配置文件在flume-conf.xml中，来设置默认的collector主机：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("flume.collector.event.host"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("collector"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('This is the host name of the default "remote"  collector.'),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("flume.collector.port"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("35853"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("This default tcp port that the collector listens to in order to receive events it is collecting."),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("关于配置可参见：http://www.cnblogs.com/zhangmiao-chp/archive/2011/05/18/2050443.html。")]),t._v(" "),s("h3",{attrs:{id:"_4-启动集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-启动集群"}},[t._v("#")]),t._v(" 4.启动集群")]),t._v(" "),s("p",[t._v("集群上节点启动：")]),t._v(" "),s("ol",[s("li",[t._v("在命令行输入：flume master 启动master节点")]),t._v(" "),s("li",[t._v("在命令行输入：flume node –n nodeName 启动其他节点，nodeName最好根据集群逻辑的划分来取名子，这样在 master进行配置的时候比较清晰。")])]),t._v(" "),s("p",[t._v("名字规则自己定义，方便记忆和动态配置即可（后续会有介绍动态配置）")]),t._v(" "),s("h3",{attrs:{id:"_5-基于flume-shell的动态配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-基于flume-shell的动态配置"}},[t._v("#")]),t._v(" 5.基于flume shell的动态配置")]),t._v(" "),s("p",[t._v("关于flume shell 中的command参见：http://www.cnblogs.com/zhangmiao-chp/archive/2011/05/18/2050461.html")]),t._v(" "),s("p",[t._v("假设我们目前部署的Flume集群结构如下：")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/dc/flume/distri-3.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("我们想将A-F所在的机器的系统日志收集到HDFS中，怎么样在flume shell中配置达到我们的目的呢？")]),t._v(" "),s("h3",{attrs:{id:"_1-设置逻辑节点-logical-node"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-设置逻辑节点-logical-node"}},[t._v("#")]),t._v(" 1. 设置逻辑节点（logical node）")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$flume")]),t._v(" shell\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("connect localhost\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("help\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("exec map "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.1 agentA\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("exec map "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.2 agentB\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("exec map "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.3 agentC\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("exec map "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.4 agentD\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("exec map "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.5 agentE\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("exec map "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.6 agentF\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("getnodestatus\n        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.1 --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" IDLE\n        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.2 --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" IDLE\n        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.3 --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" IDLE\n        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.4 --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" IDLE\n        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.5 --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" IDLE\n        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.6 --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" IDLE\n        agentA --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" IDLE\n        agentB --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" IDLE\n        agentC --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" IDLE\n        agentD --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" IDLE\n        agentE --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" IDLE\n        agentF --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" IDLE\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("exec map "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.11 collector\n")])])]),s("p",[t._v("这里你也可以打开web master界面查看。")]),t._v(" "),s("h3",{attrs:{id:"_2-启动collector的监听端口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-启动collector的监听端口"}},[t._v("#")]),t._v(" 2.启动Collector的监听端口")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("exec config collector "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'collectorSource(35853)'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'collectorSink("","")\'')]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#collector节点监听35853端口过来的数据，这一部非常重要")]),t._v("\n")])])]),s("p",[t._v("登陆到collector服务器进行端口检测")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$netstat")]),t._v(" -nalp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("35853")]),t._v(" \n")])])]),s("p",[t._v("如果在master中未进行上述配置，在collector上检测不到此打开端口")]),t._v(" "),s("h3",{attrs:{id:"_3-设置各节点的source和sink"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-设置各节点的source和sink"}},[t._v("#")]),t._v(" 3.设置各节点的source和sink")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[t._v(">exec config collector 'collectorSource(35853)' 'collectorSink(\"hdfs://namenode/flume/\",\"syslog\")' \n>exec config agentA 'tail(\"/tmp/log/message\")' 'agentBESink(\"192.168.0.11\")' #经过实验，好像一个逻辑节点，最多只能有一个source和sink.>...>exec config agentF 'tail(\"/tmp/log/message\")' 'agentBESink(\"192.168.0.11\")'\n")])])]),s("p",[t._v("这时的配置情况可从master web中一目了然，此时已经可以达到我们最初的目的了。")]),t._v(" "),s("p",[t._v("以上通过flume shell进行的动态配置，在flume master web中都可以进行，在此不做进一步说明。")]),t._v(" "),s("h2",{attrs:{id:"四、高级动态配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、高级动态配置"}},[t._v("#")]),t._v(" 四、高级动态配置")]),t._v(" "),s("p",[t._v("高级配置其实就是在上述简单配置中增加了以下几个特性来保证系统更好的运行：")]),t._v(" "),s("ul",[s("li",[t._v("多Master(Master节点的高可用)")]),t._v(" "),s("li",[t._v("Collector Chain（Collector的高可用）")])]),t._v(" "),s("p",[t._v("多Master的情况在上面已经有过介绍，包括用途和master个数等。下面来简单看一下Collector Chain，其实也很简单，就是在动态配置时，使用agent*Chain来指定多个Collector来保证其日志传输的可用性。看一下一般正式环境中flume的逻辑图：")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/dc/flume/distri-4.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("这里agentA和agentB指向collectorA，如果CollectorA crach了，根据配置的可靠性级别agent会有相应的动作，我们很可能为了保障高效传输而没有选择E2E（即使是这种方式，Agent本地日志累积过多依然是一个问题），一般会配置多个Collector，形成collector chain。")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[t._v('>exec config agentC \'tail("/tmp/log/message")\' \'agentE2EChain("collectorB:35853","collectorA:35853")\'\n>exec config agentD \'tail("/tmp/log/message")\' \'agentE2EChain("collectorB:35853","collectorC:35853")\'\n')])])]),s("p",[t._v("这样collectorB在出问题时：")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/dc/flume/distri-5.png"),alt:"wxmp"}}),t._v(" "),s("h2",{attrs:{id:"五、问题和总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、问题和总结"}},[t._v("#")]),t._v(" 五、问题和总结")]),t._v(" "),s("p",[t._v("上述节点有如下几类：master、agent、collector、storage，针对每类节点我们看一下高可用和有没有可能引起性能瓶颈问题。")]),t._v(" "),s("p",[t._v("首先，storage层的失败和collector层的失败是一样的，只要数据放不到最终的位置，就认为节点是失败的。我们一定会根据收集数据的可靠性设定合适的传输模式，而且会根据我们的配置，自己控制collector接收数据的情况，collector的性能影响的是整个flume集群的数据吞吐量，所以collector最好单独部署，所以一般不用考虑高可用问题。")]),t._v(" "),s("p",[t._v("然后，agent层的失败，Flume数据安全级别的配置主要Agent的配置上，Agent提供三种级别发送数据到collector：E2E、DFO、BF，在些不赘述。看一下一位大牛的总结：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[t._v("agent节点监控日志文件夹下的所有文件，每一个agent最多监听1024个文件，每一个文件在agent的都会有一个类似游标的东西，记录监听文件读取的位置，这样每次文件有新的记录产生，那么游标就会读取增量记录，根据agent配置发送到collector的安全层级属性有E2E,DFO。如果是E2E的情况那么agent节点会首先把文件写入到agent节点的文件夹下，然后发送给collector，如果最终数据最终成功存储到storage层，那么agent删除之前写入的文件，如果没有收到成功的信息，那么就保留信息。\n\n如果agent节点出现问题，那么相当于所有的记录信息都消失了，如果直接重新启动，agent会认为日志文件夹下的所有文件都是没有监听过的，没有文件记录的标示，所以会重新读取文件，这样，日志就会有重复，具体恢复办法如下\n\n      将agent节点上监听的日志文件夹下已经发送的日志文件移出，处理完，故障重新启动agent即可。\n注：在agent节点失败的情况下，按照失败的时间点，将时间点之前的数据文件移出，将flume.agent.logdir配置的文件夹清空，重新启动agent。\n")])])]),s("p",[t._v("最后，master失败，master宕机，整个集群将不能工作，在重新启动集群，将agent监听的日志文件夹下的所有文件移出，然后重新启动master即可。在多master节点情况下，只要集群上正常工作的master大于总master数量的一半，集群就能正常工作，那么只要恢复其中宕机的master即可。")]),t._v(" "),s("h3",{attrs:{id:"问题总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题总结"}},[t._v("#")]),t._v(" 问题总结：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[t._v("1.Flume在agent端采集数据的时候默认会在/tmp/flume-{user}下生成临时的目录用于存放agent自己截取的日志文件，如果文件过大导致磁盘写满那么agent端会报出\n   Error closing logicalNode a2-18 sink: No space left on device，所以在配置agent端的时候需要注意\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("flume.agent.logdir"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("/data/tmp/flume-${user.name}/agent"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n属性，只要保证flume在7*24小时运行过程agent端不会使该路径flume.agent.logdir磁盘写满即可。\n")])])]),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[t._v("2. Flume在启动时候会去寻找hadoop-core-*.jar的文件，需要修改标准版的hadoop核心jar包的名字 将hadoop-*-core.jar改成hadoop-core-*.jar。\n\n3.Flume集群中的flume必须版本一致。否则会出现莫名其妙的错误。\n\n4.Flume集群收集的日志发送到hdfs上建立文件夹的时间依据是根据event的时间，在源代码上是Clock.unixTime()，所以如果想要根据日志生成的时间来生成文件的话，需要对\ncom.cloudera.flume.core.EventImpl 类的构造函数\npublic EventImpl(byte[] s, long timestamp, Priority pri, long nanoTime,\n      String host, Map"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("String,")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("byte[]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" fields)重新写，解析数组s的内容取出时间，赋给timestamp。注意：flume的框架会构造s内容是空的数组，用来发送类似简单验证的event，所以需要注意s内容为空的时候timestamp的问题。\n\n5.如果collector和agent不在一个网段的话会发生闪断的现象，这样的话，就会造成agent端不能传送数据个collector所以，在部署agent和collector最好在一个网段。\n\n6.如果在启动master时出现：“试着启动hostname，但是hostname不在master列表里的错误“，这是需要检查是否主机地址和hostname配置的正确与否。\n\n7.在源端，有一个比较大的缺陷，在tail类的source，不支持，断点续传功能。因为重启node后没有记录上次文件读到的位置，从而没办法知道，下次再读时，从什么地方开始读。\n\n特别是在日志文件一直在增加的时候。flume的source node挂了。等flume的source再次开启的这段时间内，增加的日志内容，就没办法被source读取到了。\n\n不过flume有一个execStream的扩展，可以自己写一个监控日志增加情况，把增加的日志，通过自己写的工具把增加的内容，传送给flume的node。再传送给sink的node。\n\n")])])]),s("p",[t._v("以前文章中介绍过Scribe方案，给我的最直观感受就是：")]),t._v(" "),s("ul",[s("li",[t._v("scribe安装复杂，配置简单")]),t._v(" "),s("li",[t._v("flume安装简单，动态配置复杂")])]),t._v(" "),s("p",[t._v("下面董的博客中的一副对比图：")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/dc/flume/distri-6.png"),alt:"wxmp"}}),t._v(" "),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),s("ul",[s("li",[t._v("https://www.cnblogs.com/oubo/archive/2012/05/25/2517751.html")])])])}),[],!1,null,null,null);a.default=r.exports}}]);