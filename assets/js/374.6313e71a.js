(window.webpackJsonp=window.webpackJsonp||[]).push([[374],{889:function(a,t,r){"use strict";r.r(t);var s=r(53),_=Object(s.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),r("p",[a._v("本文主要是介绍 数据挖掘-十大经典算法 。")])]),a._v(" "),r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#数据挖掘的十大经典算法-简介"}},[a._v("数据挖掘的十大经典算法 简介")])]),r("li",[r("a",{attrs:{href:"#一、c4-5"}},[a._v("一、C4.5")])]),r("li",[r("a",{attrs:{href:"#二、the-k-means-algorithm-即k-means算法"}},[a._v("二、The k-means algorithm 即K-Means算法")])]),r("li",[r("a",{attrs:{href:"#三、-support-vector-machines"}},[a._v("三、 Support vector machines")])]),r("li",[r("a",{attrs:{href:"#四、the-apriori-algorithm"}},[a._v("四、The Apriori algorithm")])]),r("li",[r("a",{attrs:{href:"#五、最大期望-em-算法"}},[a._v("五、最大期望(EM)算法")])]),r("li",[r("a",{attrs:{href:"#六、-pagerank"}},[a._v("六、 PageRank")])]),r("li",[r("a",{attrs:{href:"#七、adaboost"}},[a._v("七、AdaBoost")])]),r("li",[r("a",{attrs:{href:"#八、-knn-k-nearest-neighbor-classification"}},[a._v("八、 kNN: k-nearest neighbor classification")])]),r("li",[r("a",{attrs:{href:"#九、-naive-bayes"}},[a._v("九、 Naive Bayes")])]),r("li",[r("a",{attrs:{href:"#十、-cart-分类与回归树"}},[a._v("十、 CART: 分类与回归树")])]),r("li",[r("a",{attrs:{href:"#【-】"}},[a._v("【----------------------------】")])]),r("li",[r("a",{attrs:{href:"#从小白视角理解-数据挖掘十大算法-https-www-cnblogs-com-chenqionghe-p-12301905-html"}},[a._v("从小白视角理解 数据挖掘十大算法")])]),r("li",[r("a",{attrs:{href:"#算法分类"}},[a._v("算法分类")])]),r("li",[r("a",{attrs:{href:"#一、pagerank"}},[a._v("一、PageRank")]),r("ul",[r("li",[r("a",{attrs:{href:"#原理"}},[a._v("原理")])]),r("li",[r("a",{attrs:{href:"#比喻说明"}},[a._v("比喻说明")])])])]),r("li",[r("a",{attrs:{href:"#二、apriori-关联分析"}},[a._v("二、Apriori（关联分析）")]),r("ul",[r("li",[r("a",{attrs:{href:"#原理"}},[a._v("原理")])]),r("li",[r("a",{attrs:{href:"#_1-支持度"}},[a._v("1.支持度")])]),r("li",[r("a",{attrs:{href:"#_2-置信度"}},[a._v("2.置信度")])]),r("li",[r("a",{attrs:{href:"#_3-提升度"}},[a._v("3.提升度")])]),r("li",[r("a",{attrs:{href:"#_4-频繁项集"}},[a._v("4.频繁项集")])]),r("li",[r("a",{attrs:{href:"#计算过程"}},[a._v("计算过程")])]),r("li",[r("a",{attrs:{href:"#扩展-fp-growth-算法"}},[a._v("扩展：FP-Growth 算法")])]),r("li",[r("a",{attrs:{href:"#比喻说明"}},[a._v("比喻说明")])])])]),r("li",[r("a",{attrs:{href:"#三、adaboost"}},[a._v("三、AdaBoost")]),r("ul",[r("li",[r("a",{attrs:{href:"#原理"}},[a._v("原理")])]),r("li",[r("a",{attrs:{href:"#计算过程"}},[a._v("计算过程")])]),r("li",[r("a",{attrs:{href:"#比喻说明"}},[a._v("比喻说明")])])])]),r("li",[r("a",{attrs:{href:"#四、c4-5-决策树"}},[a._v("四、C4.5（决策树）")]),r("ul",[r("li",[r("a",{attrs:{href:"#原理"}},[a._v("原理")])]),r("li",[r("a",{attrs:{href:"#比喻说明"}},[a._v("比喻说明")])])])]),r("li",[r("a",{attrs:{href:"#五、cart-决策树"}},[a._v("五、CART（决策树）")]),r("ul",[r("li",[r("a",{attrs:{href:"#什么是分类树、回归树"}},[a._v("什么是分类树、回归树？")])]),r("li",[r("a",{attrs:{href:"#原理"}},[a._v("原理")])]),r("li",[r("a",{attrs:{href:"#比喻说明"}},[a._v("比喻说明")])])])]),r("li",[r("a",{attrs:{href:"#六、朴素贝叶斯-条件概率"}},[a._v("六、朴素贝叶斯（条件概率）")]),r("ul",[r("li",[r("a",{attrs:{href:"#原理"}},[a._v("原理")])]),r("li",[r("a",{attrs:{href:"#比喻说明"}},[a._v("比喻说明")])])])]),r("li",[r("a",{attrs:{href:"#七、svm"}},[a._v("七、SVM")]),r("ul",[r("li",[r("a",{attrs:{href:"#原理"}},[a._v("原理")])]),r("li",[r("a",{attrs:{href:"#比喻说明"}},[a._v("比喻说明")])])])]),r("li",[r("a",{attrs:{href:"#八、knn-聚类"}},[a._v("八、KNN（聚类）")]),r("ul",[r("li",[r("a",{attrs:{href:"#原理"}},[a._v("原理")])]),r("li",[r("a",{attrs:{href:"#计算步骤"}},[a._v("计算步骤")])]),r("li",[r("a",{attrs:{href:"#比喻说明"}},[a._v("比喻说明")])])])]),r("li",[r("a",{attrs:{href:"#九、k-means-聚类"}},[a._v("九、K-Means（聚类）")]),r("ul",[r("li",[r("a",{attrs:{href:"#原理"}},[a._v("原理")])]),r("li",[r("a",{attrs:{href:"#比喻说明"}},[a._v("比喻说明")])]),r("li",[r("a",{attrs:{href:"#_1-选老大"}},[a._v("1.选老大")])]),r("li",[r("a",{attrs:{href:"#_2-kmeans和knn的区别"}},[a._v("2.Kmeans和Knn的区别")])])])]),r("li",[r("a",{attrs:{href:"#十、em-聚类"}},[a._v("十、EM（聚类）")]),r("ul",[r("li",[r("a",{attrs:{href:"#em和k-means的区别"}},[a._v("EM和K-Means的区别：")])]),r("li",[r("a",{attrs:{href:"#原理"}},[a._v("原理")])]),r("li",[r("a",{attrs:{href:"#比喻说明"}},[a._v("比喻说明")])])])]),r("li",[r("a",{attrs:{href:"#参考文章"}},[a._v("参考文章")])])])]),r("p"),a._v(" "),r("h2",{attrs:{id:"数据挖掘的十大经典算法-简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据挖掘的十大经典算法-简介"}},[a._v("#")]),a._v(" 数据挖掘的十大经典算法 简介")]),a._v(" "),r("img",{staticClass:"zoom-custom-imgs",attrs:{src:a.$withBase("/assets/img/dm/intro/top10algorithm-1.png"),alt:"wxmp"}}),a._v(" "),r("h2",{attrs:{id:"一、c4-5"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、c4-5"}},[a._v("#")]),a._v(" 一、C4.5")]),a._v(" "),r("p",[a._v("C4.5，是机器学习算法中的一个分类决策树算法，它是决策树(决策树也就是做决策的节点间的组织方式像一棵树，其实是一个倒树)核心算法ID3的改进算法，所以基本上了解了一半决策树构造方法就能构造它。决策树构造方法其实就是每次选择一个好的特征以及分裂点作为当前节点的分类条件。")]),a._v(" "),r("h2",{attrs:{id:"二、the-k-means-algorithm-即k-means算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、the-k-means-algorithm-即k-means算法"}},[a._v("#")]),a._v(" 二、The k-means algorithm 即K-Means算法")]),a._v(" "),r("p",[a._v("k-means algorithm算法是一个聚类算法，把n的对象根据他们的属性分为k个分割("),r("code",[a._v("k < n")]),a._v(")。它与处理混合正态分布的最大期望算法很相似，因为他们都试图找到数据中自然聚类的中心。它假设对象属性来自于空间向量，并且目标是使各个群组内部的均方误差总和最小。")]),a._v(" "),r("h2",{attrs:{id:"三、-support-vector-machines"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、-support-vector-machines"}},[a._v("#")]),a._v(" 三、 Support vector machines")]),a._v(" "),r("p",[a._v("支持向量机，英文为Support Vector Machine，简称SV机。它是一种监督式学习的方法，它广泛的应用于统计分类以及回归分析中。支持向量机将向量映射到一个更高维的空间里，在这个空间里建立有一个最大间隔超平面。在分开数据的超平面的两边建有两个互相平行的超平面，分隔超平面使两个平行超平面的距离最大化。")]),a._v(" "),r("h2",{attrs:{id:"四、the-apriori-algorithm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、the-apriori-algorithm"}},[a._v("#")]),a._v(" 四、The Apriori algorithm")]),a._v(" "),r("p",[a._v("Apriori算法是一种最有影响的挖掘布尔关联规则频繁项集的算法。")]),a._v(" "),r("p",[a._v("其核心是基于两阶段频集思想的递推算法。该关联规则在分类上属于单维、单层、布尔关联规则。在这里，所有支持度大于最小支持度的项集称为频繁项集，简称频集。")]),a._v(" "),r("h2",{attrs:{id:"五、最大期望-em-算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#五、最大期望-em-算法"}},[a._v("#")]),a._v(" 五、最大期望(EM)算法")]),a._v(" "),r("p",[a._v("在统计计算中，最大期望 （EM，Expectation–Maximization）算法是在概率（probabilistic）模型中寻找参数最大似然估计的算法，其中概率模型依赖于无法观测的隐藏变量（Latent Variabl）。最大期望经常用在机器学习和计算机视觉的数据集聚（Data Clustering）领域。")]),a._v(" "),r("h2",{attrs:{id:"六、-pagerank"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#六、-pagerank"}},[a._v("#")]),a._v(" 六、 PageRank")]),a._v(" "),r("p",[a._v("PageRank是Google算法的重要内容。2001年9月被授予美国专利，专利人是Google创始人之一拉里?佩奇（Larry Page）。因此，PageRank里的page不是指网页，而是指佩奇，即这个等级方法是以佩奇来命名的。PageRank根据网站的外部链接和内部链接的数量和质量，衡量网站的价值。PageRank背后的概念是，每个到页面的链接都是对该页面的一次投票， 被链接的越多，就意味着被其他网站投票越多。")]),a._v(" "),r("h2",{attrs:{id:"七、adaboost"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#七、adaboost"}},[a._v("#")]),a._v(" 七、AdaBoost")]),a._v(" "),r("p",[a._v("Adaboost是一种迭代算法，其核心思想是针对同一个训练集训练不同的分类器(弱分类器)，然后把这些弱分类器集合起来，构成一个更强的最终分类器 (强分类器)。其算法本身是通过改变数据分布来实现的，它根据每次训练集之中每个样本的分类是否正确，以及上次的总体分类的准确率，来确定每个样本的权值。将修改过权值的新数据集送给下层分类器进行训练，最后将每次训练得到的分类器融合起来，作为最后的决策分类器。")]),a._v(" "),r("h2",{attrs:{id:"八、-knn-k-nearest-neighbor-classification"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#八、-knn-k-nearest-neighbor-classification"}},[a._v("#")]),a._v(" 八、 kNN: k-nearest neighbor classification")]),a._v(" "),r("p",[a._v("K最近邻(k-Nearest Neighbor，KNN)分类算法，是一个理论上比较成熟的方法，也是最简单的机器学习算法之一。该方法的思路是：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。")]),a._v(" "),r("h2",{attrs:{id:"九、-naive-bayes"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#九、-naive-bayes"}},[a._v("#")]),a._v(" 九、 Naive Bayes")]),a._v(" "),r("p",[a._v("在众多的分类模型中，应用最为广泛的两种分类模型是决策树模型(Decision Tree Model)和朴素贝叶斯模型（Naive Bayesian Model，NBC）。")]),a._v(" "),r("p",[a._v("朴素贝叶斯模型发源于古典数学理论，有着坚实的数学基础，以及稳定的分类效率。同时，NBC模型所需估计的参数很少，对缺失数据不太敏感，算法也比较简单。理论上，NBC模型与其他分类方法相比具有最小的误差率。")]),a._v(" "),r("p",[a._v("但是实际上并非总是如此，这是因为NBC模型假设属性之间相互独立，这个假设在实际应用中往往是不成立的，这给NBC模型的正确分类带来了一定影响。在属性个数比较多或者属性之间相关性较大时，NBC模型的分类效率比不上决策树模型。而在属性相关性较小时，NBC模型的性能最为良好。")]),a._v(" "),r("h2",{attrs:{id:"十、-cart-分类与回归树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#十、-cart-分类与回归树"}},[a._v("#")]),a._v(" 十、 CART: 分类与回归树")]),a._v(" "),r("p",[a._v("CART, Classification and Regression Trees。 在分类树下面有两个关键的思想：第一个是关于递归地划分自变量空间的想法；第二个想法是用验证数据进行剪枝。")]),a._v(" "),r("img",{staticClass:"zoom-custom-imgs",attrs:{src:a.$withBase("/assets/img/dm/intro/top10algorithm-2.png"),alt:"wxmp"}}),a._v(" "),r("h2",{attrs:{id:"【-】"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#【-】"}},[a._v("#")]),a._v(" 【----------------------------】")]),a._v(" "),r("h2",{attrs:{id:"从小白视角理解-数据挖掘十大算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#从小白视角理解-数据挖掘十大算法"}},[a._v("#")]),a._v(" "),r("a",{attrs:{href:"https://www.cnblogs.com/chenqionghe/p/12301905.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("从小白视角理解 数据挖掘十大算法"),r("OutboundLink")],1)]),a._v(" "),r("h2",{attrs:{id:"算法分类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#算法分类"}},[a._v("#")]),a._v(" 算法分类")]),a._v(" "),r("ul",[r("li",[a._v("连接分析：PageRank")]),a._v(" "),r("li",[a._v("关联分析：Apriori")]),a._v(" "),r("li",[a._v("分类算法：C4.5，朴素贝叶斯，SVM，KNN，Adaboost，CART\n聚类算法：K-Means，EM")])]),a._v(" "),r("h2",{attrs:{id:"一、pagerank"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、pagerank"}},[a._v("#")]),a._v(" 一、PageRank")]),a._v(" "),r("p",[a._v("当一篇论文被引用的次数越多，证明这篇论文的影响力越大。")]),a._v(" "),r("p",[a._v("一个网页的入链越多，入链越优质，网页的质量越高")]),a._v(" "),r("h3",{attrs:{id:"原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("网页影响力=阻尼影响力+所有入链集合页面的加权影响力之和\n")])])]),r("ul",[r("li",[a._v("一个网页的影响力：所有入链的页面的加权影响力之和")]),a._v(" "),r("li",[a._v("一个网页对其他网页的影响力贡献为：自身影响力/出链数量")]),a._v(" "),r("li",[a._v("用户并不都是按照跳转链接的方式来上网，还有其他的方式，比如直接输入网址访问，\n所以需要设定阻尼因子，代表了用户按照跳转链接来上网的概率")])]),a._v(" "),r("h3",{attrs:{id:"比喻说明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#比喻说明"}},[a._v("#")]),a._v(" 比喻说明")]),a._v(" "),r("ol",[r("li",[a._v("微博\n一个人的微博粉丝数不一定等于他的实际影响力，还需要看粉丝的质量如何。\n如果是僵尸粉没什么用，但如果是很多大V或者明星关注，影响力很高。")]),a._v(" "),r("li",[a._v("店铺的经营\n顾客比较多的店铺质量比较好，但是要看看顾客是不是托。")]),a._v(" "),r("li",[a._v("兴趣\n在感兴趣的人或事身上投入了相对多的时间，对其相关的人事物也会投入一定的时间。\n那个人或事，被关注的越多，它的影响力/受众也就越大。")])]),a._v(" "),r("p",[a._v("关于阻尼因子")]),a._v(" "),r("ul",[r("li",[r("ol",[r("li",[a._v("通过你的邻居的影响力来评判你的影响力，但是如果不能通过邻居来访问你，并不代表你没有影响力，因为可以直接访问你，所以引入阻尼因子的概念")])])]),a._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[a._v("海洋除了有河流流经，还有雨水，但是下雨是随机的")])])]),a._v(" "),r("li",[r("ol",{attrs:{start:"3"}},[r("li",[a._v("提出阻尼系数，还是为了解决某些网站明明存在大量出链（入链），但是影响力却非常大的情形。\n出链例子：hao123导航网页，出链极多入链极少\n入链例子：百度谷歌等搜索引擎，入链极多出链极少。")])])])]),a._v(" "),r("h2",{attrs:{id:"二、apriori-关联分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、apriori-关联分析"}},[a._v("#")]),a._v(" 二、Apriori（关联分析）")]),a._v(" "),r("p",[a._v("关联关系挖掘，从消费者交易记录中发掘商品与商品之间的关联关系")]),a._v(" "),r("h3",{attrs:{id:"原理-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原理-2"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),r("h3",{attrs:{id:"_1-支持度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-支持度"}},[a._v("#")]),a._v(" 1.支持度")]),a._v(" "),r("p",[a._v("某个商品组合出现的次数与总次数之间的比例")]),a._v(" "),r("p",[a._v("5次购买，4次买了牛奶，牛奶的支持度为4/5=0.8")]),a._v(" "),r("p",[a._v("5次购买，3次买了牛奶+面包，牛奶+面包的支持度为3/5=0.6")]),a._v(" "),r("h3",{attrs:{id:"_2-置信度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-置信度"}},[a._v("#")]),a._v(" 2.置信度")]),a._v(" "),r("p",[a._v("购买了商品A，有多大概率购买商品B，A发生的情况下B发生的概率是多少")]),a._v(" "),r("p",[a._v("买了4次牛奶，其中2次买了啤酒，(牛奶->啤酒)的置信度为2/4=0.5")]),a._v(" "),r("p",[a._v("买了3次啤酒，其中2次买了牛奶，(啤酒->牛奶)的置信度为2/3-0.67")]),a._v(" "),r("h3",{attrs:{id:"_3-提升度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-提升度"}},[a._v("#")]),a._v(" 3.提升度")]),a._v(" "),r("p",[a._v("衡量商品A的出现，对商品B的出现 概率提升的程度")]),a._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[a._v("提升度"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("A-"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("B"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("置信度"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("A-"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("B"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("/支持度"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("B"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n提升度"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("，有提升； 提升度"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("，无变化； 提升度"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("，下降\n")])])]),r("h3",{attrs:{id:"_4-频繁项集"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-频繁项集"}},[a._v("#")]),a._v(" 4.频繁项集")]),a._v(" "),r("ul",[r("li",[a._v("项集：可以是单个商品，也可以是商品组合")]),a._v(" "),r("li",[a._v("频繁项集是支持度大于最小支持度（Min Support）的项集")])]),a._v(" "),r("h3",{attrs:{id:"计算过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#计算过程"}},[a._v("#")]),a._v(" 计算过程")]),a._v(" "),r("p",[a._v("-1. 从K=1开始，筛选频繁项集。\n-2. 在结果中，组合K+1项集，再次筛选\n-3. 循环1、2步。直到找不到结果为止，K-1项集的结果就是最终结果。")]),a._v(" "),r("h3",{attrs:{id:"扩展-fp-growth-算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#扩展-fp-growth-算法"}},[a._v("#")]),a._v(" 扩展：FP-Growth 算法")]),a._v(" "),r("p",[a._v("Apriori 算法需要多次扫描数据库，性能低下，不适合大数据量")]),a._v(" "),r("p",[a._v("FP-growth算法，通过构建 FP 树的数据结构，将数据存储在 FP 树中，只需要在构建 FP 树时扫描数据库两次，后续处理就不需要再访问数据库了。")]),a._v(" "),r("h3",{attrs:{id:"比喻说明-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#比喻说明-2"}},[a._v("#")]),a._v(" 比喻说明")]),a._v(" "),r("ul",[r("li",[a._v("啤酒和尿不湿摆在一起销售")]),a._v(" "),r("li",[a._v("沃尔玛通过数据分析发现，美国有婴儿的家庭中，一般是母亲在家照顾孩子，父亲去超市买尿不湿。")]),a._v(" "),r("li",[a._v("父亲在购买尿不湿时，常常会顺便搭配几瓶啤酒来犒劳自己，于是，")]),a._v(" "),r("li",[a._v("超市尝试推出了将啤酒和尿不湿摆在一起的促销手段，这个举措居然使尿不湿和啤酒的销量都大幅增加。")])]),a._v(" "),r("h2",{attrs:{id:"三、adaboost"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、adaboost"}},[a._v("#")]),a._v(" 三、AdaBoost")]),a._v(" "),r("h3",{attrs:{id:"原理-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原理-3"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),r("p",[a._v("简单的说，多个弱分类器训练成为一个强分类器。")]),a._v(" "),r("p",[a._v("将一系列的弱分类器以不同的权重比组合作为最终分类选择")]),a._v(" "),r("h3",{attrs:{id:"计算过程-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#计算过程-2"}},[a._v("#")]),a._v(" 计算过程")]),a._v(" "),r("ul",[r("li",[r("ol",[r("li",[a._v("初始化基础权重")])])]),a._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[a._v("奖权重矩阵，通过已的分类器计算错误率，选择错误率最低的为最优分类器")])])]),a._v(" "),r("li",[r("ol",{attrs:{start:"3"}},[r("li",[a._v("通过分类器权重公式，减少正确样本分布，增加错误样本分布，得到新的权重矩阵和当前k轮的分类器权重")])])]),a._v(" "),r("li",[r("ol",{attrs:{start:"4"}},[r("li",[a._v("将新的权重矩阵，带入上面的步骤2和3，重新计算权重矩阵")])])]),a._v(" "),r("li",[r("ol",{attrs:{start:"5"}},[r("li",[a._v("迭代N轮，记录每一轮的最终分类器权重，得到强分类器")])])])]),a._v(" "),r("h3",{attrs:{id:"比喻说明-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#比喻说明-3"}},[a._v("#")]),a._v(" 比喻说明")]),a._v(" "),r("h4",{attrs:{id:"_1-利用错题提升学习效率"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-利用错题提升学习效率"}},[a._v("#")]),a._v(" 1. 利用错题提升学习效率")]),a._v(" "),r("ul",[r("li",[a._v("做正确的题，下次少做点，反正都会了")]),a._v(" "),r("li",[a._v("做错的题，下次多做点，集中在错题上")]),a._v(" "),r("li",[a._v("随着学习的深入，做错的题会越来越少")])]),a._v(" "),r("h4",{attrs:{id:"_2-合理跨界提高盈利"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-合理跨界提高盈利"}},[a._v("#")]),a._v(" 2. 合理跨界提高盈利")]),a._v(" "),r("ul",[r("li",[a._v("苹果公司，软硬结合，占据了大部分的手机市场利润，两个领域的知识结合起来产生新收益")])]),a._v(" "),r("h2",{attrs:{id:"四、c4-5-决策树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、c4-5-决策树"}},[a._v("#")]),a._v(" 四、C4.5（决策树）")]),a._v(" "),r("p",[a._v("决策就是对于一个问题，有多个答案，选择答案的过程就是决策。\nC4.5算法是用于产生决策树的算法，主要用于分类\nC4.5使用信息增益率做计算（ID3算法使用信息增益做计算）")]),a._v(" "),r("h3",{attrs:{id:"原理-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原理-4"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),r("p",[a._v("C4.5选择最有效地方式对样本集进行分裂，分裂规则是分析所有属性的信息增益率\n信息增益率越大，意味着这个特征分类的能力越强，我们就要优先选择这个特征做分类")]),a._v(" "),r("h3",{attrs:{id:"比喻说明-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#比喻说明-4"}},[a._v("#")]),a._v(" 比喻说明")]),a._v(" "),r("p",[a._v("挑西瓜")]),a._v(" "),r("p",[a._v("拿到一个西瓜，先判断它的纹路，如果很模糊，就认为这不是好瓜，如果它清晰，就认为它是一个好瓜，如果它稍稍模糊，就考虑它的密度，密度大于某个值，就认为它是好瓜，否则就是坏瓜。")]),a._v(" "),r("h2",{attrs:{id:"五、cart-决策树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#五、cart-决策树"}},[a._v("#")]),a._v(" 五、CART（决策树）")]),a._v(" "),r("p",[a._v("CART：Classification And Regression Tree，中文叫分类回归树，即可以做分类也可以做回归。")]),a._v(" "),r("h3",{attrs:{id:"什么是分类树、回归树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是分类树、回归树"}},[a._v("#")]),a._v(" 什么是分类树、回归树？")]),a._v(" "),r("ul",[r("li",[a._v("分类树：处理离散数据，也就是数据种类有限的数据，输出的是样本的类别 。")]),a._v(" "),r("li",[a._v("回归树：可以对连续型的数值进行预测，输出的是一个数值，数值在某个区间内都有取值的可能。")]),a._v(" "),r("li",[a._v("回归问题和分类问题的本质一样，都是针对一个输入做出一个输出预测，其区别在于输出变量的类型")])]),a._v(" "),r("h3",{attrs:{id:"原理-5"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原理-5"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),r("ul",[r("li",[a._v("CART分类树\n与C4.5算法类似，只是属性选择的指标是基尼系数。\n基尼系数反应了样本的不确定度，基尼系数越小，说明样本之间的差异性小，不确定程度低。\n分类是一个不确定度降低的过程，CART在构造分类树的时候会选择基尼系数最小的属性作为属性的划分。")]),a._v(" "),r("li",[a._v("CART 回归树\n采用均方误差或绝对值误差为标准，选取均方误差或绝对值误差最小的特征")])]),a._v(" "),r("h3",{attrs:{id:"比喻说明-5"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#比喻说明-5"}},[a._v("#")]),a._v(" 比喻说明")]),a._v(" "),r("ul",[r("li",[a._v("分类：预测明天是阴、晴还是雨")]),a._v(" "),r("li",[a._v("回归：预测明天的气温是多少度")])]),a._v(" "),r("h2",{attrs:{id:"六、朴素贝叶斯-条件概率"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#六、朴素贝叶斯-条件概率"}},[a._v("#")]),a._v(" 六、朴素贝叶斯（条件概率）")]),a._v(" "),r("p",[a._v("朴素贝叶斯是一种简单有效的常用分类算法，计算未知物体出现的条件下各个类别出现的概率，取概率最大的分类")]),a._v(" "),r("h3",{attrs:{id:"原理-6"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原理-6"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),r("p",[a._v("假设输入的不同特征之间是独立的，基于概率论原理，通过先验概率P(A)、P(B)和条件概率推算出后概率出P(A|B)")]),a._v(" "),r("ul",[r("li",[a._v("P(A)：先验概率，即在B事件发生之前，对A事件概率的一个判断。")]),a._v(" "),r("li",[a._v("P(B|A)：条件概率，事件 B 在另外一个事件 A 已经发生条件下的发生概率")]),a._v(" "),r("li",[a._v("P(A|B)：后验概率，即在B事件发生之后，对A事件概率的重新评估。")])]),a._v(" "),r("h3",{attrs:{id:"比喻说明-6"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#比喻说明-6"}},[a._v("#")]),a._v(" 比喻说明")]),a._v(" "),r("p",[a._v("给病人分类")]),a._v(" "),r("table",[r("thead",[r("tr",[r("th",[a._v("症状")]),a._v(" "),r("th",[a._v("职业")]),a._v(" "),r("th",[a._v("疾病")])])]),a._v(" "),r("tbody",[r("tr",[r("td",[a._v("打喷嚏")]),a._v(" "),r("td",[a._v("护士")]),a._v(" "),r("td",[a._v("感冒")])]),a._v(" "),r("tr",[r("td",[a._v("打喷嚏")]),a._v(" "),r("td",[a._v("农夫")]),a._v(" "),r("td",[a._v("过敏")])]),a._v(" "),r("tr",[r("td",[a._v("头痛")]),a._v(" "),r("td",[a._v("建筑工人")]),a._v(" "),r("td",[a._v("脑震荡")])]),a._v(" "),r("tr",[r("td",[a._v("头痛")]),a._v(" "),r("td",[a._v("建筑工人")]),a._v(" "),r("td",[a._v("感冒")])]),a._v(" "),r("tr",[r("td",[a._v("打喷嚏")]),a._v(" "),r("td",[a._v("教师")]),a._v(" "),r("td",[a._v("感冒")])]),a._v(" "),r("tr",[r("td",[a._v("头痛")]),a._v(" "),r("td",[a._v("教师")]),a._v(" "),r("td",[a._v("脑震荡")])])])]),a._v(" "),r("p",[a._v("给定一个新病人，是一个打喷嚏的建筑工人，计算他患感冒的概率")]),a._v(" "),r("h2",{attrs:{id:"七、svm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#七、svm"}},[a._v("#")]),a._v(" 七、SVM")]),a._v(" "),r("p",[a._v("SVM： Support Vector Machine，中文名为支持向量机，是常见的一种分类方法，最初是为二分类问题设计的，在机器学习中，SVM 是有监督的学习模型。")]),a._v(" "),r("ul",[r("li",[a._v("什么是有监督学习和无监督学习 ？")]),a._v(" "),r("li",[a._v("有监督学习：即在已有类别标签的情况下，将样本数据进行分类。")]),a._v(" "),r("li",[a._v("无监督学习：即在无类别标签的情况下，样本数据根据一定的方法进行分类，即聚类，分类好的类别需要进一步分析后，从而得知每个类别的特点。")])]),a._v(" "),r("h3",{attrs:{id:"原理-7"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原理-7"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),r("p",[a._v("找到具有最小间隔的样本点，然后拟合出一个到这些样本点距离和最大的线段/平面。")]),a._v(" "),r("ul",[r("li",[a._v("硬间隔：数据是线性分布的情况，直接给出分类")]),a._v(" "),r("li",[a._v("软间隔：允许一定量的样本分类错误。")]),a._v(" "),r("li",[a._v("核函数：非线性分布的数据映射为线性分布的数据。")])]),a._v(" "),r("h3",{attrs:{id:"比喻说明-7"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#比喻说明-7"}},[a._v("#")]),a._v(" 比喻说明")]),a._v(" "),r("ul",[r("li",[a._v("1.分隔桌上一堆红球和篮球")])]),a._v(" "),r("p",[a._v("用一根线将桌上的红球和蓝球分成两部分")]),a._v(" "),r("ul",[r("li",[a._v("2.分隔箱子里一堆红球和篮球")])]),a._v(" "),r("p",[a._v("用一个平面将箱子里的红球和蓝球分成两部分")]),a._v(" "),r("h2",{attrs:{id:"八、knn-聚类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#八、knn-聚类"}},[a._v("#")]),a._v(" 八、KNN（聚类）")]),a._v(" "),r("p",[a._v("机器学习算法中最基础、最简单的算法之一，既能分类也能回归，通过测量不同特征值之间的距离来进行分类。")]),a._v(" "),r("h3",{attrs:{id:"原理-8"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原理-8"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),r("p",[a._v("计算待分类物体与其他物体之间的距离，对于K个最近的邻居，所占数量最多的类别，预测为该分类对象的类别")]),a._v(" "),r("h3",{attrs:{id:"计算步骤"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#计算步骤"}},[a._v("#")]),a._v(" 计算步骤")]),a._v(" "),r("ul",[r("li",[r("ol",[r("li",[a._v("根据场景，选取距离计算方式，计算待分类物体与其他物体之间的距离")])])]),a._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[a._v("统计距离最近的K个邻居")])])]),a._v(" "),r("li",[r("ol",{attrs:{start:"3"}},[r("li",[a._v("对于K个最近的邻居，所占数量最多的类别，预测为该分类对象的类别")])])])]),a._v(" "),r("h3",{attrs:{id:"比喻说明-8"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#比喻说明-8"}},[a._v("#")]),a._v(" 比喻说明")]),a._v(" "),r("p",[a._v("近朱者赤，近墨者黑")]),a._v(" "),r("h2",{attrs:{id:"九、k-means-聚类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#九、k-means-聚类"}},[a._v("#")]),a._v(" 九、K-Means（聚类）")]),a._v(" "),r("p",[a._v("K-means是一个聚类算法，是无监督学习，生成指定K个类，把每个对象分配给距离最近的聚类中心")]),a._v(" "),r("h3",{attrs:{id:"原理-9"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原理-9"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),r("ul",[r("li",[a._v("1.随机选取K个点为分类中心点")]),a._v(" "),r("li",[a._v("2.将每个点分配到最近的类，这样形成了K个类")]),a._v(" "),r("li",[a._v("3.重新计算每个类的中心点。比如都属于同一个类别里面有10个点，那么新的中心点就是这10个点的中心点，一种简单的方式就是取平均值。")])]),a._v(" "),r("h3",{attrs:{id:"比喻说明-9"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#比喻说明-9"}},[a._v("#")]),a._v(" 比喻说明")]),a._v(" "),r("h3",{attrs:{id:"_1-选老大"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-选老大"}},[a._v("#")]),a._v(" 1.选老大")]),a._v(" "),r("ul",[r("li",[a._v("大家随机选K个老大，谁离得近，就是那个队列的人（计算距离，距离近的人聚合在一起）")]),a._v(" "),r("li",[a._v("随着时间的推移，老大的位置在变化（根据算法，重新计算中心点），直到选出真正的中心老大（重复，直到准确率最高）")])]),a._v(" "),r("h3",{attrs:{id:"_2-kmeans和knn的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-kmeans和knn的区别"}},[a._v("#")]),a._v(" 2.Kmeans和Knn的区别")]),a._v(" "),r("ul",[r("li",[a._v("Kmeans开班选老大，风水轮流转，直到选出最佳中心老大")]),a._v(" "),r("li",[a._v("Knn小弟加队伍，离那个班相对近，就是那个班的")])]),a._v(" "),r("h2",{attrs:{id:"十、em-聚类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#十、em-聚类"}},[a._v("#")]),a._v(" 十、EM（聚类）")]),a._v(" "),r("p",[a._v("EM 的英文是 Expectation Maximization，所以 EM 算法也叫最大期望算法，也是聚类算法的一种。")]),a._v(" "),r("h3",{attrs:{id:"em和k-means的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#em和k-means的区别"}},[a._v("#")]),a._v(" EM和K-Means的区别：")]),a._v(" "),r("ul",[r("li",[r("ol",[r("li",[a._v("EM是计算概率，KMeans是计算距离。")])])]),a._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[a._v("EM属于软聚类，同一样本可能属于多个类别；而K-Means属于硬聚类，一个样本只能属于一个类别。所以前者能够发现一些隐藏的数据。")])])])]),a._v(" "),r("h3",{attrs:{id:"原理-10"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原理-10"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),r("p",[a._v("先估计一个大概率的可能参数，然后再根据数据不断地进行调整，直到找到最终的确认参数")]),a._v(" "),r("h3",{attrs:{id:"比喻说明-10"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#比喻说明-10"}},[a._v("#")]),a._v(" 比喻说明")]),a._v(" "),r("p",[a._v("菜称重。")]),a._v(" "),r("p",[a._v("很少有人用称对菜进行称重，再计算一半的分量进行平分。")]),a._v(" "),r("p",[a._v("大部分人的方法是：")]),a._v(" "),r("ul",[r("li",[r("ol",[r("li",[a._v("先分一部分到碟子 A 中，再把剩余的分到碟子 B 中")])])]),a._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[a._v("观察碟子 A 和 B 里的菜是否一样多，哪个多就匀一些到少的那个碟子里")])])]),a._v(" "),r("li",[r("ol",{attrs:{start:"3"}},[r("li",[a._v("然后再观察碟子 A 和 B 里的是否一样多，重复下去，直到份量不发生变化为止。")])])])]),a._v(" "),r("p",[a._v("到这里，10大算法都已经说完了，其实一般来说，常用算法都已经被封装到库中了，只要new出相应的模型即可。")]),a._v(" "),r("h2",{attrs:{id:"参考文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),r("ul",[r("li",[a._v("https://zhuanlan.zhihu.com/p/69106308")]),a._v(" "),r("li",[a._v("https://www.cnblogs.com/chenqionghe/p/12301905.html")])])])}),[],!1,null,null,null);t.default=_.exports}}]);