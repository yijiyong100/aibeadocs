(window.webpackJsonp=window.webpackJsonp||[]).push([[375],{890:function(t,a,s){"use strict";s.r(a);var n=s(53),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("本文主要是介绍 数据挖掘-开发流程总结 。")])]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#一、不变的招式"}},[t._v("一、不变的招式")])]),s("li",[s("a",{attrs:{href:"#二、如何判断内功厉不厉害"}},[t._v("二、如何判断内功厉不厉害")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-准确率"}},[t._v("1.准确率")])]),s("li",[s("a",{attrs:{href:"#_2-精确率和召回率"}},[t._v("2.精确率和召回率")])])])]),s("li",[s("a",{attrs:{href:"#三、代码套路和技巧"}},[t._v("三、代码套路和技巧")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-如何得到训练集和测试集"}},[t._v("1.如何得到训练集和测试集")])]),s("li",[s("a",{attrs:{href:"#_2-如何搜索最优的参数"}},[t._v("2.如何搜索最优的参数")])]),s("li",[s("a",{attrs:{href:"#_3-如何对数据进行规范化"}},[t._v("3.如何对数据进行规范化")])]),s("li",[s("a",{attrs:{href:"#_4-如何进行流水线作业"}},[t._v("4.如何进行流水线作业")])])])]),s("li",[s("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"一、不变的招式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、不变的招式"}},[t._v("#")]),t._v(" 一、不变的招式")]),t._v(" "),s("p",[t._v("虽然数据分析，数据挖掘，一说预测看起来高大上，但是其实是有套路的，预测的代码大致都长下面这个样子")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 1.选择算法模型")]),t._v("\nmodel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("new 算法模型"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 2.开始训练（传入训练集特征train_x和训练集结果train_y）")]),t._v("\nmodel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("train_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" train_y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 3.预测结果（传入测试集test_x）")]),t._v("\nprediction"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("model"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("predic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("测试集test_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 4.计算准确率（对比预测结果prediction和测试集真实结果test_y）")]),t._v("\n准确率"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("metrics"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("accuracy_score"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prediction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test_y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("套路说明：")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("将已有的数据分成两部分，分别是训练集 (train_x,train_y)和测试集(test_x,test_y)")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("每个集合都包含两部分数据，特征值x和结果值y")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("选用算法模型，将训练集(train_x,train_y)进行训练，对测试集test_x进行预测得到预测结果prediction")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("将预测结果prediction和真实结果test_y进行比对，得到预测的准确率")])])])]),t._v(" "),s("p",[t._v("上面这些只是招式，其实内功都在模型上，那我们怎么判断内功比较厉害呢？")]),t._v(" "),s("h2",{attrs:{id:"二、如何判断内功厉不厉害"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、如何判断内功厉不厉害"}},[t._v("#")]),t._v(" 二、如何判断内功厉不厉害")]),t._v(" "),s("p",[t._v("模型就是内功，内功厉不厉害主要看下面这些指标，内功越强，预测的越准")]),t._v(" "),s("h3",{attrs:{id:"_1-准确率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-准确率"}},[t._v("#")]),t._v(" 1.准确率")]),t._v(" "),s("ul",[s("li",[t._v("准确率：accuracy")]),t._v(" "),s("li",[t._v("大部分情况，我们都可以使用预测的数据和真实的数据，挨个比对来获得"),s("code",[t._v("准确率")])]),t._v(" "),s("li",[t._v("对于正例比例极低的情况，比如")])]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("信用卡欺诈\n某些疾病的识别\n恐怖分子的判断\n")])])]),s("p",[t._v("这种获取的是占很小的一部分，就需要用"),s("code",[t._v("精确率-召回率")]),t._v("来进行统计")]),t._v(" "),s("h3",{attrs:{id:"_2-精确率和召回率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-精确率和召回率"}},[t._v("#")]),t._v(" 2.精确率和召回率")]),t._v(" "),s("ul",[s("li",[t._v("精确率(Precision)：检索出来的正确条目数占检索出来的总条目数的多少，衡量的是查准率；")]),t._v(" "),s("li",[t._v("召回率(Recall)：检索出的正确的条目占全部正确条目数的多少，衡量的是查全率\n比如，推荐系统根据你的喜好，推荐了10个商品，其中真正相关的是5个商品，在所有的商品库中，相关的商品一共有20个，则精确率 = 5/10，召回率 = 5/20")])]),t._v(" "),s("p",[t._v("举个例子：")]),t._v(" "),s("p",[t._v("从一个大米和小麦混合的袋子里，抓一把大米，我们肯定希望抓出来的大米越多越好(精确率高)，然后我们还希望就是希望一把抓出来的是所有的大米(召回率高)，简单的说就是一个找的对，一个找的全。")]),t._v(" "),s("p",[t._v("关于模型的原理，可以查看"),s("a",{attrs:{href:"https://www.cnblogs.com/chenqionghe/p/12301905.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("从小白视角理解 数据挖掘十大算法"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"三、代码套路和技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、代码套路和技巧"}},[t._v("#")]),t._v(" 三、代码套路和技巧")]),t._v(" "),s("h3",{attrs:{id:"_1-如何得到训练集和测试集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何得到训练集和测试集"}},[t._v("#")]),t._v(" 1.如何得到训练集和测试集")]),t._v(" "),s("p",[t._v("我们已经有了数据，需要将数据分成两部分：训练集和测试集")]),t._v(" "),s("p",[t._v("比如可以8成用来训练，2成用来测试结果，sklearn提供了train_test_split stratify函数，可以非常方便的为我们分割数据。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html#sklearn.model_selection.train_test_split",target:"_blank",rel:"noopener noreferrer"}},[t._v("train_test_split"),s("OutboundLink")],1),t._v(" 可以帮助我们把数据集抽取一部分作为测试集，这样我们就可以得到训练集和测试集。")]),t._v(" "),s("p",[t._v("参数")]),t._v(" "),s("blockquote",[s("p",[t._v("train_data：所要划分的样本特征集\ntrain_target：需要划分的样本结果\ntest_size / train_size: 测试集/训练集的大小，若输入小数表示比例，若输入整数表示数据个数。\nrandom_state：随机数种子，如果需要重复试验，可以指定非0值，将保证得到一组一样的随机数\nshuffle：是否打乱数据的顺序，再划分，默认True。\nstratify：none或者array/series类型的数据，表示按这列进行分层采样。")])]),t._v(" "),s("h3",{attrs:{id:"_2-如何搜索最优的参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何搜索最优的参数"}},[t._v("#")]),t._v(" 2.如何搜索最优的参数")]),t._v(" "),s("p",[t._v("GridSearchCV是参数自动搜索模块，只需要传入需要要调优的参数及参数的取值范围，它会把所有的参数都执行一遍，然后找出最优的，本质是一种穷举法")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" sklearn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("model_selection "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" GridSearchCV\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 初始化算法模型")]),t._v("\nmodel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("算法模型"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 设置参数值取值范围")]),t._v("\nparams"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"n_estimators"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 使用GriSearchCV找出最优参数")]),t._v("\nclf"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("GridSearchCV"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("estimator"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("model"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" param_grid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("params"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 执行训练")]),t._v("\nclf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iris"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" iris"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 得到最优分数和最优参数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"最优分数： %.4lf"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("clf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("best_score_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"最优参数："')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" clf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("best_params_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-如何对数据进行规范化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何对数据进行规范化"}},[t._v("#")]),t._v(" 3.如何对数据进行规范化")]),t._v(" "),s("p",[t._v("StandardScaler 可以采用Z-Score规范化数据，得到数据规范化为均值为 0，方差为1的正态分布")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("train_x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" StandardScaler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fit_transform"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("train_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"_4-如何进行流水线作业"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何进行流水线作业"}},[t._v("#")]),t._v(" 4.如何进行流水线作业")]),t._v(" "),s("p",[t._v("Python 有一种 Pipeline 管道机制。管道机制就是让我们把每一步都按顺序列下来，从而创建 Pipeline 流水线作业。每一步都采用 (‘名称’, 步骤) 的方式来表示。")]),t._v(" "),s("p",[t._v("比如我们可以把"),s("code",[t._v("数据规范化->搜索最优的参数")]),t._v("合成一步，写到一个Pipline中")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("rf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" RandomForestClassifier"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nparameters "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"randomforestclassifier__n_estimators"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\niris "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" load_iris"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npipeline "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Pipeline"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'scaler'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" StandardScaler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'randomforestclassifier'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 使用GridSearchCV进行参数调优")]),t._v("\nclf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" GridSearchCV"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("estimator"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("pipeline"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" param_grid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("parameters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 对iris数据集进行分类")]),t._v("\nclf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iris"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" iris"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"最优分数： %.4lf"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("clf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("best_score_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"最优参数："')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" clf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("best_params_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),s("ul",[s("li",[t._v("https://www.cnblogs.com/chenqionghe/p/12322825.html")])])])}),[],!1,null,null,null);a.default=r.exports}}]);