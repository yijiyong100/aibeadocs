(window.webpackJsonp=window.webpackJsonp||[]).push([[396],{911:function(t,a,s){"use strict";s.r(a);var e=s(53),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("本文主要是介绍 Flink-savePoint机制 。")])]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#flink之状态之savepoint"}},[t._v("Flink之状态之savepoint")])]),s("li",[s("a",{attrs:{href:"#_1-总览"}},[t._v("1.总览")])]),s("li",[s("a",{attrs:{href:"#_2-分配operator-id"}},[t._v("2.分配Operator ID")]),s("ul",[s("li",[s("a",{attrs:{href:"#savepoint-state"}},[t._v("Savepoint State")])])])]),s("li",[s("a",{attrs:{href:"#_3-operations"}},[t._v("3.Operations")]),s("ul",[s("li",[s("a",{attrs:{href:"#triggering-savepoints"}},[t._v("Triggering Savepoints")])]),s("li",[s("a",{attrs:{href:"#resuming-from-savepoints"}},[t._v("Resuming from Savepoints")])]),s("li",[s("a",{attrs:{href:"#disposing-savepoints"}},[t._v("Disposing Savepoints")])]),s("li",[s("a",{attrs:{href:"#configuration"}},[t._v("Configuration")])])])]),s("li",[s("a",{attrs:{href:"#_4-faq"}},[t._v("4.FAQ")])]),s("li",[s("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"flink之状态之savepoint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flink之状态之savepoint"}},[t._v("#")]),t._v(" Flink之状态之savepoint")]),t._v(" "),s("h2",{attrs:{id:"_1-总览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-总览"}},[t._v("#")]),t._v(" 1.总览")]),t._v(" "),s("p",[t._v("savepoints是外部存储的自包含的checkpoints，可以用来stop and resume，或者程序升级。savepoints利用checkpointing机制来创建流式作业的状态的完整快照（非增量快照），将checkpoint的数据和元数据都写入到一个外部文件系统。")]),t._v(" "),s("p",[t._v("如何触发、恢复或者释放savepoint了？下面一一道来。")]),t._v(" "),s("h2",{attrs:{id:"_2-分配operator-id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-分配operator-id"}},[t._v("#")]),t._v(" 2.分配Operator ID")]),t._v(" "),s("p",[t._v("极度推荐你给每个方法分配一个uid，这样才可以升级应用。ID起到的作用是明确每个operator的状态的使用范围。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("DataStream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" stream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" env.\n  // Stateful "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e.g. Kafka"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" with ID\n  .addSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("new StatefulSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v("\n  .uid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"source-id"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // ID "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" operator\n  .shuffle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  // Stateful mapper with ID\n  .map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("new StatefulMapper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v("\n  .uid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mapper-id"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // ID "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the mapper\n  // Stateless printing sink\n  .print"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // Auto-generated ID\n")])])]),s("p",[t._v("如果不手动指定ID，则系统会自动创建。如果这些ID不变，则应用可以被自动恢复出来。但是自动创建的ID依赖于应用的结构，任何应用的变动都可能导致ID的变化。所以，请手动分配ID吧。")]),t._v(" "),s("h3",{attrs:{id:"savepoint-state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#savepoint-state"}},[t._v("#")]),t._v(" Savepoint State")]),t._v(" "),s("p",[t._v("什么是savepoint了？savepoint对每个有状态的operator保存一个map的KV结构，"),s("code",[t._v("Operator ID -> State")]),t._v(" 。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("Operator ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" State\n------------+------------------------\nsource-id   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" State of StatefulSource\nmapper-id   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" State of StatefulMapper\n")])])]),s("p",[t._v("上面代码片段的print方法没有savepoint结构，因为他是无状态的。通常，会尝试将map的每个entry都恢复回去。")]),t._v(" "),s("h2",{attrs:{id:"_3-operations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-operations"}},[t._v("#")]),t._v(" 3.Operations")]),t._v(" "),s("p",[t._v("可以利用cli来触发savepoint，或者cancel一个作业的同时做savepoint，或者从某个savepoint恢复，或者释放savepoint。")]),t._v(" "),s("p",[t._v("如果Flink版本大于1.2.0，则可以通过webui来恢复savepoints。")]),t._v(" "),s("h3",{attrs:{id:"triggering-savepoints"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#triggering-savepoints"}},[t._v("#")]),t._v(" Triggering Savepoints")]),t._v(" "),s("p",[t._v("当触发savepoint的时候，新的savepoint目录就会被创建，数据和元信息都会保存在这里。保存的位置可以是默认的目录，也可以是trigger命令指定的目录。但要注意，这个目录需要是JM和TM都可以访问的目录。")]),t._v(" "),s("p",[t._v("举例，对于"),s("code",[t._v("FsStateBackend")]),t._v(" 或者 "),s("code",[t._v("RocksDBStateBackend而言：")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Savepoint target directory")]),t._v("\n/savepoints/\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Savepoint directory")]),t._v("\n/savepoints/savepoint-:shortjobid-:savepointid/\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Savepoint file contains the checkpoint meta data")]),t._v("\n/savepoints/savepoint-:shortjobid-:savepointid/_metadata\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Savepoint state")]),t._v("\n/savepoints/savepoint-:shortjobid-:savepointid/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),s("p",[t._v("通常，不建议移动savepoints到别的地方，因为_metadata里面有绝对路径。但是在使用MemoryStateBackend的时候，元信息和数据会一起被存入_metadata文件，所以可以移动。")]),t._v(" "),s("h4",{attrs:{id:"trigger-a-savepoint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trigger-a-savepoint"}},[t._v("#")]),t._v(" Trigger a Savepoint")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ bin/flink savepoint :jobId "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":targetDirectory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("如果命令会以jobid触发一次savepoint，返回的是本次savepoint的路径，这个路径可以用来恢复或者释放savepoint。")]),t._v(" "),s("h4",{attrs:{id:"trigger-a-savepoint-with-yarn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trigger-a-savepoint-with-yarn"}},[t._v("#")]),t._v(" Trigger a Savepoint with YARN")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ bin/flink savepoint :jobId "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":targetDirectory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -yid :yarnAppId\n")])])]),s("p",[t._v("以jobId和yarnAppId来触发savepoint。")]),t._v(" "),s("h4",{attrs:{id:"cancel-job-with-savepoint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cancel-job-with-savepoint"}},[t._v("#")]),t._v(" Cancel Job with Savepoint")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ bin/flink cancel -s "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":targetDirectory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" :jobId\n")])])]),s("p",[t._v("取消作业的同时触发一次savepoint。")]),t._v(" "),s("h3",{attrs:{id:"resuming-from-savepoints"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#resuming-from-savepoints"}},[t._v("#")]),t._v(" Resuming from Savepoints")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ bin/flink run -s :savepointPath "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":runArgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("这样提交作业就会让作业在指定的savepoint恢复出来，路径可以是savepoint的目录，也可以是_metadata的文件地址。")]),t._v(" "),s("h4",{attrs:{id:"allowing-non-restored-state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#allowing-non-restored-state"}},[t._v("#")]),t._v(" Allowing Non-Restored State")]),t._v(" "),s("p",[t._v("通常，恢复意味着savepoint的每一个状态都要恢复到应用中去，但如果你恰好去掉了某个operator，你可以通过设置来忽略这个状态，--allowNonRestoredState。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ bin/flink run -s :savepointPath -n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":runArgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h3",{attrs:{id:"disposing-savepoints"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#disposing-savepoints"}},[t._v("#")]),t._v(" Disposing Savepoints")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ bin/flink savepoint -d :savepointPath\n")])])]),s("p",[t._v("如上，就释放了存储在savepointPath位置的savepoint。")]),t._v(" "),s("p",[t._v("其实也可以手动删除某个savepoint，这通过常规的文件系统操作就可以做到，并且不影响别的savepoints和checkpoints。")]),t._v(" "),s("h3",{attrs:{id:"configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" Configuration")]),t._v(" "),s("p",[t._v("可以通过配置项state.savepoints.dir来定义一个默认的savepoint存储目录。当触发savepoints的时候，这个目录就会被用来存储savepoint，但是你也可以通过在trigger命令中指定目录来覆盖默认设置。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Default savepoint target directory")]),t._v("\nstate.savepoints.dir: hdfs:///flink/savepoints\n")])])]),s("p",[t._v("如果既没有默认目录，也没有指定目录，则触发savepoint就会失败。")]),t._v(" "),s("h2",{attrs:{id:"_4-faq"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-faq"}},[t._v("#")]),t._v(" 4.FAQ")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("是否需要给所有的operator指定ID？原则上，只需要给有状态的operator设置id就可以。但建议给所有的operator都设置。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("如果新的应用添加了一个有状态的operator会怎样？应用恢复的时候，新添加的operator会被当做没有状态来处理。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("如果删除了一个了？默认，恢复作业是所有状态都要恢复，删除了一个就会导致恢复失败，除非你指定可以忽略，见上面。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("如果改变了operator的顺序了？如果是你手动指定的id，则恢复不受影响。如果是自动生成的，改变了顺序往往也意味着id的改变，所以恢复会失败。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"5"}},[s("li",[t._v("如果添加、删除或者改变了没有状态的operator的顺序了？同4，手动设置了id则不受影响，否则会失败。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"6"}},[s("li",[t._v("如果改变了应用的并行度了？对于版本在1.2.0之后的，没影响？版本在之前怎么办？只能将应用和savepoint都升级到1.2.0之后。")])])])]),t._v(" "),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),s("ul",[s("li",[t._v("https://www.cnblogs.com/029zz010buct/p/9405256.html")])])])}),[],!1,null,null,null);a.default=n.exports}}]);