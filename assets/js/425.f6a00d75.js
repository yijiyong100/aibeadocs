(window.webpackJsonp=window.webpackJsonp||[]).push([[425],{940:function(t,a,s){"use strict";s.r(a);var r=s(53),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("本文主要是介绍 Storm-集群安装案例 。")])]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#storm集群安装部署步骤【详细版】"}},[t._v("Storm集群安装部署步骤【详细版】")])])])]),s("p"),t._v(" "),s("h3",{attrs:{id:"storm集群安装部署步骤【详细版】"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#storm集群安装部署步骤【详细版】"}},[t._v("#")]),t._v(" Storm集群安装部署步骤【详细版】")]),t._v(" "),s("p",[t._v("转载作者信息：")]),t._v(" "),s("p",[t._v("作者: "),s("a",{attrs:{href:"http://www.cnblogs.com/panfeng412/",target:"_blank",rel:"noopener noreferrer"}},[t._v("大圆那些事"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("网址: http://www.cnblogs.com/panfeng412/archive/2012/11/30/how-to-install-and-deploy-storm-cluster.html")]),t._v(" "),s("p",[t._v("本文以Twitter Storm"),s("a",{attrs:{href:"https://github.com/nathanmarz/storm/wiki",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方Wiki"),s("OutboundLink")],1),t._v("为基础，详细描述如何快速搭建一个Storm集群，其中，项目实践中遇到的问题及经验总结，在相应章节以“注意事项”的形式给出。")]),t._v(" "),s("h2",{attrs:{id:"_1-storm集群组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-storm集群组件"}},[t._v("#")]),t._v(" 1. Storm集群组件")]),t._v(" "),s("p",[t._v("Storm集群中包含两类节点：主控节点（Master Node）和工作节点（Work Node）。其分别对应的角色如下：")]),t._v(" "),s("ul",[s("li",[t._v("主控节点（Master Node）上运行一个被称为Nimbus的后台程序，它负责在Storm集群内分发代码，分配任务给工作机器，并且负责监控集群运行状态。Nimbus的作用类似于Hadoop中JobTracker的角色。")]),t._v(" "),s("li",[t._v("每个工作节点（Work Node）上运行一个被称为Supervisor的后台程序。Supervisor负责监听从Nimbus分配给它执行的任务，据此启动或停止执行任务的工作进程。每一个工作进程执行一个Topology的子集；一个运行中的Topology由分布在不同工作节点上的多个工作进程组成。")])]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/dp/storm/clusterinstall-1.png"),alt:"wxmp"}}),t._v(" "),s("p",[s("strong",[t._v("Storm集群组件")])]),t._v(" "),s("p",[t._v("Nimbus和Supervisor节点之间所有的协调工作是通过Zookeeper集群来实现的。此外，Nimbus和Supervisor进程都是快速失败（fail-fast)和无状态（stateless）的；Storm集群所有的状态要么在Zookeeper集群中，要么存储在本地磁盘上。这意味着你可以用kill -9来杀死Nimbus和Supervisor进程，它们在重启后可以继续工作。这个设计使得Storm集群拥有不可思议的稳定性。")]),t._v(" "),s("h2",{attrs:{id:"_2-安装storm集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-安装storm集群"}},[t._v("#")]),t._v(" 2. 安装Storm集群")]),t._v(" "),s("p",[t._v("这一章节将详细描述如何搭建一个Storm集群。下面是接下来需要依次完成的安装步骤：")]),t._v(" "),s("ul",[s("li",[t._v("搭建Zookeeper集群；")]),t._v(" "),s("li",[t._v("安装Storm依赖库；")]),t._v(" "),s("li",[t._v("下载并解压Storm发布版本；")]),t._v(" "),s("li",[t._v("修改storm.yaml配置文件；")]),t._v(" "),s("li",[t._v("启动Storm各个后台进程。")])]),t._v(" "),s("h3",{attrs:{id:"_2-1-搭建zookeeper集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-搭建zookeeper集群"}},[t._v("#")]),t._v(" 2.1 搭建Zookeeper集群")]),t._v(" "),s("p",[t._v("Storm使用Zookeeper协调集群，由于Zookeeper并不用于消息传递，所以Storm给Zookeeper带来的压力相当低。大多数情况下，单个节点的Zookeeper集群足够胜任，不过为了确保故障恢复或者部署大规模Storm集群，可能需要更大规模节点的Zookeeper集群（对于Zookeeper集群的话，官方推荐的最小节点数为3个）。在Zookeeper集群的每台机器上完成以下安装部署步骤：")]),t._v(" "),s("p",[t._v("1）下载安装Java JDK，官方下载链接为http://java.sun.com/javase/downloads/index.jsp，JDK版本为JDK 6或以上。")]),t._v(" "),s("p",[t._v("2）根据Zookeeper集群的负载情况，合理设置Java堆大小，尽可能避免发生swap，导致Zookeeper性能下降。保守期间，4GB内存的机器可以为Zookeeper分配3GB最大堆空间。")]),t._v(" "),s("p",[t._v("3）下载后解压安装Zookeeper包，官方下载链接为http://hadoop.apache.org/zookeeper/releases.html。")]),t._v(" "),s("p",[t._v("4）根据Zookeeper集群节点情况，创建如下格式的Zookeeper配置文件zoo.cfg：")]),t._v(" "),s("div",{staticClass:"language-ini extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ini"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("tickTime")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("2000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("dataDir")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("/var/zookeeper/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("clientPort")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("2181")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("initLimit")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("syncLimit")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("server.1")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("zoo1:2888:3888")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("server.2")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("zoo2:2888:3888")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("server.3")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("zoo3:2888:3888")]),t._v("\n")])])]),s("p",[t._v("其中，dataDir指定Zookeeper的数据文件目录；其中server.id=host:port:port，id是为每个Zookeeper节点的编号，保存在dataDir目录下的myid文件中，zoo1~zoo3表示各个Zookeeper节点的hostname，第一个port是用于连接leader的端口，第二个port是用于leader选举的端口。")]),t._v(" "),s("p",[t._v("5）在dataDir目录下创建myid文件，文件中只包含一行，且内容为该节点对应的server.id中的id编号。")]),t._v(" "),s("p",[t._v("6）启动Zookeeper服务：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("java -cp zookeeper.jar:lib/log4j-1.2.15.jar:conf "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(" org.apache.zookeeper.server.quorum.QuorumPeerMain zoo.cfg\n")])])]),s("p",[t._v("也可以通过"),s("em",[t._v("bin/zkServer.sh")]),t._v("脚本启动Zookeeper服务。")]),t._v(" "),s("p",[t._v("7）通过Zookeeper客户端测试服务是否可用：")]),t._v(" "),s("ul",[s("li",[t._v("Java客户端下，执行如下命令：")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("java -cp zookeeper.jar:src/java/lib/log4j-1.2.15.jar:conf:src/java/lib/jline-0.9.94.jar "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(" org.apache.zookeeper.ZooKeeperMain -server "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:2181\n")])])]),s("p",[t._v("也可以通过"),s("em",[t._v("bin/zkCli.sh")]),t._v("脚本启动Zookeeper Java客户端。")]),t._v(" "),s("ul",[s("li",[t._v("C客户端下，进入"),s("em",[t._v("src/c")]),t._v("目录下，编译单线程或多线程客户端：")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("./configure\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" cli_st\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" cli_mt\n")])])]),s("p",[t._v("运行进入C客户端：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("cli_st "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:2181\ncli_mt "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:2181\n")])])]),s("p",[t._v("至此，完成了Zookeeper集群的部署与启动。")]),t._v(" "),s("p",[t._v("注意事项：")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("由于Zookeeper是快速失败（fail-fast)的，且遇到任何错误情况，进程均会退出，因此，最好能通过监控程序将Zookeeper管理起来，保证Zookeeper退出后能被自动重启。详情参考"),s("a",{attrs:{href:"http://zookeeper.apache.org/doc/r3.3.3/zookeeperAdmin.html#sc_supervision",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1),t._v("。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("Zookeeper运行过程中会在dataDir目录下生成很多日志和快照文件，而Zookeeper运行进程并不负责定期清理合并这些文件，导致占用大量磁盘空间，因此，需要通过cron等方式定期清除没用的日志和快照文件。详情参考"),s("a",{attrs:{href:"http://zookeeper.apache.org/doc/r3.3.3/zookeeperAdmin.html#sc_maintenance",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1),t._v("。具体命令格式如下：java -cp zookeeper.jar:log4j.jar:conf org.apache.zookeeper.server.PurgeTxnLog "),s("code",[t._v("<dataDir> <snapDir> -n <count>")])])])])]),t._v(" "),s("h3",{attrs:{id:"_2-2-安装storm依赖库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-安装storm依赖库"}},[t._v("#")]),t._v(" 2.2 安装Storm依赖库")]),t._v(" "),s("p",[t._v("接下来，需要在Nimbus和Supervisor机器上安装Storm的依赖库，具体如下：")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[s("a",{attrs:{href:"http://www.zeromq.org/area:download",target:"_blank",rel:"noopener noreferrer"}},[t._v("ZeroMQ 2.1.7"),s("OutboundLink")],1),t._v(' – 请勿使用2.1.10版本，因为该版本的一些严重bug会导致Storm集群运行时出现奇怪的问题。少数用户在2.1.7版本会遇到"IllegalArgumentException"的异常，此时降为2.1.4版本可修复这一问题。')])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[s("a",{attrs:{href:"http://github.com/nathanmarz/jzmq",target:"_blank",rel:"noopener noreferrer"}},[t._v("JZMQ"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("Java 6")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("Python 2.6.6")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"5"}},[s("li",[t._v("unzip")])])])]),t._v(" "),s("p",[t._v("以上依赖库的版本是经过Storm测试的，Storm并不能保证在其他版本的Java或Python库下可运行。")]),t._v(" "),s("h4",{attrs:{id:"_2-2-1-安装zmq-2-1-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-安装zmq-2-1-7"}},[t._v("#")]),t._v(" 2.2.1 安装ZMQ 2.1.7")]),t._v(" "),s("p",[t._v("下载后编译安装ZMQ：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" http://download.zeromq.org/zeromq-2.1.7.tar.gz\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" -xzf zeromq-2.1.7.tar.gz\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" zeromq-2.1.7\n./configure\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])]),s("p",[t._v("注意事项：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 如果安装过程报错uuid找不到，则通过如下的包安装uuid库：\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" e2fsprogsl  -b current\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" e2fsprogs-devel  -b current\n")])])]),s("h4",{attrs:{id:"_2-2-2-安装jzmq"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-安装jzmq"}},[t._v("#")]),t._v(" 2.2.2 安装JZMQ")]),t._v(" "),s("p",[t._v("下载后编译安装JZMQ：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/nathanmarz/jzmq.git\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" jzmq\n./autogen.sh\n./configure\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])]),s("p",[t._v("为了保证JZMQ正常工作，可能需要完成以下配置：")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("正确设置 JAVA_HOME环境变量")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("安装Java开发包")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("升级autoconf")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("如果你是Mac OSX，参考"),s("a",{attrs:{href:"http://blog.pmorelli.com/getting-zeromq-and-jzmq-running-on-mac-os-x",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1)])])])]),t._v(" "),s("p",[t._v("注意事项：")]),t._v(" "),s("ol",[s("li",[t._v("如果运行"),s("code",[t._v("./configure``命令出现问题，参考")]),s("a",{attrs:{href:"http://stackoverflow.com/questions/3522248/how-do-i-compile-jzmq-for-zeromq-on-osx",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1),s("code",[t._v("。")])])]),t._v(" "),s("h4",{attrs:{id:"_2-2-3-安装java-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-安装java-6"}},[t._v("#")]),t._v(" 2.2.3 安装Java 6")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("下载并安装JDK 6，参考"),s("a",{attrs:{href:"http://www.oracle.com/technetwork/java/javase/index-137561.html#linux",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1),t._v("；")])]),t._v(" "),s("li",[s("p",[t._v("配置JAVA_HOME环境变量；")])]),t._v(" "),s("li",[s("p",[t._v("运行java、javac命令，测试java正常安装。")])])]),t._v(" "),s("h4",{attrs:{id:"_2-2-4-安装python2-6-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-安装python2-6-6"}},[t._v("#")]),t._v(" 2.2.4 安装Python2.6.6")]),t._v(" "),s("ol",[s("li",[t._v("下载Python2.6.6：")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" http://www.python.org/ftp/python/2.6.6/Python-2.6.6.tar.bz2\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("编译安装Python2.6.6：")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" –jxvf Python-2.6.6.tar.bz2cd Python-2.6.6./configuremakemake "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("测试Python2.6.6：")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ python -VPython "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.6")]),t._v(".6\n")])])]),s("h4",{attrs:{id:"_2-2-5-安装unzip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-5-安装unzip"}},[t._v("#")]),t._v(" 2.2.5 安装unzip")]),t._v(" "),s("ol",[s("li",[t._v("如果使用RedHat系列Linux系统，执行以下命令安装unzip：")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unzip")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("如果使用Debian系列Linux系统，执行以下命令安装unzip：")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("yum "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unzip")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-3-下载并解压storm发布版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-下载并解压storm发布版本"}},[t._v("#")]),t._v(" 2.3 下载并解压Storm发布版本")]),t._v(" "),s("p",[t._v("下一步，需要在Nimbus和Supervisor机器上安装Storm发行版本。")]),t._v(" "),s("ol",[s("li",[t._v("下载Storm发行版本，推荐使用Storm0.8.1：")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://github.com/downloads/nathanmarz/storm/storm-0.8.1.zip\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("解压到安装目录下：")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unzip")]),t._v(" storm-0.8.1.zip\n")])])]),s("h3",{attrs:{id:"_2-4-修改storm-yaml配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-修改storm-yaml配置文件"}},[t._v("#")]),t._v(" 2.4 修改storm.yaml配置文件")]),t._v(" "),s("p",[t._v("Storm发行版本解压目录下有一个"),s("code",[t._v("conf/storm.yaml")]),t._v("文件，用于配置Storm。默认配置在"),s("a",{attrs:{href:"https://github.com/nathanmarz/storm/blob/master/conf/defaults.yaml",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1),t._v("可以查看。"),s("code",[t._v("conf/storm.yaml``中的配置选项将覆盖")]),t._v("defaults.yaml中的默认配置。以下配置选项是必须在`conf/storm.yaml``中进行配置的：```")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("storm.zookeeper.servers")]),t._v(": Storm集群使用的Zookeeper集群地址，其格式如下：")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("storm.zookeeper.servers:  - "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"111.222.333.444"')]),t._v("  - "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"555.666.777.888"')]),t._v("\n")])])]),s("p",[t._v("如果Zookeeper集群使用的不是默认端口，那么还需要"),s("strong",[t._v("storm.zookeeper.port选项")]),t._v("。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("strong",[t._v("storm.local.dir")]),t._v(": Nimbus和Supervisor进程用于存储少量状态，如jars、confs等的本地磁盘目录，需要提前创建该目录并给以足够的访问权限。然后在storm.yaml中配置该目录，如：")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("storm.local.dir: "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/home/admin/storm/workdir"')]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[s("strong",[t._v("java.library.path")]),t._v(': Storm使用的本地库（ZMQ和JZMQ）加载路径，默认为"/usr/local/lib:/opt/local/lib:/usr/lib"，一般来说ZMQ和JZMQ默认安装在/usr/local/lib 下，因此不需要配置即可。')])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("nimbus.host")]),t._v(": Storm集群Nimbus机器地址，各个Supervisor工作节点需要知道哪个机器是Nimbus，以便下载Topologies的jars、confs等文件，如：")])])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("nimbus.host: "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"111.222.333.444"')]),t._v("\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[s("strong",[t._v("supervisor.slots.ports")]),t._v(": 对于每个Supervisor工作节点，需要配置该工作节点可以运行的worker数量。每个worker占用一个单独的端口用于接收消息，该配置选项即用于定义哪些端口是可被worker使用的。默认情况下，每个节点上可运行4个workers，分别在6700、6701、6702和6703端口，如：")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("supervisor.slots.ports:    - "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6700")]),t._v("    - "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6701")]),t._v("    - "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6702")]),t._v("    - "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6703")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-5-启动storm各个后台进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-启动storm各个后台进程"}},[t._v("#")]),t._v(" 2.5 启动Storm各个后台进程")]),t._v(" "),s("p",[t._v("最后一步，启动Storm的所有后台进程。和Zookeeper一样，Storm也是快速失败（fail-fast)的系统，这样Storm才能在任意时刻被停止，并且当进程重启后被正确地恢复执行。这也是为什么Storm不在进程内保存状态的原因，即使Nimbus或Supervisors被重启，运行中的Topologies不会受到影响。")]),t._v(" "),s("p",[t._v("以下是启动Storm各个后台进程的方式：")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[s("strong",[t._v("Nimbus")]),t._v(': 在Storm主控节点上运行"bin/storm nimbus >/dev/null 2>&1 &"启动Nimbus后台程序，并放到后台执行；')])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[s("strong",[t._v("Supervisor")]),t._v(': 在Storm各个工作节点上运行"bin/storm supervisor >/dev/null 2>&1 &"启动Supervisor后台程序，并放到后台执行；')])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[s("strong",[t._v("UI")]),t._v(': 在Storm主控节点上运行"bin/storm ui >/dev/null 2>&1 &"启动UI后台程序，并放到后台执行，启动后可以通过http://{nimbus host}:8080观察集群的worker资源使用情况、Topologies的运行状态等信息。')])])])]),t._v(" "),s("p",[t._v("注意事项：")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("Storm后台进程被启动后，将在Storm安装部署目录下的logs/子目录下生成各个进程的日志文件。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("经测试，Storm UI必须和Storm Nimbus部署在同一台机器上，否则UI无法正常工作，因为UI进程会检查本机是否存在Nimbus链接。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("为了方便使用，可以将bin/storm加入到系统环境变量中。")])])])]),t._v(" "),s("p",[t._v("至此，Storm集群已经部署、配置完毕，可以向集群提交拓扑运行了。")]),t._v(" "),s("h2",{attrs:{id:"_3-向集群提交任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-向集群提交任务"}},[t._v("#")]),t._v(" 3. 向集群提交任务")]),t._v(" "),s("p",[t._v("1）启动Storm Topology：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("storm jar allmycode.jar org.me.MyTopology arg1 arg2 arg3\n")])])]),s("p",[t._v("其中，allmycode.jar是包含Topology实现代码的jar包，org.me.MyTopology的main方法是Topology的入口，arg1、arg2和arg3为org.me.MyTopology执行时需要传入的参数。")]),t._v(" "),s("p",[t._v("2）停止Storm Topology：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("storm "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("toponame"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("其中，{toponame}为Topology提交到Storm集群时指定的Topology任务名称。")]),t._v(" "),s("h2",{attrs:{id:"_4-参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-参考资料"}},[t._v("#")]),t._v(" 4. 参考资料")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("https://github.com/nathanmarz/storm/wiki/Tutorial")])]),t._v(" "),s("li",[s("p",[t._v("https://github.com/nathanmarz/storm/wiki/Setting-up-a-Storm-cluster")])])]),t._v(" "),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),s("ul",[s("li",[t._v("https://www.cnblogs.com/mrchige/p/5907861.html")])])])}),[],!1,null,null,null);a.default=e.exports}}]);