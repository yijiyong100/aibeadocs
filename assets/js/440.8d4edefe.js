(window.webpackJsonp=window.webpackJsonp||[]).push([[440],{955:function(a,e,r){"use strict";r.r(e);var t=r(53),s=Object(t.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),r("p",[a._v("本文主要是介绍 Yarn-参数配置详解 。")])]),a._v(" "),r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#yarn-site-xml-配置说明"}},[a._v("yarn-site.xml 配置说明")]),r("ul",[r("li",[r("a",{attrs:{href:"#_1-resourcemanager相关配置参数"}},[a._v("1. ResourceManager相关配置参数")])])])]),r("li",[r("a",{attrs:{href:"#【-】"}},[a._v("【----------------------------】")])]),r("li",[r("a",{attrs:{href:"#yarn参数调节"}},[a._v("yarn参数调节")]),r("ul",[r("li",[r("a",{attrs:{href:"#scheduler设置"}},[a._v("scheduler设置：")])]),r("li",[r("a",{attrs:{href:"#nodemanager设置"}},[a._v("nodemanager设置：")])])])]),r("li",[r("a",{attrs:{href:"#【-】"}},[a._v("【----------------------------】")])]),r("li",[r("a",{attrs:{href:"#yarn的配置参数解释"}},[a._v("yarn的配置参数解释")])]),r("li",[r("a",{attrs:{href:"#参考文章"}},[a._v("参考文章")])])])]),r("p"),a._v(" "),r("h2",{attrs:{id:"yarn-site-xml-配置说明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yarn-site-xml-配置说明"}},[a._v("#")]),a._v(" yarn-site.xml 配置说明")]),a._v(" "),r("h3",{attrs:{id:"_1-resourcemanager相关配置参数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-resourcemanager相关配置参数"}},[a._v("#")]),a._v(" 1. ResourceManager相关配置参数")]),a._v(" "),r("ul",[r("li",[a._v("（1） "),r("code",[a._v("yarn.resourcemanager.address")]),a._v("\n参数解释：ResourceManager 对客户端暴露的地址。客户端通过该地址向RM提交应用程序，杀死应用程序等。\n默认值：${yarn.resourcemanager.hostname}:8032")]),a._v(" "),r("li",[a._v("（2） "),r("code",[a._v("yarn.resourcemanager.scheduler.address")]),a._v("\n参数解释：ResourceManager 对ApplicationMaster暴露的访问地址。ApplicationMaster通过该地址向RM申请资源、释放资源等。\n默认值：${yarn.resourcemanager.hostname}:8030")]),a._v(" "),r("li",[a._v("（3） "),r("code",[a._v("yarn.resourcemanager.resource-tracker.address")]),a._v("\n参数解释：ResourceManager 对NodeManager暴露的地址.。NodeManager通过该地址向RM汇报心跳，领取任务等。\n默认值：${yarn.resourcemanager.hostname}:8031")]),a._v(" "),r("li",[a._v("（4） "),r("code",[a._v("yarn.resourcemanager.admin.address")]),a._v("\n参数解释：ResourceManager 对管理员暴露的访问地址。管理员通过该地址向RM发送管理命令等。\n默认值：${yarn.resourcemanager.hostname}:8033")]),a._v(" "),r("li",[a._v("（5） "),r("code",[a._v("yarn.resourcemanager.webapp.address")]),a._v("\n参数解释：ResourceManager对外web ui地址。用户可通过该地址在浏览器中查看集群各类信息。\n默认值：${yarn.resourcemanager.hostname}:8088")]),a._v(" "),r("li",[a._v("（6） "),r("code",[a._v("yarn.resourcemanager.scheduler.class")]),a._v("\n参数解释：启用的资源调度器主类。目前可用的有FIFO、Capacity Scheduler和Fair Scheduler。\n默认值：\norg.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler")]),a._v(" "),r("li",[a._v("（7） "),r("code",[a._v("yarn.resourcemanager.resource-tracker.client.thread-count")]),a._v("\n参数解释：处理来自NodeManager的RPC请求的Handler数目。\n默认值：50")]),a._v(" "),r("li",[a._v("（8） "),r("code",[a._v("yarn.resourcemanager.scheduler.client.thread-count")]),a._v("\n参数解释：处理来自ApplicationMaster的RPC请求的Handler数目。\n默认值：50")]),a._v(" "),r("li",[a._v("（9） "),r("code",[a._v("yarn.scheduler.minimum-allocation-mb/ yarn.scheduler.maximum-allocation-mb")]),a._v("\n参数解释：单个可申请的最小/最大内存资源量。比如设置为1024和3072，则运行MapRedce作业时，每个Task最少可申请1024MB内存，最多可申请3072MB内存。\n默认值：1024/8192")]),a._v(" "),r("li",[a._v("（10） "),r("code",[a._v("yarn.scheduler.minimum-allocation-vcores / yarn.scheduler.maximum-allocation-vcores")]),a._v("\n参数解释：单个可申请的最小/最大虚拟CPU个数。比如设置为1和4，则运行MapRedce作业时，每个Task最少可申请1个虚拟CPU，最多可申请4个虚拟CPU。什么是虚拟CPU，可阅读我的这篇文章：“YARN 资源调度器剖析”。\n默认值：1/32")]),a._v(" "),r("li",[a._v("（11） "),r("code",[a._v("yarn.resourcemanager.nodes.include-path /yarn.resourcemanager.nodes.exclude-path")]),a._v("\n参数解释：NodeManager黑白名单。如果发现若干个NodeManager存在问题，比如故障率很高，任务运行失败率高，则可以将之加入黑名单中。注意，这两个配置参数可以动态生效。（调用一个refresh命令即可）\n默认值：“”")]),a._v(" "),r("li",[a._v("（12） "),r("code",[a._v("yarn.resourcemanager.nodemanagers.heartbeat-interval-ms")]),a._v("\n参数解释：NodeManager心跳间隔\n默认值：1000（毫秒）")])]),a._v(" "),r("ol",[r("li",[a._v("NodeManager相关配置参数")])]),a._v(" "),r("ul",[r("li",[a._v("（1） "),r("code",[a._v("yarn.nodemanager.resource.memory-mb")]),a._v("\n参数解释：NodeManager总的可用物理内存。注意，该参数是不可修改的，一旦设置，整个运行过程中不可动态修改。另外，该参数的默认值是8192MB，即使你的机器内存不够8192MB，YARN也会按照这些内存来使用（傻不傻？），因此，这个值通过一定要配置。不过，Apache已经正在尝试将该参数做成可动态修改的。\n默认值：8192")]),a._v(" "),r("li",[a._v("（2） "),r("code",[a._v("yarn.nodemanager.vmem-pmem-ratio")]),a._v("\n参数解释：每使用1MB物理内存，最多可用的虚拟内存数。\n默认值：2.1")]),a._v(" "),r("li",[a._v("（3） "),r("code",[a._v("yarn.nodemanager.resource.cpu-vcores")]),a._v("\n参数解释：NodeManager总的可用虚拟CPU个数。\n默认值：8")]),a._v(" "),r("li",[a._v("（4） "),r("code",[a._v("yarn.nodemanager.local-dirs")]),a._v("\n参数解释：中间结果存放位置，类似于1.0中的mapred.local.dir。注意，这个参数通常会配置多个目录，已分摊磁盘IO负载。\n默认值：${hadoop.tmp.dir}/nm-local-dir")]),a._v(" "),r("li",[a._v("（5） "),r("code",[a._v("yarn.nodemanager.log-dirs")]),a._v("\n参数解释：日志存放地址（可配置多个目录）。\n默认值：${yarn.log.dir}/userlogs")]),a._v(" "),r("li",[a._v("（6） "),r("code",[a._v("yarn.nodemanager.log.retain-seconds")]),a._v("\n参数解释：NodeManager上日志最多存放时间（不启用日志聚集功能时有效）。\n默认值：10800（3小时）")]),a._v(" "),r("li",[a._v("（7） "),r("code",[a._v("yarn.nodemanager.aux-services")]),a._v("\n参数解释：NodeManager上运行的附属服务。需配置成mapreduce_shuffle，才可运行MapReduce程序\n默认值：“”")])]),a._v(" "),r("p",[a._v("转载自"),r("a",{attrs:{href:"https://link.jianshu.com/?t=http://dongxicheng.org/",target:"_blank",rel:"noopener noreferrer"}},[a._v("董的博客"),r("OutboundLink")],1)]),a._v(" "),r("h2",{attrs:{id:"【-】"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#【-】"}},[a._v("#")]),a._v(" 【----------------------------】")]),a._v(" "),r("h2",{attrs:{id:"yarn参数调节"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yarn参数调节"}},[a._v("#")]),a._v(" yarn参数调节")]),a._v(" "),r("h3",{attrs:{id:"scheduler设置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#scheduler设置"}},[a._v("#")]),a._v(" scheduler设置：")]),a._v(" "),r("p",[a._v("单个容器(container)可申请的最小与最大内存，应用在运行申请内存时不能超过最大值，小于最小值则分配最小值")]),a._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[a._v("yarn.scheduler.minimum-allocation-mb \nyarn.scheduler.maximum-allocation-mb\n")])])]),r("p",[a._v("单个任务可申请的最小/最大虚拟CPU个数（运行MapRedce作业时，每个Task最少可申请虚拟CPU个数，最多可申请的虚拟CPU个数）")]),a._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[a._v("yarn.scheduler.minimum-allocation-vcores \nyarn.scheduler.maximum-allocation-vcores\n")])])]),r("h3",{attrs:{id:"nodemanager设置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nodemanager设置"}},[a._v("#")]),a._v(" nodemanager设置：")]),a._v(" "),r("p",[a._v("每个节点可用的最大物理(虚拟)内存，默认是8192MB(2.1)。此数值可以用于计算container最大数目")]),a._v(" "),r("p",[a._v("yarn.nodemanager.resource.memory-mb\nyarn.nodemanager.vmem-pmem-ratio")]),a._v(" "),r("p",[a._v("NodeManager总的可用CPU个数")]),a._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[a._v("yarn.nodemanager.resource.cpu-vcores\n")])])]),r("p",[a._v("启动一个线程检查每个任务正使用的物理(虚拟)内存量，如果任务超出分配值，则直接将其杀掉，默认是true")]),a._v(" "),r("p",[a._v("yarn.nodemanager.pmem-check-enabled\nyarn.nodemanager.vmem-check-enabled")]),a._v(" "),r("p",[a._v("CDH Yarn资源队列划分管理")]),a._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[a._v("yarn.scheduler.fair.user-as-default-queue ：参数设置为false后，没有创建资源队列的用户，提交任务时，任务最重提交到默认队列"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("如果勾了这个，切没有创建对应用户名的资源池，任务直接提交失败"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nyarn.scheduler.fair.allow-undeclared-pools  ： 参数设置为ture后,应用程序在执行时会创建权重为1的对应用户名的资源池，这样起不到资源管控的效果，所以这里我们要设置为false\n")])])]),r("p",[a._v("Task 可使用的内存上限（单位:MB）及container的最大值，默认为 1024。如果Task 实际使用的资源量超过该值，则会被强制杀死")]),a._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[a._v("mapreduce."),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("reduce.memory.mb\n")])])]),r("p",[a._v("task 可用的最多 cpu core 数目, 默认值: 1")]),a._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[a._v("mapreduce.map"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("reduce"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(".cpu.vcores\n")])])]),r("p",[a._v("java jvm 堆内存非堆内存的调整")]),a._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[a._v("mapreduce.reduce.java.opts"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[a._v("'-Xmx5120m -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=256m -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:/tmp/@taskid@.gc -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/@taskid@.dump'")]),a._v(" \n")])])]),r("p",[a._v("这个参数是指reduce每次fetceh数据的时候，达到reduce jvm内存的百分之多少的时候，就把数据写入到磁盘；默认是0.25 可以在代码里面设置")]),a._v(" "),r("p",[a._v("mapreduce.reduce.shuffle.memory.limit.percent=0.1")]),a._v(" "),r("p",[a._v("reduce进程启动数据copy线程(Fetcher)最大的时间段")]),a._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[a._v("mapreduce.reduce.shuffle.read.timeout（default180000秒）\n")])])]),r("p",[a._v("shuffile在reduce内存中的数据最多使用内存量为：JVM的heapsize的70%")]),a._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[a._v("mapreduce.reduce.shuffle.input.buffer.percent（default "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(".7f ）\n")])])]),r("p",[a._v("内存到磁盘merge的限度阈值")]),a._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[a._v("mapreduce.reduce.shuffle.merge.percent（default0.66）\n")])])]),r("p",[a._v("保存map输出文件的堆内存比例")]),a._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[a._v("mapreduce.reduce.input.buffer.percent\n")])])]),r("h2",{attrs:{id:"【-】-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#【-】-2"}},[a._v("#")]),a._v(" 【----------------------------】")]),a._v(" "),r("h2",{attrs:{id:"yarn的配置参数解释"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yarn的配置参数解释"}},[a._v("#")]),a._v(" yarn的配置参数解释")]),a._v(" "),r("table",[r("thead",[r("tr",[r("th",[a._v("属性名称")]),a._v(" "),r("th",[a._v("默认值")]),a._v(" "),r("th",[a._v("含义")])])]),a._v(" "),r("tbody",[r("tr",[r("td",[a._v("spark.yarn.am.memory")]),a._v(" "),r("td",[a._v("512m")]),a._v(" "),r("td",[a._v("client模式下，YARN Application Master使用的内存总量")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.am.cores")]),a._v(" "),r("td",[a._v("1")]),a._v(" "),r("td",[a._v("client模式下，Application Master使用的cpu数量")])]),a._v(" "),r("tr",[r("td",[a._v("spark.driver.cores")]),a._v(" "),r("td",[a._v("1")]),a._v(" "),r("td",[a._v("cluster模式下，driver使用的cpu core数量，driver与Application Master运行在一个进程中，所以也控制了Application Master的cpu数量")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.am.waitTime")]),a._v(" "),r("td",[a._v("100s")]),a._v(" "),r("td",[a._v("cluster模式下，Application Master要等待SparkContext初始化的时长; client模式下，application master等待driver来连接它的时长")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.submit.file.replication")]),a._v(" "),r("td",[a._v("hdfs副本数")]),a._v(" "),r("td",[a._v("作业写到hdfs上的文件的副本数量，比如工程jar，依赖jar，配置文件等，最小一定是1")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.preserve.staging.files")]),a._v(" "),r("td",[a._v("false")]),a._v(" "),r("td",[a._v("如果设置为true，那么在作业运行完之后，会避免工程jar等文件被删除掉")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.scheduler.heartbeat.interval-ms")]),a._v(" "),r("td",[a._v("3000")]),a._v(" "),r("td",[a._v("application master向resourcemanager发送心跳的间隔，单位ms")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.scheduler.initial-allocation.interval")]),a._v(" "),r("td",[a._v("200ms")]),a._v(" "),r("td",[a._v("application master在有pending住的container分配需求时，立即向resourcemanager发送心跳的间隔")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.max.executor.failures")]),a._v(" "),r("td",[a._v("executor数量*2，最小3")]),a._v(" "),r("td",[a._v("整个作业判定为失败之前，executor最大的失败次数")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.historyServer.address")]),a._v(" "),r("td",[a._v("无")]),a._v(" "),r("td",[a._v("spark history server的地址")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.dist.archives")]),a._v(" "),r("td",[a._v("无")]),a._v(" "),r("td",[a._v("每个executor都要获取并放入工作目录的archive")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.dist.files")]),a._v(" "),r("td",[a._v("无")]),a._v(" "),r("td",[a._v("每个executor都要放入的工作目录的文件")])]),a._v(" "),r("tr",[r("td",[a._v("spark.executor.instances")]),a._v(" "),r("td",[a._v("2")]),a._v(" "),r("td",[a._v("默认的executor数量")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.executor.memoryOverhead")]),a._v(" "),r("td",[a._v("executor内存10%")]),a._v(" "),r("td",[a._v("每个executor的堆外内存大小，用来存放诸如常量字符串等东西")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.driver.memoryOverhead")]),a._v(" "),r("td",[a._v("driver内存7%")]),a._v(" "),r("td",[a._v("同上")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.am.memoryOverhead")]),a._v(" "),r("td",[a._v("AM内存7%")]),a._v(" "),r("td",[a._v("同上")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.am.port")]),a._v(" "),r("td",[a._v("随机")]),a._v(" "),r("td",[a._v("application master端口")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.jar")]),a._v(" "),r("td",[a._v("无")]),a._v(" "),r("td",[a._v("spark jar文件的位置")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.access.namenodes")]),a._v(" "),r("td",[a._v("无")]),a._v(" "),r("td",[a._v("spark作业能访问的hdfs namenode地址")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.containerLauncherMaxThreads")]),a._v(" "),r("td",[a._v("25")]),a._v(" "),r("td",[a._v("application master能用来启动executor container的最大线程数量")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.am.extraJavaOptions")]),a._v(" "),r("td",[a._v("无")]),a._v(" "),r("td",[a._v("application master的jvm参数")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.am.extraLibraryPath")]),a._v(" "),r("td",[a._v("无")]),a._v(" "),r("td",[a._v("application master的额外库路径")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.maxAppAttempts")]),a._v(" "),r("td",[a._v("/")]),a._v(" "),r("td",[a._v("提交spark作业最大的尝试次数")])]),a._v(" "),r("tr",[r("td",[a._v("spark.yarn.submit.waitAppCompletion")]),a._v(" "),r("td",[a._v("true")]),a._v(" "),r("td",[a._v("cluster模式下，client是否等到作业运行完再退出")])])])]),a._v(" "),r("h2",{attrs:{id:"参考文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),r("ul",[r("li",[a._v("https://www.jianshu.com/p/35374384a1aa")]),a._v(" "),r("li",[a._v("https://www.cnblogs.com/zyanrong/p/14831960.html")]),a._v(" "),r("li",[a._v("https://www.cnblogs.com/mergy/p/12160643.html")])])])}),[],!1,null,null,null);e.default=s.exports}}]);