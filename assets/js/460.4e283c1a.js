(window.webpackJsonp=window.webpackJsonp||[]).push([[460],{975:function(a,t,s){"use strict";s.r(t);var e=s(53),_=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),s("p",[a._v("本文主要是介绍 HDFS-常见知识总结 。")])]),a._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#hdfs-常见知识总结"}},[a._v("HDFS-常见知识总结")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-hdfs-hadoop分布式文件存储系统"}},[a._v("(1) HDFS--Hadoop分布式文件存储系统")])]),s("li",[s("a",{attrs:{href:"#_2-hdfs底层架构-分布式文件存储系统"}},[a._v("(2) HDFS底层架构 - 分布式文件存储系统")])]),s("li",[s("a",{attrs:{href:"#_3-分布式文件系统的特点-优缺点"}},[a._v("(3) 分布式文件系统的特点（优缺点）")])]),s("li",[s("a",{attrs:{href:"#_4-hdfs基本概念"}},[a._v("(4) HDFS基本概念")])]),s("li",[s("a",{attrs:{href:"#_5-hdfs的前提和设计目标"}},[a._v("(5) HDFS的前提和设计目标")])]),s("li",[s("a",{attrs:{href:"#_6-hdfs的基本概念"}},[a._v("(6) HDFS的基本概念")])]),s("li",[s("a",{attrs:{href:"#_7-hdfs-底层架构"}},[a._v("(7) HDFS 底层架构")])]),s("li",[s("a",{attrs:{href:"#_8-hdfs读文件流程"}},[a._v("(8) HDFS读文件流程")])]),s("li",[s("a",{attrs:{href:"#_9-hdfs写文件流程"}},[a._v("(9) HDFS写文件流程")])]),s("li",[s("a",{attrs:{href:"#_10-hdfs-可靠性"}},[a._v("(10) HDFS-可靠性")])]),s("li",[s("a",{attrs:{href:"#_11-hdfs-容错率"}},[a._v("(11) HDFS -- 容错率")])]),s("li",[s("a",{attrs:{href:"#_12-hdfs的机架策略"}},[a._v("(12) HDFS的机架策略")])]),s("li",[s("a",{attrs:{href:"#_13-心跳机制"}},[a._v("(13) 心跳机制")])]),s("li",[s("a",{attrs:{href:"#_14-安全模式-safeinmode"}},[a._v("(14) 安全模式（SafeInMode）")])]),s("li",[s("a",{attrs:{href:"#_15-hdfs的校验和"}},[a._v("(15) HDFS的校验和")])]),s("li",[s("a",{attrs:{href:"#_16-回收站-类似于windows的回收站-防止误删除操作"}},[a._v("(16) 回收站（类似于windows的回收站，防止误删除操作）")])]),s("li",[s("a",{attrs:{href:"#_17-元数据-保护"}},[a._v("(17) 元数据 -- 保护")])]),s("li",[s("a",{attrs:{href:"#_18-hdfs常用命令"}},[a._v("(18) HDFS常用命令")])])])]),s("li",[s("a",{attrs:{href:"#参考文章"}},[a._v("参考文章")])])])]),s("p"),a._v(" "),s("h2",{attrs:{id:"hdfs-常见知识总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hdfs-常见知识总结"}},[a._v("#")]),a._v(" HDFS-常见知识总结")]),a._v(" "),s("p",[s("strong",[a._v("HDFS（Hadoop Distributed File System）")])]),a._v(" "),s("h3",{attrs:{id:"_1-hdfs-hadoop分布式文件存储系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-hdfs-hadoop分布式文件存储系统"}},[a._v("#")]),a._v(" (1) HDFS--Hadoop分布式文件存储系统")]),a._v(" "),s("p",[a._v("源自于Google的GFS论文，HDFS是GFS的克隆版")]),a._v(" "),s("p",[a._v("HDFS是Hadoop中数据存储和管理的基础")]),a._v(" "),s("p",[a._v("他是一个高容错的系统，能够自动解决硬件故障，eg：硬盘损坏，HDFS可以自动修复，可以运行于低成本的通用硬件上（低廉的硬盘，4TB是1200元左右）")]),a._v(" "),s("p",[a._v("一次写入多次读取，不支持修改操作，数据按块切分（按128M切块），按位存储（就近原则）")]),a._v(" "),s("h3",{attrs:{id:"_2-hdfs底层架构-分布式文件存储系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-hdfs底层架构-分布式文件存储系统"}},[a._v("#")]),a._v(" (2) HDFS底层架构 - 分布式文件存储系统")]),a._v(" "),s("p",[a._v("基于物理层存储的分布式（用多台虚拟机来存储咱们的存在）")]),a._v(" "),s("p",[a._v("基于客户端/服务器模式")]),a._v(" "),s("p",[a._v("通常情况下HDFS都会提供容错和备份机制")]),a._v(" "),s("p",[a._v("通常情况下：HDFS都是基于本地系统的文件存储系统")]),a._v(" "),s("h3",{attrs:{id:"_3-分布式文件系统的特点-优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-分布式文件系统的特点-优缺点"}},[a._v("#")]),a._v(" (3) 分布式文件系统的特点（优缺点）")]),a._v(" "),s("p",[s("strong",[a._v("优点")]),a._v("：")]),a._v(" "),s("p",[a._v("高可靠：")]),a._v(" "),s("p",[a._v("按位存储，数据分配就近原则，会把数据分配到离他最近的DataNode,所以值得人们信赖")]),a._v(" "),s("p",[a._v("高扩展：")]),a._v(" "),s("p",[a._v("集群节点可以根据业务需求随时扩展和缩减")]),a._v(" "),s("p",[a._v("高效性：")]),a._v(" "),s("p",[a._v("可以在各个集群集群节点之间动态的移动数据，并且保证集群间各节点之间的动态平衡，因此处理速度非常快")]),a._v(" "),s("p",[a._v("高容错：")]),a._v(" "),s("p",[a._v("Hadoop能够自动保存多个副本（默认3份，可修改），并且能够将失败的任务自动重新分配，解决硬件故障")]),a._v(" "),s("p",[s("strong",[a._v("成本低")]),a._v("：")]),a._v(" "),s("p",[a._v("不适合高效存储大量小文件")]),a._v(" "),s("p",[a._v("不适合低延迟的数据访问")]),a._v(" "),s("p",[a._v("不支持多用户的写入和修改操作，支持单用户的写入")]),a._v(" "),s("h3",{attrs:{id:"_4-hdfs基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-hdfs基本概念"}},[a._v("#")]),a._v(" (4) HDFS基本概念")]),a._v(" "),s("p",[a._v("HDFS是一个分布式文件存储系统（NDFS、GFS）")]),a._v(" "),s("p",[a._v("HDFS是用Java语言实现的、分布式的、可扩展的文件系统")]),a._v(" "),s("p",[a._v("HDFS是Hadoop的三大核心和四大模块之一")]),a._v(" "),s("p",[a._v("HDFS主要应用于海量数据的存储")]),a._v(" "),s("p",[a._v("HDFS是*nix(eg:Linux,Unix)")]),a._v(" "),s("h3",{attrs:{id:"_5-hdfs的前提和设计目标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-hdfs的前提和设计目标"}},[a._v("#")]),a._v(" (5) HDFS的前提和设计目标")]),a._v(" "),s("p",[a._v("硬件问题")]),a._v(" "),s("p",[a._v("错误检测和快速、自动的恢复是HDFS最核心的架构目标")]),a._v(" "),s("p",[a._v("存储超大文件，存储量可以达到PB、EB级别（单个文件一般至少是百MB以上）")]),a._v(" "),s("p",[a._v("数据访问：流式访问（不支持随机访问）")]),a._v(" "),s("p",[a._v("HDFS的简单一致性模型：")]),a._v(" "),s("p",[a._v("HDFS需要对它的应用程序实行一次写入、多次读取的访问模式")]),a._v(" "),s("h3",{attrs:{id:"_6-hdfs的基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-hdfs的基本概念"}},[a._v("#")]),a._v(" (6) HDFS的基本概念")]),a._v(" "),s("p",[a._v("HDFS的基本存储单位：块，块是最小的数据读写单位")]),a._v(" "),s("p",[a._v("Hadoop1.0*默认存储块大小：64M")]),a._v(" "),s("p",[a._v("Hadoop2.0*默认存储块大小：128M")]),a._v(" "),s("p",[a._v("块大小可以在配置文件hdfs-site.xml修改（1.0参数dfs.block.size/2.0参数dfs.blocksize）")]),a._v(" "),s("p",[a._v("块的默认单位：byte")]),a._v(" "),s("p",[a._v("每个块都有自己的全局（唯一）ID")]),a._v(" "),s("p",[a._v("以块为单位在集群服务器上分配存储")]),a._v(" "),s("p",[a._v("【块的好处】：")]),a._v(" "),s("p",[a._v("一个文件的大小可以大于集群中任一磁盘的容量")]),a._v(" "),s("p",[a._v("块适合于数据备份，通过了容错能力和可用性")]),a._v(" "),s("h3",{attrs:{id:"_7-hdfs-底层架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-hdfs-底层架构"}},[a._v("#")]),a._v(" (7) HDFS 底层架构")]),a._v(" "),s("h4",{attrs:{id:"namenode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#namenode"}},[a._v("#")]),a._v(" NameNode：")]),a._v(" "),s("p",[a._v("集群的老大，主节点，存放元数据（Metedata）信息")]),a._v(" "),s("p",[a._v("元数据：命名空间，块的生成时间，块的大小，文件目录，最后访问时间等。。。")]),a._v(" "),s("p",[a._v("记录每一条数据块在各个DataNode上的位置和副本信息")]),a._v(" "),s("p",[a._v("协调客户端对文件的访问")]),a._v(" "),s("p",[a._v("NameNode使用事物日志（EditsLog）记录元数据的变化信息，使用映像文件（FsImageLog）来存储系统的命名空间，包括：文件映射、文件属性等；")]),a._v(" "),s("p",[a._v("通说检查点（Checkpoint）更新映像文件")]),a._v(" "),s("h4",{attrs:{id:"secondarynamenode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#secondarynamenode"}},[a._v("#")]),a._v(" SecondaryNameNode：")]),a._v(" "),s("p",[a._v("NameNode的小秘书，排行老二，协助NameNode")]),a._v(" "),s("p",[a._v("是NameNode的备份，实质上相当于虚拟机的快照")]),a._v(" "),s("p",[a._v("尽量不要把SecondaryNameNode和NameNode放在同一台机器上")]),a._v(" "),s("h4",{attrs:{id:"datanode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#datanode"}},[a._v("#")]),a._v(" DataNode：")]),a._v(" "),s("p",[a._v("小弟，负责存储数据的")]),a._v(" "),s("p",[a._v("一次写入，多次读取（不支持数据修改操作）")]),a._v(" "),s("p",[a._v("数据文件是以块存储的")]),a._v(" "),s("p",[a._v("数据块尽量分布在不同节点的不同DataNode上（保证读取效率大大提升）")]),a._v(" "),s("h3",{attrs:{id:"_8-hdfs读文件流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-hdfs读文件流程"}},[a._v("#")]),a._v(" (8) HDFS读文件流程")]),a._v(" "),s("ul",[s("li",[s("ol",[s("li",[a._v("先通过客户端调用FileSyStem对象的.open()方法打开HDFS中需要读取的文件")])])]),a._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[a._v("FileSyStem通过远程协议调用NameNode，确定要访问的文件的数据块的位置；NameNode返回一个含有数据块的“元数据”信息（即文件的基本信息）；然后，DataNode按照NameNode定义的距离值进行排序，如果客户端本身就是一个DataNode，那么会优先从本地的DataNode节点上进行数据读取返回一个InputStream给客户端，让其从FSDataInputStream中读取数据，FSDataInputStream接着包装一个DInputStream，用来用来管理DataNode和NameNode的I/O")])])]),a._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[a._v("NameNode向客户端返回一个包含数据块信息的地址，客户端会根据创建一个FSDataInputStream，开始对数据进行读取")])])]),a._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[a._v("FSDataInputStream根据开始时候存放的位置，连接到离它最近的DataNode，对其上数据进行从头读取操作。读取过程中客户端会反复调  用.read()方法，以I/O的（流式方式）从DataNode上访问读取数据")])])]),a._v(" "),s("li",[s("ol",{attrs:{start:"5"}},[s("li",[a._v("当读取到Block的最后一块时，FSDataInputStream会关闭掉当前DataNode的连接，然后查找能够读取的下一个Block所在的距离当前最近的DataNode")])])]),a._v(" "),s("li",[s("ol",{attrs:{start:"6"}},[s("li",[a._v("读取完之后调用.close()方法，关闭FSDataInputStream8")])])])]),a._v(" "),s("h3",{attrs:{id:"_9-hdfs写文件流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-hdfs写文件流程"}},[a._v("#")]),a._v(" (9) HDFS写文件流程")]),a._v(" "),s("ul",[s("li",[s("ol",[s("li",[a._v("客户端调用FileSyStem的.create()方法来请求创建文件")])])]),a._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[a._v("FileSyStem通过NameNode发送请求，创建一个新文件，但此时并不关联其它任何数据块。NameNode进行很多检查保证不存在要创建文件已经在与HDFS系统当中，同时检查是否有相应的权限来创建这个文件。如果这些检查都已完成，那么NameNode就会记录下来这个新建的文件的信息。FileSyStem就返回一个FSDataOutputStream给客户端让他来写数据。和读的情况一样，FSDataOutputStream将会包装一个DFSOutputStream用于和DataNode和NameNode进行通讯的。一旦文件创建失败，客户端会接收到一个IOException，表示文件创建失败，停止后续的所有任务")])])]),a._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[a._v("客户端开始写数据。FSDataOutputStream把要写入的数据分成块的形式，将其写入到队列中。其中的数据有DataStream读取（DataStream的职责：让NameNode分配新的块--通过找到合适的DataNode来存储备份的副本数据）这些DataNode组成一条流水线，假设是一个三级流水线，那么里面含有三个节点。此时DataStream把数据首先写入到离他最近的DataNode上（第一个节点）；然后由第一个节点将数据块写入到第二个节点，第二个节点继续把数据块传送到第三个节点上")])])]),a._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[a._v("FSDataOutputStream维护了一个内部关于write packet的队列，里面存放了等待DataNode确认无误的packets信息。这个队列称为等待队列。一个packet的信息被移出本队列并且当packet流水线中的所有节点确认无误")])])]),a._v(" "),s("li",[s("ol",{attrs:{start:"5"}},[s("li",[a._v("当完成数据写入操作后，客户端会调用.close()方法，在通知NameNode它些数据完成之前，这个方法将Flush（刷新）残留的packets，并且等待信息确认，NameNode已经知道了文件由哪些数据块，通过DataStream询问数据块的分配，所以它在返回成功之前必须要完成配置文件中配置的最小副本数的复制操作")])])])]),a._v(" "),s("h3",{attrs:{id:"_10-hdfs-可靠性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-hdfs-可靠性"}},[a._v("#")]),a._v(" (10) HDFS-可靠性")]),a._v(" "),s("p",[a._v("按位存储 -- 就近原则")]),a._v(" "),s("h3",{attrs:{id:"_11-hdfs-容错率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-hdfs-容错率"}},[a._v("#")]),a._v(" (11) HDFS -- 容错率")]),a._v(" "),s("p",[a._v("冗（rong）余副本策略")]),a._v(" "),s("p",[a._v("可以在hdfs-site中指定副本数")]),a._v(" "),s("p",[a._v("所有的数据块都有副本数")]),a._v(" "),s("p",[a._v("DataNode启动时便利本地文件系统，产生一份hdfs数据块和本地文件系统对应的数据队列进行数据效验，然后汇报给NameNode，NameNode负责管理")]),a._v(" "),s("h3",{attrs:{id:"_12-hdfs的机架策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-hdfs的机架策略"}},[a._v("#")]),a._v(" (12) HDFS的机架策略")]),a._v(" "),s("p",[a._v("集群的节点一般是放在不同的机架上，机架之间带宽要比机架内带宽要小（这样做的话传输速度）")]),a._v(" "),s("p",[a._v("默认一个机架内存两个副本，然后再在另一个机架存放一个副本，这样可以防止机架失效数据的丢失，同时他也能够提高带宽利用率")]),a._v(" "),s("p",[a._v("0.17版之前")]),a._v(" "),s("p",[a._v("​     默认存3个副本")]),a._v(" "),s("p",[a._v("​     第一个副本放在与客户端同一个机架的距离最近的机器中")]),a._v(" "),s("p",[a._v("​     第二个副本放在同一个机架")]),a._v(" "),s("p",[a._v("​     第三个副本放到不同机架的某一设备中")]),a._v(" "),s("p",[a._v("0.17版之后")]),a._v(" "),s("p",[a._v("​     默认存3个副本")]),a._v(" "),s("p",[a._v("​     第一个副本放在与客户端同一个机架的机器中")]),a._v(" "),s("p",[a._v("​     第二个 副本放到不同机架的某一设备中")]),a._v(" "),s("p",[a._v("​     第三个副本放到与第二个副本同一机架的不同设备中")]),a._v(" "),s("h3",{attrs:{id:"_13-心跳机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-心跳机制"}},[a._v("#")]),a._v(" (13) 心跳机制")]),a._v(" "),s("p",[a._v("心跳  3秒一次")]),a._v(" "),s("p",[a._v("块报告 5分钟一次")]),a._v(" "),s("p",[a._v("判断DataNode是否死亡")]),a._v(" "),s("p",[a._v("10"),s("em",[a._v("3+2")]),a._v("5+60=630秒")]),a._v(" "),s("p",[a._v("NameNode周期性从DataNode接收心跳报告（3s）和块报告（5min）《用来监控集群状态；如果出现错误 -- 自动修复")]),a._v(" "),s("p",[a._v("NameNode根据块报告验证元数据信息")]),a._v(" "),s("p",[a._v("没有按时发送心跳报告的DataNode，会被NameNode标记为死亡状态（宕《dang》机），不会再给DataNode分配任何I/O请求，如果DataNode失效（死亡或者假死）了，NameNode发现DataNode的副本数降低，低于之前设定的副本因子值（副本数），NameNode在检测出这些数据块丢失之后会在何时的时间自动修复")]),a._v(" "),s("p",[a._v("自动修复数据的原因：")]),a._v(" "),s("p",[a._v("数据副本本身损坏，磁盘故障，修改系统配文件导致副本因子增大，断电等等")]),a._v(" "),s("h3",{attrs:{id:"_14-安全模式-safeinmode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-安全模式-safeinmode"}},[a._v("#")]),a._v(" (14) 安全模式（SafeInMode）")]),a._v(" "),s("p",[a._v('NameNode启动的时候会先经过一个"安全模式"（保证数据安全）')]),a._v(" "),s("p",[a._v("安全模式下不会产生数据写入操作，因为NameNode验证数据，不支持此操作；支持读取")]),a._v(" "),s("p",[a._v("在此阶段NameNode收集各个DataNode节点的报告，当数据块的最小副本数=配置文件中设置的值时，认为他是“安全式”")]),a._v(" "),s("p",[a._v("此时退出安全模式，才可以进行数据写入操作")]),a._v(" "),s("p",[a._v("当检测到副本数不足的数据块时，该数据块会被HDFS自动复制直到达到配置文件中设置的最小副本数时停止复制")]),a._v(" "),s("p",[a._v("安全模式（SadeInMode）下了可以进行的操作：")]),a._v(" "),s("p",[a._v("只能够查询，不支持任何对于数据改动（增加，删除）")]),a._v(" "),s("p",[a._v("如何进入安全模式？")]),a._v(" "),s("p",[a._v("进入| 离开 | 下载")]),a._v(" "),s("p",[a._v("hdfs dfsadmin -safemode enter|leave|get")]),a._v(" "),s("p",[a._v("进入时的情景：")]),a._v(" "),s("ul",[s("li",[s("ol",[s("li",[a._v("NameNode启动过程中进入")])])]),a._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[a._v("手动进入 hdfs dfsadmin -safemode enter")])])]),a._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[a._v("阀值计算公式：已经启动的DataNode节点数 / 总数、")])])])]),a._v(" "),s("p",[a._v("阀值为1的进入安全模式")]),a._v(" "),s("p",[a._v("<0   永远不安全")]),a._v(" "),s("p",[a._v("0.999和1之间  离开安全模式")]),a._v(" "),s("p",[a._v("0~0.999之间   处于安全模式")]),a._v(" "),s("h3",{attrs:{id:"_15-hdfs的校验和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-hdfs的校验和"}},[a._v("#")]),a._v(" (15) HDFS的校验和")]),a._v(" "),s("p",[a._v("HDFS的客户端软件实现了对于HDFS文件内容的效验和（Chechsum）的检查（提高可靠性）")]),a._v(" "),s("p",[a._v("在文件创建时（调用。creat（）），会计算出每个数据块的校验和")]),a._v(" "),s("p",[a._v("校验和会作为一个单独的隐藏文件保存在命名空间NameSpace下")]),a._v(" "),s("p",[a._v("获取文件时会检查数据块对应的校验和是否和隐藏文件（NameSpace下的文件）相同，值相同数据块未发生丢失，值不同数据块丢失，如果损坏或丢失NameNode会自动修复数据块")]),a._v(" "),s("p",[a._v("正在读取数据时发生丢失，不会进行数据修复，不影响数据读取，可以正常操作")]),a._v(" "),s("h3",{attrs:{id:"_16-回收站-类似于windows的回收站-防止误删除操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-回收站-类似于windows的回收站-防止误删除操作"}},[a._v("#")]),a._v(" (16) 回收站（类似于windows的回收站，防止误删除操作）")]),a._v(" "),s("p",[a._v("删除文件时，实际上是吧他放入了回收站（trash）")]),a._v(" "),s("p",[a._v("如果误删除文件可以进行还原")]),a._v(" "),s("p",[a._v("可以在集群配置文件中设置一个时间阀值，当回收站的文件存放时间达到此时间阀值时会自动清空，彻底删除文件，并且彻底释放原来文件占用的DataNode节点中的数据块")]),a._v(" "),s("p",[a._v("默认是关闭状态，可以通过core-site.xml添加fs.trash.interval来打开并配置时间阀值，时间以分钟为单位")]),a._v(" "),s("h3",{attrs:{id:"_17-元数据-保护"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-元数据-保护"}},[a._v("#")]),a._v(" (17) 元数据 -- 保护")]),a._v(" "),s("p",[a._v("影响文件和事物日志是NameNode的核心数据")]),a._v(" "),s("p",[a._v("NameNode会因为副本数的增加而大大降低它的处理速度，但是可以增加它的安全性（即可靠性）")]),a._v(" "),s("p",[a._v("Hadoop1.0*中NameNode依然只有一个，NameNode死掉之后必须手动启动")]),a._v(" "),s("p",[a._v("Hadoop2.0*中集群配置高可用，使其拥有多个NameNode，一个处于Active状态的NameNode节点死掉之后，HA会自动通过SecondaryNameNode启动处于StandBy（准备）状态的NameNode，集群可以正常运行")]),a._v(" "),s("p",[a._v("Hadoop3.0*中拥有多个NameNode，无需进行高可用HA集群配置，StandBy状态的NameNode立刻自动切换为Active状态")]),a._v(" "),s("h3",{attrs:{id:"_18-hdfs常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-hdfs常用命令"}},[a._v("#")]),a._v(" (18) HDFS常用命令")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("hadoop/hdfs/yarn fs -cmd "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("args"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("文件操作\n\n列出hdfs文件系统中根目录\n\nhdfs dfs -ls /           //列出hdfs下的二级目录\n\nhdfs dfs -ls -R /        //会列出hdfs的所有文件详细信息\n\n \n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("）上传文件（hdfs测试命令）\n\n\nhadoop/hdfs/yarn dfs -put  ./test1  ./test\n\n​"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("上传文件路径  目标位置路径\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("local src"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("hdfs src"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n \n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("）将hdfs的文件下载到本地并且重名\n\nhadoop/hdfs/yarn  dfs  -get  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" getin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("in:下载文件的地址 getin：下载下来的文件放在的地址"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("hdfs src"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("local src"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n先是hdfs文件路径，后是本地文件路径\n\n \n\n "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("）copyToLocal命令 复制\n\nhdfs dfs -copyToLocal "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("hdfs src"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("local src"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n作用与-get命令一样\n\n \n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("copyFromLocal命令 复制\n\n \n\nhdfs dfs -copyFromLocal "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("local src"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("hdfs src"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n作用与-put命令一样\n\n \n\nmoveFromLocal  移动\n\nhdfs dfs -moveFromLocal "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("local src"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("hdfs src"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n \n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v("）删除文档\n\nhdfs dfs -rmr "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("hdfs file"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\nhdfs dfs -rm \n\nhdfs dfs -rm -r \n\n \n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("查看文件内容\n\nhdfs dfs -cat 文件\n\n \n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("建目录\n\nhdfs dfs -mkdir 目录名\n\n建立多级目录时父目录不存在会报错，目录需要一级一级创建\n\n \n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("合并多个文件\n\nhdfs dfs -getmerge 多个文件路径空格隔开 合并之后文件名\n\n \n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("执行基本信息\n\nhdfs dfsadmin -report\n\n \n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("进入/查看/退出安全模式\n\nhdfs dfsadmin -safemode enter"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("get "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("leave\n\n \n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("添加节点\n\nstart-all.sh\n\n \n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("13")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("负载均衡\n\nstart-balancer.sh\n\n")])])]),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),s("ul",[s("li",[a._v("https://www.cnblogs.com/SmallBird-Nest/p/11420158.html")])])])}),[],!1,null,null,null);t.default=_.exports}}]);