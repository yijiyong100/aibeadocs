(window.webpackJsonp=window.webpackJsonp||[]).push([[524],{1040:function(t,a,_){"use strict";_.r(a);var s=_(53),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),_("p",[t._v("本文主要是介绍 框架、架构组件定义和区别 。")])]),t._v(" "),_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#_1、架构"}},[t._v("1、架构")])]),_("li",[_("a",{attrs:{href:"#_2、框架"}},[t._v("2、框架")])]),_("li",[_("a",{attrs:{href:"#_3、模式"}},[t._v("3、模式")])]),_("li",[_("a",{attrs:{href:"#_4、模块"}},[t._v("4、模块")])]),_("li",[_("a",{attrs:{href:"#_5、组件"}},[t._v("5、组件")])]),_("li",[_("a",{attrs:{href:"#_6、插件"}},[t._v("6、插件")])]),_("li",[_("a",{attrs:{href:"#_7、控件"}},[t._v("7、控件")])]),_("li",[_("a",{attrs:{href:"#_8、中间件"}},[t._v("8、中间件")])]),_("li",[_("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),_("p"),t._v(" "),_("p",[t._v("浅谈架构、框架、模式、模块、组件、插件、控件、中间件")]),t._v(" "),_("p",[t._v("软件开发中，你常常会听到技术架构、开发框架、设计模式、代码模块、中间层（件）、可插拔组件等等计算机行业的专有名词。这些名词和我们的开发工作息息相关，如果你想要在开发领域做的更好、走的更远，你必须要对这些专有名词有一个大概的了解。")]),t._v(" "),_("h2",{attrs:{id:"_1、架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、架构"}},[t._v("#")]),t._v(" 1、架构")]),t._v(" "),_("p",[t._v("架构也成称为软件体系结构。简单地说就是一种设计方案，将用户的不同需求抽象成组件，且能够描述组件之间的通信和调用。软件架构会分析工程中的问题，针对问题设计解决方案，针对解决方案分析应具有的功能，针对功能设计软件系统的层次和模块及层次模块之间的逻辑交互关系，确定各个功能如何由这些逻辑实现。开发人员根据软件架构分析出来的层次和架构进行软件编写。")]),t._v(" "),_("h2",{attrs:{id:"_2、框架"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、框架"}},[t._v("#")]),t._v(" 2、框架")]),t._v(" "),_("p",[t._v("框架是软件开发过程中提取软件的共性部分形成的体系结构。框架不是现成可用的应用系统，而是一个半成品，是一个提供了诸多服务，供开发人员进行二次开发，实现具体功能的程序实体。")]),t._v(" "),_("p",[t._v("框架与架构的关系：框架不是架构，框架比架构更具体，更偏重于技术，而架构更偏重于设计；架构可以通过多种框架来实现。")]),t._v(" "),_("h2",{attrs:{id:"_3、模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、模式"}},[t._v("#")]),t._v(" 3、模式")]),t._v(" "),_("p",[t._v("设计模式强调的是针对一个设计问题的解决方法，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。")]),t._v(" "),_("p",[t._v("框架与设计模式的关系：设计模式研究的是针对单一问题的设计思路和解决方法，设计模式与语言和框架无关，可应用于不同的框架和被不同的程序语言所实现；而框架则是一个应用的体系结构，是一种或多种设计模式和代码的混合体。设计模式的思想可以在框架设计中进行应用。")]),t._v(" "),_("p",[t._v("架构与设计模式的关系：设计模式研究的是对单一问题的设计思路和解决方法，范畴比较小；而架构是高层次的针对体系结构的一种设计思路，范畴比较大。一个架构中可能会出现多种设计模式。")]),t._v(" "),_("h2",{attrs:{id:"_4、模块"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4、模块"}},[t._v("#")]),t._v(" 4、模块")]),t._v(" "),_("p",[t._v("根据不同的标准，通常会说程序模块或功能模块，程序模块指的是一段能够实现某个目标的成员代码段，功能模块则用来说明一个功能所包含的系统行为。定义模块的原则是：高内聚和低耦合。")]),t._v(" "),_("h2",{attrs:{id:"_5、组件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5、组件"}},[t._v("#")]),t._v(" 5、组件")]),t._v(" "),_("p",[t._v("组件是封装了一个或多个程序模块的实体。组件强调的是封装，利用接口进行交互。插件是组件的一个子类，就是将组件中具有某些特点的组件归为插件。")]),t._v(" "),_("h2",{attrs:{id:"_6、插件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6、插件"}},[t._v("#")]),t._v(" 6、插件")]),t._v(" "),_("p",[t._v("插件属于组件，插件是组件的一个子类，就是将组件中具有某些特点的组件归为插件。插件是一种电脑程序，通过和应用程序的互动，来为应用程序增加一些特定的功能，仅靠插件是无法正常运行的，需要依赖于应用程序才能发挥自身功能。插件和应用程序之间通过接口进行交互。")]),t._v(" "),_("h2",{attrs:{id:"_7、控件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7、控件"}},[t._v("#")]),t._v(" 7、控件")]),t._v(" "),_("p",[t._v("控件是可视化的组件，是对数据和方法的封装。控件可以有自己的属性和方法，其中属性是控件数据的简单访问者，方法则是控件的一些简单而可见的功能。控件创建过程包括设计、开发、调试（就是所谓的3Ds开发流程,即Design、Develop、Debug）工作， 然后是控件的使用。")]),t._v(" "),_("h2",{attrs:{id:"_8、中间件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8、中间件"}},[t._v("#")]),t._v(" 8、中间件")]),t._v(" "),_("p",[t._v("通过系统软件和应用软件之间连接的软件，以便于软件各部件之间的沟通。")]),t._v(" "),_("h2",{attrs:{id:"参考文章"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),_("ul",[_("li",[t._v("https://blog.csdn.net/ydm19891101/article/details/83690280")])])])}),[],!1,null,null,null);a.default=r.exports}}]);