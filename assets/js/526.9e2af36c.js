(window.webpackJsonp=window.webpackJsonp||[]).push([[526],{1042:function(_,v,t){"use strict";t.r(v);var r=t(53),s=Object(r.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[_._v("TIP")]),_._v(" "),t("p",[_._v("本文主要是介绍 组件化框架方案 。")])]),_._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#_1-简介"}},[_._v("1 简介")]),t("ul",[t("li",[t("a",{attrs:{href:"#_1-1-什么是组件化"}},[_._v("1.1 什么是组件化?")])]),t("li",[t("a",{attrs:{href:"#_1-2-为什么要组件化"}},[_._v("1.2 为什么要组件化?")])]),t("li",[t("a",{attrs:{href:"#_1-3-分析现有的组件化方案"}},[_._v("1.3 分析现有的组件化方案")])]),t("li",[t("a",{attrs:{href:"#_1-4-如何选择组件化方案"}},[_._v("1.4 如何选择组件化方案?")])])])]),t("li",[t("a",{attrs:{href:"#_2-组件化方案描述"}},[_._v("2 组件化方案描述")]),t("ul",[t("li",[t("a",{attrs:{href:"#_2-1-架构图一览"}},[_._v("2.1 架构图一览")])]),t("li",[t("a",{attrs:{href:"#_2-2-架构图详解"}},[_._v("2.2 架构图详解")])]),t("li",[t("a",{attrs:{href:"#_2-2-1-宿主层"}},[_._v("2.2.1 宿主层")])]),t("li",[t("a",{attrs:{href:"#_2-2-2-业务层"}},[_._v("2.2.2 业务层")])]),t("li",[t("a",{attrs:{href:"#_2-2-2-1-业务模块的拆分"}},[_._v("2.2.2.1 业务模块的拆分")])]),t("li",[t("a",{attrs:{href:"#_2-2-3-基础层"}},[_._v("2.2.3 基础层")])]),t("li",[t("a",{attrs:{href:"#_2-2-3-1-核心基础业务"}},[_._v("2.2.3.1 核心基础业务")])]),t("li",[t("a",{attrs:{href:"#_2-2-3-2-公共服务"}},[_._v("2.2.3.2 公共服务")])]),t("li",[t("a",{attrs:{href:"#_2-2-3-3-基础-sdk"}},[_._v("2.2.3.3 基础 SDK")])])])]),t("li",[t("a",{attrs:{href:"#参考文章"}},[_._v("参考文章")])])])]),t("p"),_._v(" "),t("p",[_._v("组件化框架简介")]),_._v(" "),t("h2",{attrs:{id:"_1-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[_._v("#")]),_._v(" 1 简介")]),_._v(" "),t("h3",{attrs:{id:"_1-1-什么是组件化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是组件化"}},[_._v("#")]),_._v(" 1.1 什么是组件化?")]),_._v(" "),t("p",[_._v("组件化简单概括就是把一个功能完整的"),t("strong",[_._v("App")]),_._v("或模块拆分成多个子模块, 每个子模块可以独立编译和运行, 也可以任意组合成另一个新的"),t("strong",[_._v("App")]),_._v("或模块, 每个模块即不相互依赖但又可以相互交互, 遇到某些特殊情况甚至可以升级或者降级")]),_._v(" "),t("h3",{attrs:{id:"_1-2-为什么要组件化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-为什么要组件化"}},[_._v("#")]),_._v(" 1.2 为什么要组件化?")]),_._v(" "),t("p",[_._v("现在的项目随着需求的增加规模变得越来越大, 规模的增大带来了很多烦恼, 各种业务错中复杂的交织在一起, 每个业务模块之间, 代码没有约束, 带来了代码边界的模糊, 代码冲突时有发生, 更改一个小问题可能引起一些新的问题, 牵一发而动全身, 增加一个新需求, 瞻前顾后的熟悉了大量前辈们写的代码后才敢动手, 编译时间也不在断增加, 开发效率极度的下降, 在这种情况下组件化的出现就是为了解决以上的烦恼")]),_._v(" "),t("h3",{attrs:{id:"_1-3-分析现有的组件化方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-分析现有的组件化方案"}},[_._v("#")]),_._v(" 1.3 分析现有的组件化方案")]),_._v(" "),t("p",[_._v("很多大厂的组件化方案是以"),t("strong",[_._v("多工程")]),_._v("+"),t("strong",[_._v("多 Module")]),_._v("的结构(微信, 美团等超级"),t("strong",[_._v("App")]),_._v("更是以"),t("strong",[_._v("多工程")]),_._v("+"),t("strong",[_._v("多 Module")]),_._v("+"),t("strong",[_._v("多 P 工程(以页面为单元的代码隔离方式)"),t("strong",[_._v("的三级工程结构), 使用")]),_._v("Git Submodule")]),_._v("创建多个子仓库管理各个模块的代码, 并将各个模块的代码打包成"),t("strong",[_._v("AAR")]),_._v("上传至私有"),t("strong",[_._v("Maven")]),_._v("仓库使用远程版本号依赖的方式进行模块间代码的隔离")]),_._v(" "),t("h3",{attrs:{id:"_1-4-如何选择组件化方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-如何选择组件化方案"}},[_._v("#")]),_._v(" 1.4 如何选择组件化方案?")]),_._v(" "),t("p",[_._v("按照康威定律, 系统架构的设计需要根据组织间的沟通结构, 因为现在大部分项目的规模和开发人员的数量以及结构还不足以需要某些大厂发布的组件化方案支撑(大厂的组织结构和项目规模都非常庞大, 他们的方案不一定完全适合所有公司的项目), 进行更严格更细粒度的代码间以及模块间的隔离, 盲目的使用某些组件化方案, 可能会带来开发效率降低, 开发成本远大于收益等情况, 性价比变低, 作为项目负责人, 应该根据项目目前的规模以及开发人员的组织结构去选择目前最适合的组件化方案, 做到以项目实际情况去制定技术方案, 而不是盲目跟随某些大厂的技术方案让项目和开发人员花费大量时间去调整和适应")]),_._v(" "),t("h2",{attrs:{id:"_2-组件化方案描述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-组件化方案描述"}},[_._v("#")]),_._v(" 2 组件化方案描述")]),_._v(" "),t("p",[t("strong",[_._v("Component_base")]),_._v(" 目前采用的是"),t("strong",[_._v("单工程")]),_._v("+"),t("strong",[_._v("多 Module")]),_._v("的结构, 由于"),t("strong",[_._v("Demo")]),_._v("较小仅仅为了展示基本规范, 所以也只是采用源码依赖并没有做到远程版本号依赖组件, 代码管理也只是采用"),t("strong",[_._v("单仓库")]),_._v("+"),t("strong",[_._v("多分支")]),_._v("的方式, 这样也是对于开发初期, 项目规模还较小, 开发人员也较少时, 开发效率较高的方案, 如果您的项目规模较大, 开发人员众多, 就可以采用上面提到的"),t("strong",[_._v("多工程")]),_._v("+"),t("strong",[_._v("多 Module")]),_._v(", 并使用私有"),t("strong",[_._v("Maven")]),_._v("仓库管理组件版本")]),_._v(" "),t("p",[t("strong",[_._v("世界上没有一个方案可以完美到兼顾所有情况, 并且还满足所有人, 所有项目的需求, 所以项目负责人必须按照项目实际情况做出灵活的调整, 才能做出最适合自家项目的方案")])]),_._v(" "),t("h3",{attrs:{id:"_2-1-架构图一览"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-架构图一览"}},[_._v("#")]),_._v(" 2.1 架构图一览")]),_._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:_.$withBase("/assets/img/framework/basic/component-1.png"),alt:"wxmp"}}),_._v(" "),t("p",[_._v("Component_base 组件化架构图")]),_._v(" "),t("h3",{attrs:{id:"_2-2-架构图详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-架构图详解"}},[_._v("#")]),_._v(" 2.2 架构图详解")]),_._v(" "),t("p",[_._v("目前架构一共分为三层, 从低到高依次是基础层, 业务层和宿主层, 由于目前项目较小人员较少所以三层都集中在一个工程中, 但您可以根据项目的规模和开发人员的数量拆分成多个工程协同开发")]),_._v(" "),t("h3",{attrs:{id:"_2-2-1-宿主层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-宿主层"}},[_._v("#")]),_._v(" 2.2.1 宿主层")]),_._v(" "),t("p",[_._v("宿主层位于最上层, 主要作用是作为一个"),t("strong",[_._v("App")]),_._v("壳, 将需要的模块组装成一个完整的"),t("strong",[_._v("App")]),_._v(", 这一层可以管理整个"),t("strong",[_._v("App")]),_._v("的生命周期(比如"),t("strong",[_._v("Application")]),_._v("的初始化和各种组件以及三方库的初始化)")]),_._v(" "),t("h3",{attrs:{id:"_2-2-2-业务层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-业务层"}},[_._v("#")]),_._v(" 2.2.2 业务层")]),_._v(" "),t("p",[_._v("业务层位于中层, 里面主要是根据业务需求和应用场景拆分过后的业务模块, 每个模块之间互不依赖, 但又可以相互交互, 比如一个商城"),t("strong",[_._v("App")]),_._v("由"),t("strong",[_._v("搜索")]),_._v(","),t("strong",[_._v("订单")]),_._v(","),t("strong",[_._v("购物车")]),_._v(","),t("strong",[_._v("支付")]),_._v("等业务模块组成")]),_._v(" "),t("p",[t("strong",[_._v("Tips: 每个业务模块都可以拥有自己独有的 SDK 依赖和自己独有的 UI 资源 (如果是其他业务模块都可以通用的 SDK 依赖 和 UI 资源 就可以将它们抽离)")])]),_._v(" "),t("h3",{attrs:{id:"_2-2-2-1-业务模块的拆分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-1-业务模块的拆分"}},[_._v("#")]),_._v(" 2.2.2.1 业务模块的拆分")]),_._v(" "),t("p",[_._v("写业务之前先不要急着动手敲码, 应该先根据初期的产品需求到后期的运营规划结合起来清晰的梳理一下业务在未来可能会发生的发展, 确定业务之间的边界, 以及可能会发生的变化, 最后再确定下来真正需要拆分出来的业务模块再进行拆分")]),_._v(" "),t("h3",{attrs:{id:"_2-2-3-基础层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-基础层"}},[_._v("#")]),_._v(" 2.2.3 基础层")]),_._v(" "),t("p",[_._v("基础层位于最底层, 里面又包括"),t("strong",[_._v("核心基础业务模块")]),_._v("、"),t("strong",[_._v("公共服务模块")]),_._v("、"),t("strong",[_._v("基础 SDK 模块")]),_._v(","),t("strong",[_._v("核心基础业务模块")]),_._v("和"),t("strong",[_._v("公共服务模块")]),_._v("主要为业务层的每个模块服务,"),t("strong",[_._v("基础 SDK 模块")]),_._v("含有各种功能强大的团队自行封装的"),t("strong",[_._v("SDK")]),_._v("以及第三方"),t("strong",[_._v("SDK")]),_._v(", 为整个平台的基础设施建设提供动力")]),_._v(" "),t("h3",{attrs:{id:"_2-2-3-1-核心基础业务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-1-核心基础业务"}},[_._v("#")]),_._v(" 2.2.3.1 核心基础业务")]),_._v(" "),t("p",[t("strong",[_._v("核心基础业务")]),_._v("为"),t("strong",[_._v("业务层")]),_._v("的每个业务模块提供一些与业务有关的基础服务, 比如在项目中以用户角色分为 2 个端口, 用户可以扮演多个角色, 但是在线上只能同时操作一个端口的业务, 这时每个端口都必须提供一个角色切换的功能, 以供用户随时在多个角色中切换,")]),_._v(" "),t("p",[_._v("这时在项目中就需要提供一个用于用户自由切换角色的管理类作为"),t("strong",[_._v("核心基础业务")]),_._v("被这 2 个端口所依赖(类似 拉勾, Boss 直聘等"),t("strong",[_._v("App")]),_._v("可以在招聘者和应聘者之间切换)")]),_._v(" "),t("p",[t("strong",[_._v("核心基础业务")]),_._v("的划分应该遵循是否为业务层大部分模块都需要的基础业务, 以及一些需要在各个业务模块之间交互的业务, 都可以划分为"),t("strong",[_._v("核心基础业务")])]),_._v(" "),t("h3",{attrs:{id:"_2-2-3-2-公共服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-2-公共服务"}},[_._v("#")]),_._v(" 2.2.3.2 公共服务")]),_._v(" "),t("p",[t("strong",[_._v("公共服务")]),_._v("是一个名为"),t("strong",[_._v("CommonService")]),_._v("的"),t("strong",[_._v("Module")]),_._v(", 主要的作用是用于"),t("strong",[_._v("业务层")]),_._v("各个模块之间的交互(自定义方法和类的调用), 包含自定义"),t("strong",[_._v("Service")]),_._v("接口, 和可用于跨模块传递的自定义类")]),_._v(" "),t("p",[_._v("主要流程是:")]),_._v(" "),t("p",[_._v("提供服务的业务模块:")]),_._v(" "),t("p",[_._v("在公共服务("),t("strong",[_._v("CommonService")]),_._v(") 中声明"),t("strong",[_._v("Service")]),_._v("接口 (含有需要被调用的自定义方法), 然后在自己的模块中实现这个"),t("strong",[_._v("Service")]),_._v("接口, 再通过"),t("strong",[_._v("ARouter API")]),_._v("暴露实现类")]),_._v(" "),t("p",[_._v("使用服务的业务模块:")]),_._v(" "),t("p",[_._v("通过"),t("strong",[_._v("ARouter")]),_._v("的"),t("strong",[_._v("API")]),_._v("拿到这个"),t("strong",[_._v("Service")]),_._v("接口(多态持有, 实际持有实现类), 即可调用"),t("strong",[_._v("Service")]),_._v("接口中声明的自定义方法, 这样就可以达到模块之间的交互")]),_._v(" "),t("p",[_._v("跨模块传递的自定义类:")]),_._v(" "),t("p",[_._v("在"),t("strong",[_._v("公共服务")]),_._v("中定义需要跨模块传递的自定义类后 ("),t("strong",[_._v("Service")]),_._v("中的自定义方法和"),t("strong",[_._v("EventBus")]),_._v("中的事件实体类都可能需要用到自定义类), 就可以通过"),t("strong",[_._v("ARouter API")]),_._v(", 在各个模块的页面之间跨模块传递这个自定义对象 ("),t("strong",[_._v("ARouter")]),_._v("要求在"),t("strong",[_._v("URL")]),_._v("中使用"),t("strong",[_._v("Json")]),_._v("参数传递自定义对象必须实现"),t("strong",[_._v("SerializationService")]),_._v("接口)")]),_._v(" "),t("p",[t("strong",[_._v("Tips: 建议在 CommonService 中给每个需要提供服务的业务模块都建立一个单独的包, 然后在这个包下放 Service 接口 和 需要跨模块传递的自定义类, 这样更好管理")])]),_._v(" "),t("p",[t("strong",[_._v("掌握公共服务层的用法最好要了解 ARouter 的 API")])]),_._v(" "),t("p",[t("strong",[t("a",{attrs:{href:"https://github.com/alibaba/ARouter",target:"_blank",rel:"noopener noreferrer"}},[_._v("点击查阅 ARouter 文档"),t("OutboundLink")],1)])]),_._v(" "),t("p",[_._v("简单使用：https://www.jianshu.com/p/fb20ab18c4cb?from=timeline&isappinstalled=0")]),_._v(" "),t("h3",{attrs:{id:"_2-2-3-3-基础-sdk"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-3-基础-sdk"}},[_._v("#")]),_._v(" 2.2.3.3 基础 SDK")]),_._v(" "),t("p",[t("strong",[_._v("基础 SDK")]),_._v("是一个名为"),t("strong",[_._v("CommonSDK")]),_._v("的"),t("strong",[_._v("Module")]),_._v(", 其中包含了大量功能强大的"),t("strong",[_._v("SDK")]),_._v(", 提供给整个架构中的所有模块")]),_._v(" "),t("p",[_._v("参考文章 ：http://mp.weixin.qq.com/s/hey2ZcsgucLVEGYJ2qfVWA")]),_._v(" "),t("p",[_._v("文章来自:https://www.jianshu.com/p/f671dd76868f")]),_._v(" "),t("h2",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[_._v("#")]),_._v(" 参考文章")]),_._v(" "),t("ul",[t("li",[_._v("https://www.jianshu.com/p/40e745038471")])])])}),[],!1,null,null,null);v.default=s.exports}}]);