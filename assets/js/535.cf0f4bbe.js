(window.webpackJsonp=window.webpackJsonp||[]).push([[535],{1050:function(t,a,r){"use strict";r.r(a);var e=r(53),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[t._v("本文主要是介绍 Netty-线程模型总结 。")])]),t._v(" "),r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#深入了解netty-线程模型"}},[t._v("深入了解Netty 线程模型")]),r("ul",[r("li",[r("a",{attrs:{href:"#引言"}},[t._v("引言")])]),r("li",[r("a",{attrs:{href:"#_1、传统阻塞io服务模型"}},[t._v("1、传统阻塞IO服务模型")])]),r("li",[r("a",{attrs:{href:"#_2、reactor模型"}},[t._v("2、Reactor模型")])]),r("li",[r("a",{attrs:{href:"#_3、proactor模型"}},[t._v("3、Proactor模型")])]),r("li",[r("a",{attrs:{href:"#总结"}},[t._v("总结")])])])]),r("li",[r("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),r("p"),t._v(" "),r("h2",{attrs:{id:"深入了解netty-线程模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#深入了解netty-线程模型"}},[t._v("#")]),t._v(" 深入了解Netty 线程模型")]),t._v(" "),r("h3",{attrs:{id:"引言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[t._v("#")]),t._v(" 引言")]),t._v(" "),r("p",[t._v("不同的线程模型对程序的性能有很大的影响，Netty是建立在Reactor模型的基础上，要搞清Netty的线程模型，需要了解一目前常见线程模型的一些概念。 具体是进程还是线程，是和平台或者编程语言相关，本文为了描述方便，以线程描述。 目前存在的线程模型有：")]),t._v(" "),r("ul",[r("li",[t._v("传统阻塞IO服务模型")]),t._v(" "),r("li",[t._v("Reactor模型")]),t._v(" "),r("li",[t._v("Proactor模型")])]),t._v(" "),r("h3",{attrs:{id:"_1、传统阻塞io服务模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、传统阻塞io服务模型"}},[t._v("#")]),t._v(" 1、传统阻塞IO服务模型")]),t._v(" "),r("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/framework/netty/nettythread-1.png"),alt:"wxmp"}}),t._v(" "),r("p",[t._v("采用阻塞IO模型获取输入的数据。 每个连接需要独立的完成数据的输入，业务的处理，数据返回。 当并发数大的时候，会创建大量的线程，占用系统资源，如果连接创建后，当前线程没有数据可读，会阻塞，造成线程资源浪费。")]),t._v(" "),r("h3",{attrs:{id:"_2、reactor模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、reactor模型"}},[t._v("#")]),t._v(" 2、Reactor模型")]),t._v(" "),r("p",[t._v("IO多路复用 线程池 = Reactor模型")]),t._v(" "),r("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/framework/netty/nettythread-2.png"),alt:"wxmp"}}),t._v(" "),r("p",[t._v("根据Reactor的数量和处理线程的数量，Reactor模型分为三类：")]),t._v(" "),r("ul",[r("li",[t._v("单Reactor单线程")]),t._v(" "),r("li",[t._v("单Reactor多线程")]),t._v(" "),r("li",[t._v("主从Reactor多线程")])]),t._v(" "),r("p",[t._v("下面分别描述。")]),t._v(" "),r("h4",{attrs:{id:"_2-1、单reactor单线程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、单reactor单线程"}},[t._v("#")]),t._v(" 2.1、单Reactor单线程")]),t._v(" "),r("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/framework/netty/nettythread-3.png"),alt:"wxmp"}}),t._v(" "),r("p",[t._v("图中：")]),t._v(" "),r("ul",[r("li",[t._v("Reactor中的select模块就是IO多路复用模型中的选择器，可以通过一个阻塞对象监听多路连接请求。")]),t._v(" "),r("li",[t._v("Reactor对象通过Select监控客户端请求事件，收到事件后，通过Dispatch进行分发。")]),t._v(" "),r("li",[t._v("如果是"),r("code",[t._v("建立连接")]),t._v("事件，则用Acceptor通过Accept处理连接请求，然后创建一个Handler对象，处理连接完成后的业务处理。")]),t._v(" "),r("li",[t._v("如果不是建立连接事件，则Reactor会分发调用连接对应的Handler处理。")]),t._v(" "),r("li",[t._v("Handler会处理Read-业务-Send流程。")])]),t._v(" "),r("p",[t._v("这种模型，在客户端数量过多时，会无法支撑。因为只有一个线程，无法发挥多核CPU性能，且Handler处理某个连接的业务时，服务端无法处理其他连接事件。 以前在学习Redis原理的时候，发现它内部就是这种模型："),r("a",{attrs:{href:"https://www.clawhub.club/posts/2019/10/16/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Redis/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Redis%E3%80%90%E5%8D%81%E4%BA%8C%E3%80%91Reactor%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%E5%9C%A8Redis%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入了解Redis【十二】Reactor事件模型在Redis中的应用"),r("OutboundLink")],1)]),t._v(" "),r("h4",{attrs:{id:"_2-2、单reactor多线程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、单reactor多线程"}},[t._v("#")]),t._v(" 2.2、单Reactor多线程")]),t._v(" "),r("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/framework/netty/nettythread-4.png"),alt:"wxmp"}}),t._v(" "),r("p",[t._v("图中多线程体现在两个部分：")]),t._v(" "),r("ul",[r("li",[t._v("Reactor主线程 Reactor通过select监听客户请求，如果是"),r("code",[t._v("连接请求")]),t._v("事件，则由Acceptor处理连接，如果是其他请求，则由dispatch找到对应的Handler,这里的Handler只负责响应事件，读取和响应，会将具体的业务处理交由Worker线程池处理。")]),t._v(" "),r("li",[t._v("Worker线程池 Worker线程池会分配独立线程完成真正的业务，并将结果返回给Handler，Handler收到响应后，通过send将结果返回给客户端。")])]),t._v(" "),r("p",[t._v("这里Reactor处理所有的事件监听和响应，高并发情景下容易出现性能瓶颈。")]),t._v(" "),r("h4",{attrs:{id:"_2-3、主从reactor多线程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、主从reactor多线程"}},[t._v("#")]),t._v(" 2.3、主从Reactor多线程")]),t._v(" "),r("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/framework/netty/nettythread-5.png"),alt:"wxmp"}}),t._v(" "),r("p",[t._v("这种模式是对单Reactor的改进，由原来单Reactor改成了Reactor主线程与Reactor子线程。")]),t._v(" "),r("ul",[r("li",[t._v("Reactor主线程的MainReactor对象通过select监听"),r("code",[t._v("连接事件")]),t._v("，收到事件后，通过Acceptor处理连接事件。")]),t._v(" "),r("li",[t._v("当Acceptor处理完连接事件之后，MainReactor将连接分配给SubReactor。")]),t._v(" "),r("li",[t._v("SubReactor将连接加入到连接队列进行监听，并创建handler进行事件处理。")]),t._v(" "),r("li",[t._v("当有新的事件发生时，SubReactor就会调用对应的handler处理。")]),t._v(" "),r("li",[t._v("handler通过read读取数据，交由Worker线程池处理业务。")]),t._v(" "),r("li",[t._v("Worker线程池分配线程处理完数据后，将结果返回给handler。")]),t._v(" "),r("li",[t._v("handler收到返回的数据后，通过send将结果返回给客户端。")]),t._v(" "),r("li",[t._v("MainReactor可以对应多个SubReactor。")])]),t._v(" "),r("p",[t._v("这种优点多多，各个模块各司其职，缺点就是实现复杂。")]),t._v(" "),r("h3",{attrs:{id:"_3、proactor模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、proactor模型"}},[t._v("#")]),t._v(" 3、Proactor模型")]),t._v(" "),r("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/framework/netty/nettythread-6.png"),alt:"wxmp"}}),t._v(" "),r("p",[t._v("Proactor模型在理论上是比Reactor模型性能更好，但是因为依赖于操作系统的非阻塞异步模型，而linux的非阻塞异步模型还不完善，所以还是以Reactor为主。")]),t._v(" "),r("h3",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),r("p",[t._v("在学习这一部分知识的时候，想到redis中Reactor的应用，又想到了以前分析Tomcat源码时，其内部就是这种Reactor的思想。 突然感觉被我发现了一个天大的秘密：技术原理是通用的！")]),t._v(" "),r("h2",{attrs:{id:"参考文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),r("ul",[r("li",[t._v("https://www.yht7.com/news/7974")])])])}),[],!1,null,null,null);a.default=s.exports}}]);