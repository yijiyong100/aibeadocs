(window.webpackJsonp=window.webpackJsonp||[]).push([[559],{1075:function(t,a,s){"use strict";s.r(a);var n=s(53),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("本文主要是介绍 SpringBoot-JPA案例 。")])]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#_1-什么是jpa呢"}},[t._v("1.什么是jpa呢？")])]),s("li",[s("a",{attrs:{href:"#_2-jpa具有什么优势"}},[t._v("2.jpa具有什么优势？")])]),s("li",[s("a",{attrs:{href:"#_3-基于注解的使用"}},[t._v("3.基于注解的使用")]),s("ul",[s("li",[s("a",{attrs:{href:"#_3-1-jpa拥有哪些注解呢"}},[t._v("3.1 JPA拥有哪些注解呢？")])])])]),s("li",[s("a",{attrs:{href:"#_4-代码实战"}},[t._v("4.代码实战")]),s("ul",[s("li",[s("a",{attrs:{href:"#_4-1maven依赖"}},[t._v("4.1maven依赖")])]),s("li",[s("a",{attrs:{href:"#_4-2配置文件"}},[t._v("4.2配置文件")])]),s("li",[s("a",{attrs:{href:"#_4-3创建实体以及数据访问接口"}},[t._v("4.3创建实体以及数据访问接口")])])])]),s("li",[s("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),s("p"),t._v(" "),s("p",[t._v("最近在项目中使用了一下jpa，发现还是挺好用的。这里就来讲一下jpa以及在spring boot中的使用。\n在这里我们先来了解一下jpa。")]),t._v(" "),s("h2",{attrs:{id:"_1-什么是jpa呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是jpa呢"}},[t._v("#")]),t._v(" 1.什么是jpa呢？")]),t._v(" "),s("p",[t._v("JPA顾名思义就是Java Persistence API的意思，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。")]),t._v(" "),s("h2",{attrs:{id:"_2-jpa具有什么优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-jpa具有什么优势"}},[t._v("#")]),t._v(" 2.jpa具有什么优势？")]),t._v(" "),s("ul",[s("li",[t._v("2.1标准化:JPA 是 JCP 组织发布的 Java EE 标准之一，因此任何声称符合 JPA 标准的框架都遵循同样的架构，提供相同的访问API，这保证了基于JPA开发的企业应用能够经过少量的修改就能够在不同的JPA框架下运行。")]),t._v(" "),s("li",[t._v("2.2容器级特性的支持:JPA框架中支持大数据集、事务、并发等容器级事务，这使得 JPA 超越了简单持久化框架的局限，在企业应用发挥更大的作用。")]),t._v(" "),s("li",[t._v("2.3简单方便:JPA的主要目标之一就是提供更加简单的编程模型：在JPA框架下创建实体和创建Java 类一样简单，没有任何的约束和限制，只需要使用 javax.persistence.Entity进行注释，JPA的框架和接口也都非常简单，没有太多特别的规则和设计模式的要求，开发者可以很容易的掌握。JPA基于非侵入式原则设计，因此可以很容易的和其它框架或者容器集成。")]),t._v(" "),s("li",[t._v("2.4查询能力:JPA的查询语言是面向对象而非面向数据库的，它以面向对象的自然语法构造查询语句，可以看成是Hibernate HQL的等价物。JPA定义了独特的JPQL（Java Persistence Query Language），JPQL是EJB QL的一种扩展，它是针对实体的一种查询语言，操作对象是实体，而不是关系数据库的表，而且能够支持批量更新和修改、JOIN、GROUP BY、HAVING 等通常只有 SQL 才能够提供的高级查询特性，甚至还能够支持子查询。")]),t._v(" "),s("li",[t._v("2.4高级特性:JPA 中能够支持面向对象的高级特性，如类之间的继承、多态和类之间的复杂关系，这样的支持能够让开发者最大限度的使用面向对象的模型设计企业应用，而不需要自行处理这些特性在关系数据库的持久化。")])]),t._v(" "),s("h2",{attrs:{id:"_3-基于注解的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-基于注解的使用"}},[t._v("#")]),t._v(" 3.基于注解的使用")]),t._v(" "),s("p",[t._v("本篇只介绍注解的使用，另一种基于xml方式的使用大家有兴趣可以自行了解一下。")]),t._v(" "),s("h3",{attrs:{id:"_3-1-jpa拥有哪些注解呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-jpa拥有哪些注解呢"}},[t._v("#")]),t._v(" 3.1 JPA拥有哪些注解呢？")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("注解")]),t._v(" "),s("th",[t._v("解释")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("@Entity")]),t._v(" "),s("td",[t._v("声明类为实体或表。")])]),t._v(" "),s("tr",[s("td",[t._v("@Table")]),t._v(" "),s("td",[t._v("声明表名。")])]),t._v(" "),s("tr",[s("td",[t._v("@Basic")]),t._v(" "),s("td",[t._v("指定非约束明确的各个字段。")])]),t._v(" "),s("tr",[s("td",[t._v("@Embedded")]),t._v(" "),s("td",[t._v("指定类或它的值是一个可嵌入的类的实例的实体的属性。")])]),t._v(" "),s("tr",[s("td",[t._v("@Id")]),t._v(" "),s("td",[t._v("指定的类的属性，用于识别（一个表中的主键）。")])]),t._v(" "),s("tr",[s("td",[t._v("@GeneratedValue")]),t._v(" "),s("td",[t._v("指定如何标识属性可以被初始化，例如自动、手动、或从序列表中获得的值。")])]),t._v(" "),s("tr",[s("td",[t._v("@Transient")]),t._v(" "),s("td",[t._v("指定的属性，它是不持久的，即：该值永远不会存储在数据库中。")])]),t._v(" "),s("tr",[s("td",[t._v("@Column")]),t._v(" "),s("td",[t._v("指定持久属性栏属性。")])]),t._v(" "),s("tr",[s("td",[t._v("@SequenceGenerator")]),t._v(" "),s("td",[t._v("指定在@GeneratedValue注解中指定的属性的值。它创建了一个序列。")])]),t._v(" "),s("tr",[s("td",[t._v("@TableGenerator")]),t._v(" "),s("td",[t._v("指定在@GeneratedValue批注指定属性的值发生器。它创造了的值生成的表。")])]),t._v(" "),s("tr",[s("td",[t._v("@AccessType")]),t._v(" "),s("td",[t._v("这种类型的注释用于设置访问类型。如果设置@AccessType（FIELD），则可以直接访问变量并且不需要getter和setter，但必须为public。如果设置@AccessType（PROPERTY），通过getter和setter方法访问Entity的变量。")])]),t._v(" "),s("tr",[s("td",[t._v("@JoinColumn")]),t._v(" "),s("td",[t._v("指定一个实体组织或实体的集合。这是用在多对一和一对多关联。")])]),t._v(" "),s("tr",[s("td",[t._v("@UniqueConstraint")]),t._v(" "),s("td",[t._v("指定的字段和用于主要或辅助表的唯一约束。")])]),t._v(" "),s("tr",[s("td",[t._v("@ColumnResult")]),t._v(" "),s("td",[t._v("参考使用select子句的SQL查询中的列名。")])]),t._v(" "),s("tr",[s("td",[t._v("@ManyToMany")]),t._v(" "),s("td",[t._v("定义了连接表之间的多对多一对多的关系。")])]),t._v(" "),s("tr",[s("td",[t._v("@ManyToOne")]),t._v(" "),s("td",[t._v("定义了连接表之间的多对一的关系。")])]),t._v(" "),s("tr",[s("td",[t._v("@OneToMany")]),t._v(" "),s("td",[t._v("定义了连接表之间存在一个一对多的关系。")])]),t._v(" "),s("tr",[s("td",[t._v("@OneToOne")]),t._v(" "),s("td",[t._v("定义了连接表之间有一个一对一的关系。")])]),t._v(" "),s("tr",[s("td",[t._v("@NamedQueries")]),t._v(" "),s("td",[t._v("指定命名查询的列表。")])]),t._v(" "),s("tr",[s("td",[t._v("@NamedQuery")]),t._v(" "),s("td",[t._v("指定使用静态名称的查询。")])])])]),t._v(" "),s("p",[t._v("了解了注解之后我们来看看如何使用吧")]),t._v(" "),s("h2",{attrs:{id:"_4-代码实战"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-代码实战"}},[t._v("#")]),t._v(" 4.代码实战")]),t._v(" "),s("h3",{attrs:{id:"_4-1maven依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1maven依赖"}},[t._v("#")]),t._v(" 4.1maven依赖")]),t._v(" "),s("p",[t._v("添加jpa起步依赖")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[t._v("        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-data-jpa"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("1234\n")])])]),s("h3",{attrs:{id:"_4-2配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2配置文件"}},[t._v("#")]),t._v(" 4.2配置文件")]),t._v(" "),s("p",[t._v("在application.yml文件中添加如下配置")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("spring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/mytest\n    type: com.alibaba.druid.pool.DruidDataSource\n    username: root\n    password: root\n    driver-class-name: com.mysql.jdbc.Driver //驱动\n  jpa:\n    hibernate:\n      ddl-auto: update //自动更新\n    show-sql: true  //日志中显示sql语句1234567891011\njpa.hibernate.ddl-auto是hibernate的配置属性，其主要作用是：自动创建、更新、验证数据库表结构。该参数的几种配置如下：\n    ·create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。\n    ·create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。\n    ·update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。\n    ·validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。\n\n")])])]),s("p",[t._v("以上我们完成了基本的配置工作，记下来看一下如何进行表与实体的映射，以及数据访问接口。")]),t._v(" "),s("h3",{attrs:{id:"_4-3创建实体以及数据访问接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3创建实体以及数据访问接口"}},[t._v("#")]),t._v(" 4.3创建实体以及数据访问接口")]),t._v(" "),s("p",[t._v("首先来看一下实体类Person.java")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Entity")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Getter")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Setter")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Id")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GeneratedValue")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nullable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"agee"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nullable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("接着是PersonRepository.java，改接口只需要继承JpaRepository接口即可。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PersonRepository")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JpaRepository")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("然后写一个rest接口以供测试使用。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RestController")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestMapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"person"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PerconController")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PersonRepository")]),t._v(" personRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@PostMapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"addPerson"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addPerson")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        personRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("save")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@DeleteMapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"deletePerson"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deletePerson")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        personRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("好了，让我们来运行一下程序看看结果吧,启动程序，查询数据库我们就可以看到，JPA以及自动帮我们创建了表")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/framework/orm/jpacase-1.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("接下来我们调用一下addPerson接口。我们使用postman来测试：")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/framework/orm/jpacase-2.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("然后通过查询数据库来看一下结果：")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/framework/orm/jpacase-3.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("我们可以看到成功插入了数据，并且观察表结构可以看到，agee是我们定义的column名称，id为自增。并且从上面的repository接口代码我们可以看到，接口中并没有定义任何的方法，这是因为JpaRepository中帮我们定义了基础的增删改查方法，可以很方便的直接使用。")]),t._v(" "),s("p",[t._v("接下来我们来看一下如何编写自己的方法。我们以根据name查询person为例。添加一个rest接口")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GET")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Produces")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TYPE_JSON"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Path")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"getPerson"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPerson")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@QueryParam")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" personRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findByName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("并在repository接口中添加如下查询方法：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findByName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("p",[t._v("重启之后让我们来看一下查询结果")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/framework/orm/jpacase-4.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("我们可以看到通过name获取到了想要的结果。我们也可以在日志中看到hibernate输出的日志:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("Hibernate: "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" person0_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" id1_0_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" person0_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("agee "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" agee2_0_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" person0_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" name3_0_ "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" person person0_ "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" person0_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("?"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("p",[t._v("那么JPA是通过什么规则来根据方法名生成sql语句查询的呢？\n其实JPA在这里遵循Convention over configuration（约定大约配置）的原则，遵循spring 以及JPQL定义的方法命名。Spring提供了一套可以通过命名规则进行查询构建的机制。这套机制会把方法名首先过滤一些关键字，比如 find…By, read…By, query…By, count…By 和 get…By 。系统会根据关键字将命名解析成2个子语句，第一个 By 是区分这两个子语句的关键词。这个 By 之前的子语句是查询子语句（指明返回要查询的对象），后面的部分是条件子语句。如果直接就是 findBy… 返回的就是定义Respository时指定的领域对象集合，同时JPQL中也定义了丰富的关键字：and、or、Between等等，下面我们来看一下JPQL中有哪些关键字：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Keyword")]),t._v(" "),s("th",[t._v("Sample")]),t._v(" "),s("th",[t._v("JPQL snippet")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("And")]),t._v(" "),s("td",[t._v("findByLastnameAndFirstname")]),t._v(" "),s("td",[t._v("… where x.lastname = ?1 and")])]),t._v(" "),s("tr",[s("td",[t._v("Or")]),t._v(" "),s("td",[t._v("findByLastnameOrFirstname")]),t._v(" "),s("td",[t._v("… where x.lastname = ?1 or x.firstname = ?2")])]),t._v(" "),s("tr",[s("td",[t._v("Is,Equals")]),t._v(" "),s("td",[t._v("findByFirstnameIs,findByFirstnameEquals")]),t._v(" "),s("td",[t._v("… where x.firstname = ?1")])]),t._v(" "),s("tr",[s("td",[t._v("Between")]),t._v(" "),s("td",[t._v("findByStartDateBetween")]),t._v(" "),s("td",[t._v("… where x.startDate between ?1 and ?2")])]),t._v(" "),s("tr",[s("td",[t._v("LessThan")]),t._v(" "),s("td",[t._v("findByAgeLessThan")]),t._v(" "),s("td",[t._v("… where x.age < ?1")])]),t._v(" "),s("tr",[s("td",[t._v("LessThanEqual")]),t._v(" "),s("td",[t._v("findByAgeLessThanEqual")]),t._v(" "),s("td",[t._v("… where x.age ⇐ ?1")])]),t._v(" "),s("tr",[s("td",[t._v("GreaterThan")]),t._v(" "),s("td",[t._v("findByAgeGreaterThan")]),t._v(" "),s("td",[t._v("… where x.age > ?1")])]),t._v(" "),s("tr",[s("td",[t._v("GreaterThanEqual")]),t._v(" "),s("td",[t._v("findByAgeGreaterThanEqual")]),t._v(" "),s("td",[t._v("… where x.age >= ?1")])]),t._v(" "),s("tr",[s("td",[t._v("After")]),t._v(" "),s("td",[t._v("findByStartDateAfter")]),t._v(" "),s("td",[t._v("… where x.startDate > ?1")])]),t._v(" "),s("tr",[s("td",[t._v("Before")]),t._v(" "),s("td",[t._v("findByStartDateBefore")]),t._v(" "),s("td",[t._v("… where x.startDate < ?1")])]),t._v(" "),s("tr",[s("td",[t._v("IsNull")]),t._v(" "),s("td",[t._v("findByAgeIsNull")]),t._v(" "),s("td",[t._v("… where x.age is null")])]),t._v(" "),s("tr",[s("td",[t._v("IsNotNull,NotNull")]),t._v(" "),s("td",[t._v("findByAge(Is)NotNull")]),t._v(" "),s("td",[t._v("… where x.age not null")])]),t._v(" "),s("tr",[s("td",[t._v("Like")]),t._v(" "),s("td",[t._v("findByFirstnameLike")]),t._v(" "),s("td",[t._v("… where x.firstname like ?1")])]),t._v(" "),s("tr",[s("td",[t._v("NotLike")]),t._v(" "),s("td",[t._v("findByFirstnameNotLike")]),t._v(" "),s("td",[t._v("… where x.firstname not like ?1")])]),t._v(" "),s("tr",[s("td",[t._v("StartingWith")]),t._v(" "),s("td",[t._v("findByFirstnameStartingWith")]),t._v(" "),s("td",[t._v("… where x.firstname like ?1 (parameter bound with appended %)")])]),t._v(" "),s("tr",[s("td",[t._v("EndingWith")]),t._v(" "),s("td",[t._v("findByFirstnameEndingWith")]),t._v(" "),s("td",[t._v("… where x.firstname like ?1 (parameter bound with prepended %)")])]),t._v(" "),s("tr",[s("td",[t._v("Containing")]),t._v(" "),s("td",[t._v("findByFirstnameContaining")]),t._v(" "),s("td",[t._v("… where x.firstname like ?1 (parameter bound wrapped in %)")])]),t._v(" "),s("tr",[s("td",[t._v("OrderBy")]),t._v(" "),s("td",[t._v("findByAgeOrderByLastnameDesc")]),t._v(" "),s("td",[t._v("… where x.age = ?1 order by x.lastname desc")])]),t._v(" "),s("tr",[s("td",[t._v("Not")]),t._v(" "),s("td",[t._v("findByLastnameNot")]),t._v(" "),s("td",[t._v("… where x.lastname <> ?1")])]),t._v(" "),s("tr",[s("td",[t._v("In")]),t._v(" "),s("td",[t._v("findByAgeIn(Collection ages)")]),t._v(" "),s("td",[t._v("… where x.age in ?1")])]),t._v(" "),s("tr",[s("td",[t._v("NotIn")]),t._v(" "),s("td",[t._v("findByAgeNotIn(Collection age)")]),t._v(" "),s("td",[t._v("… where x.age not in ?1")])]),t._v(" "),s("tr",[s("td",[t._v("TRUE")]),t._v(" "),s("td",[t._v("findByActiveTrue()")]),t._v(" "),s("td",[t._v("… where x.active = true")])]),t._v(" "),s("tr",[s("td",[t._v("FALSE")]),t._v(" "),s("td",[t._v("findByActiveFalse()")]),t._v(" "),s("td",[t._v("… where x.active = false")])]),t._v(" "),s("tr",[s("td",[t._v("IgnoreCase")]),t._v(" "),s("td",[t._v("findByFirstnameIgnoreCase")]),t._v(" "),s("td",[t._v("… where UPPER(x.firstame) = UPPER(?1)")])]),t._v(" "),s("tr",[s("td",[t._v("……")]),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("p",[t._v("以上就是jpa的简单实用和介绍。")]),t._v(" "),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),s("ul",[s("li",[t._v("https://blog.csdn.net/wujiaqi0921/article/details/78789087")])])])}),[],!1,null,null,null);a.default=e.exports}}]);