(window.webpackJsonp=window.webpackJsonp||[]).push([[639],{1155:function(s,a,v){"use strict";v.r(a);var t=v(53),_=Object(t.a)({},(function(){var s=this,a=s.$createElement,v=s._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),v("p",[s._v("本文主要是介绍 虚拟机优化案例 。")])]),s._v(" "),v("p"),v("div",{staticClass:"table-of-contents"},[v("ul",[v("li",[v("a",{attrs:{href:"#jvm调优工具"}},[s._v("JVM调优工具")])]),v("li",[v("a",{attrs:{href:"#【重点推荐】visualvm"}},[s._v("【重点推荐】VisualVM")])]),v("li",[v("a",{attrs:{href:"#如何调优"}},[s._v("如何调优")])]),v("li",[v("a",{attrs:{href:"#线程监控"}},[s._v("线程监控")])]),v("li",[v("a",{attrs:{href:"#内存泄漏检查"}},[s._v("内存泄漏检查")])]),v("li",[v("a",{attrs:{href:"#jvm内存泄露问题定位案例"}},[s._v("JVM内存泄露问题定位案例")])]),v("li",[v("a",{attrs:{href:"#参考文章"}},[s._v("参考文章")])])])]),v("p"),s._v(" "),v("h2",{attrs:{id:"jvm调优工具"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jvm调优工具"}},[s._v("#")]),s._v(" JVM调优工具")]),s._v(" "),v("p",[v("strong",[s._v("Jconsole，jProfile，VisualVM")])]),s._v(" "),v("p",[v("strong",[s._v("Jconsole :")]),s._v(" jdk自带，功能简单，但是可以在系统有一定负荷的情况下使用。对垃圾回收算法有很详细的跟踪。")]),s._v(" "),v("p",[v("strong",[s._v("JProfiler")]),s._v("：商业软件，需要付费。功能强大。可以自行查看官网文档。")]),s._v(" "),v("p",[v("strong",[s._v("VisualVM")]),s._v("：JDK自带，功能强大，与JProfiler类似。推荐。")]),s._v(" "),v("h2",{attrs:{id:"【重点推荐】visualvm"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#【重点推荐】visualvm"}},[s._v("#")]),s._v(" 【重点推荐】VisualVM")]),s._v(" "),v("p",[s._v("VisualVM 是一个性能分析工具，自从 JDK 6 Update 7 以后已经作为 Oracle JDK 的一部分，位于 JDK 根目录的 bin 文件夹下。相关的安装教程可以自行百度。")]),s._v(" "),v("p",[v("strong",[s._v("【推荐】使用VisualVM 定位内存泄露")]),s._v(" "),v("a",{attrs:{href:"https://www.cnblogs.com/aishangJava/p/7631714.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("案例参考"),v("OutboundLink")],1)]),s._v(" "),v("p",[s._v("https://www.cnblogs.com/aishangJava/p/7631714.html")]),s._v(" "),v("h2",{attrs:{id:"如何调优"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何调优"}},[s._v("#")]),s._v(" 如何调优")]),s._v(" "),v("p",[s._v("观察内存释放情况、集合类检查、对象树")]),s._v(" "),v("p",[s._v("上面这些调优工具都提供了强大的功能，但是总的来说一般分为以下几类功能")]),s._v(" "),v("p",[v("strong",[s._v("堆信息查看")])]),s._v(" "),v("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/java/jvm/optcase-1.png"),alt:"wxmp"}}),s._v(" "),v("p",[s._v("可查看堆空间大小分配（年轻代、年老代、持久代分配）")]),s._v(" "),v("p",[s._v("提供即时的垃圾回收功能")]),s._v(" "),v("p",[s._v("垃圾监控（长时间监控回收情况）")]),s._v(" "),v("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/java/jvm/optcase-2.png"),alt:"wxmp"}}),s._v(" "),v("p",[s._v("查看堆内类、对象信息查看：数量、类型等")]),s._v(" "),v("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/java/jvm/optcase-3.png"),alt:"wxmp"}}),s._v(" "),v("p",[s._v("对象引用情况查看")]),s._v(" "),v("p",[s._v("有了堆信息查看方面的功能，我们一般可以顺利解决以下问题：")]),s._v(" "),v("p",[s._v("--年老代年轻代大小划分是否合理")]),s._v(" "),v("p",[s._v("--内存泄漏")]),s._v(" "),v("p",[s._v("--垃圾回收算法设置是否合理")]),s._v(" "),v("h2",{attrs:{id:"线程监控"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线程监控"}},[s._v("#")]),s._v(" 线程监控")]),s._v(" "),v("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/java/jvm/optcase-4.png"),alt:"wxmp"}}),s._v(" "),v("p",[s._v("线程信息监控：系统线程数量。")]),s._v(" "),v("p",[s._v("线程状态监控：各个线程都处在什么样的状态下")]),s._v(" "),v("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/java/jvm/optcase-5.png"),alt:"wxmp"}}),s._v(" "),v("p",[s._v("Dump线程详细信息：查看线程内部运行情况")]),s._v(" "),v("p",[s._v("死锁检查")]),s._v(" "),v("p",[v("strong",[s._v("热点分析")])]),s._v(" "),v("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/java/jvm/optcase-6.png"),alt:"wxmp"}}),s._v(" "),v("p",[v("strong",[s._v("CPU热点")]),s._v("：检查系统哪些方法占用的大量CPU时间")]),s._v(" "),v("p",[v("strong",[s._v("内存热点")]),s._v("：检查哪些对象在系统中数量最大（一定时间内存活对象和销毁对象一起统计）")]),s._v(" "),v("p",[s._v("这两个东西对于系统优化很有帮助。我们可以根据找到的热点，有针对性的进行系统的瓶颈查找和进行系统优化，而不是漫无目的的进行所有代码的优化。")]),s._v(" "),v("p",[v("strong",[s._v("快照")])]),s._v(" "),v("p",[s._v("快照是系统运行到某一时刻的一个定格。在我们进行调优的时候，不可能用眼睛去跟踪所有系统变化，依赖快照功能，我们就可以进行系统两个不同运行时刻，对象（或类、线程等）的不同，以便快速找到问题")]),s._v(" "),v("p",[s._v("举例说，我要检查系统进行垃圾回收以后，是否还有该收回的对象被遗漏下来的了。那么，我可以在进行垃圾回收前后，分别进行一次堆情况的快照，然后对比两次快照的对象情况。")]),s._v(" "),v("h2",{attrs:{id:"内存泄漏检查"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏检查"}},[s._v("#")]),s._v(" 内存泄漏检查")]),s._v(" "),v("p",[s._v("内存泄漏是比较常见的问题，而且解决方法也比较通用，这里可以重点说一下，而线程、热点方面的问题则是具体问题具体分析了。")]),s._v(" "),v("p",[s._v("内存泄漏一般可以理解为系统资源（各方面的资源，堆、栈、线程等）在错误使用的情况下，导致使用完毕的资源无法回收（或没有回收），从而导致新的资源分配请求无法完成，引起系统错误。")]),s._v(" "),v("p",[s._v("内存泄漏对系统危害比较大，因为他可以直接导致系统的崩溃。")]),s._v(" "),v("p",[s._v("需要区别一下，内存泄漏和系统超负荷两者是有区别的，虽然可能导致的最终结果是一样的。内存泄漏是用完的资源没有回收引起错误，而系统超负荷则是系统确实没有那么多资源可以分配了（其他的资源都在使用）。")]),s._v(" "),v("p",[v("strong",[s._v("年老代堆空间被占满")])]),s._v(" "),v("p",[v("strong",[s._v("异常：")]),s._v(" java.lang.OutOfMemoryError: Java heap space")]),s._v(" "),v("p",[v("strong",[s._v("说明：")])]),s._v(" "),v("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/java/jvm/optcase-7.png"),alt:"wxmp"}}),s._v(" "),v("p",[s._v("这是最典型的内存泄漏方式，简单说就是所有堆空间都被无法回收的垃圾对象占满，虚拟机无法再在分配新空间。")]),s._v(" "),v("p",[s._v("如上图所示，这是非常典型的内存泄漏的垃圾回收情况图。所有峰值部分都是一次垃圾回收点，所有谷底部分表示是一次垃圾回收后剩余的内存。连接所有谷底的点，可以发现一条由底到高的线，这说明，随时间的推移，系统的堆空间被不断占满，最终会占满整个堆空间。因此可以初步认为系统内部可能有内存泄漏。（上面的图仅供示例，在实际情况下收集数据的时间需要更长，比如几个小时或者几天）")]),s._v(" "),v("p",[v("strong",[s._v("解决：")])]),s._v(" "),v("p",[s._v("这种方式解决起来也比较容易，一般就是根据垃圾回收前后情况对比，同时根据对象引用情况（常见的集合对象引用）分析，基本都可以找到泄漏点。")]),s._v(" "),v("p",[v("strong",[s._v("持久代被占满")])]),s._v(" "),v("p",[s._v("**异常：**java.lang.OutOfMemoryError: PermGen space")]),s._v(" "),v("p",[v("strong",[s._v("说明：")])]),s._v(" "),v("p",[s._v("Perm空间被占满。无法为新的class分配存储空间而引发的异常。这个异常以前是没有的，但是在Java反射大量使用的今天这个异常比较常见了。主要原因就是大量动态反射生成的类不断被加载，最终导致Perm区被占满。")]),s._v(" "),v("p",[s._v("更可怕的是，不同的classLoader即便使用了相同的类，但是都会对其进行加载，相当于同一个东西，如果有N个classLoader那么他将会被加载N次。因此，某些情况下，这个问题基本视为无解。当然，存在大量classLoader和大量反射类的情况其实也不多。")]),s._v(" "),v("p",[v("strong",[s._v("解决：")])]),s._v(" "),v("p",[s._v("\\1. -XX:MaxPermSize=16m")]),s._v(" "),v("p",[s._v("\\2. 换用JDK。比如JRocket。")]),s._v(" "),v("p",[v("strong",[s._v("堆栈溢出")])]),s._v(" "),v("p",[s._v("**异常：**java.lang.StackOverflowError")]),s._v(" "),v("p",[s._v("**说明：**这个就不多说了，一般就是递归没返回，或者循环调用造成")]),s._v(" "),v("p",[v("strong",[s._v("线程堆栈满")])]),s._v(" "),v("p",[v("strong",[s._v("异常")]),s._v("：Fatal: Stack size too small")]),s._v(" "),v("p",[v("strong",[s._v("说明")]),s._v("：java中一个线程的空间大小是有限制的。JDK5.0以后这个值是1M。与这个线程相关的数据将会保存在其中。但是当线程空间满了以后，将会出现上面异常。")]),s._v(" "),v("p",[v("strong",[s._v("解决")]),s._v("：增加线程栈大小。-Xss2m。但这个配置无法解决根本问题，还要看代码部分是否有造成泄漏的部分。")]),s._v(" "),v("p",[v("strong",[s._v("系统内存被占满")])]),s._v(" "),v("p",[v("strong",[s._v("异常")]),s._v("：java.lang.OutOfMemoryError: unable to create new native thread")]),s._v(" "),v("p",[v("strong",[s._v("说明")]),s._v("：")]),s._v(" "),v("p",[s._v("这个异常是由于操作系统没有足够的资源来产生这个线程造成的。系统创建线程时，除了要在Java堆中分配内存外，操作系统本身也需要分配资源来创建线程。因此，当线程数量大到一定程度以后，堆中或许还有空间，但是操作系统分配不出资源来了，就出现这个异常了。")]),s._v(" "),v("p",[s._v("分配给Java虚拟机的内存愈多，系统剩余的资源就越少，因此，当系统内存固定时，分配给Java虚拟机的内存越多，那么，系统总共能够产生的线程也就越少，两者成反比的关系。同时，可以通过修改-Xss来减少分配给单个线程的空间，也可以增加系统总共内生产的线程数。")]),s._v(" "),v("p",[v("strong",[s._v("解决：")])]),s._v(" "),v("ol",[v("li",[s._v("重新设计系统减少线程数量。")]),s._v(" "),v("li",[s._v("线程数量不能减少的情况下，通过-Xss减小单个线程大小。以便能生产更多的线程")])]),s._v(" "),v("h2",{attrs:{id:"jvm内存泄露问题定位案例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jvm内存泄露问题定位案例"}},[s._v("#")]),s._v(" JVM内存泄露问题定位案例")]),s._v(" "),v("p",[v("strong",[s._v("【推荐】使用VisualVM 定位内存泄露")]),s._v(" "),v("a",{attrs:{href:"https://www.cnblogs.com/aishangJava/p/7631714.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("案例参考"),v("OutboundLink")],1)]),s._v(" "),v("p",[s._v("https://www.cnblogs.com/aishangJava/p/7631714.html")]),s._v(" "),v("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/java/jvm/optcase-11.png"),alt:"wxmp"}}),s._v(" "),v("img",{staticClass:"zoom-custom-imgs",attrs:{src:s.$withBase("/assets/img/java/jvm/optcase-12.png"),alt:"wxmp"}}),s._v(" "),v("h2",{attrs:{id:"参考文章"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[s._v("#")]),s._v(" 参考文章")]),s._v(" "),v("ul",[v("li",[s._v("https://www.iteye.com/blog/pengjiaheng-552456")]),s._v(" "),v("li",[s._v("https://www.cnblogs.com/aishangJava/p/7631714.html")])])])}),[],!1,null,null,null);a.default=_.exports}}]);