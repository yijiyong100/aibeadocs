(window.webpackJsonp=window.webpackJsonp||[]).push([[730],{1246:function(t,a,_){"use strict";_.r(a);var s=_(53),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),_("p",[t._v("本文主要是介绍 80道经典算法面试题摘选，面试题和相关解答来自网络，难免有纰漏和疏忽，阅读的时候，发现有疑问的地方，建议多方求证，也可以关注原文评论区，也欢迎在本站"),_("a",{attrs:{href:"https://www.yijiyong.com/about/aboutqa.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("【问题反馈页面】"),_("OutboundLink")],1),t._v("留言反馈。")])]),t._v(" "),_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#常见的80道面试算法题摘选"}},[t._v("常见的80道面试算法题摘选")]),_("ul",[_("li",[_("a",{attrs:{href:"#_1-把二元查找树转变成排序的双向链表"}},[t._v("1.把二元查找树转变成排序的双向链表")])]),_("li",[_("a",{attrs:{href:"#_2-设计包含min函数的栈。"}},[t._v("2.设计包含min函数的栈。")])]),_("li",[_("a",{attrs:{href:"#_3-求子数组的最大和"}},[t._v("3.求子数组的最大和")])]),_("li",[_("a",{attrs:{href:"#_4-在二元树中找出和为某一值的所有路径"}},[t._v("4.在二元树中找出和为某一值的所有路径")])]),_("li",[_("a",{attrs:{href:"#_5-查找最小的k个元素"}},[t._v("5.查找最小的k个元素")])]),_("li",[_("a",{attrs:{href:"#第6题"}},[t._v("第6题")])]),_("li",[_("a",{attrs:{href:"#第7题"}},[t._v("第7题")])]),_("li",[_("a",{attrs:{href:"#第8题"}},[t._v("第8题")])]),_("li",[_("a",{attrs:{href:"#第9题"}},[t._v("第9题")])]),_("li",[_("a",{attrs:{href:"#第10题"}},[t._v("第10题")])]),_("li",[_("a",{attrs:{href:"#第11题"}},[t._v("第11题")])]),_("li",[_("a",{attrs:{href:"#第12题"}},[t._v("第12题")])]),_("li",[_("a",{attrs:{href:"#第13题"}},[t._v("第13题：")])]),_("li",[_("a",{attrs:{href:"#第14题"}},[t._v("第14题：")])]),_("li",[_("a",{attrs:{href:"#第15题"}},[t._v("第15题：")])]),_("li",[_("a",{attrs:{href:"#第16题"}},[t._v("第16题：")])]),_("li",[_("a",{attrs:{href:"#第17题"}},[t._v("第17题：")])]),_("li",[_("a",{attrs:{href:"#第18题"}},[t._v("第18题：")])]),_("li",[_("a",{attrs:{href:"#第19题"}},[t._v("第19题：")])]),_("li",[_("a",{attrs:{href:"#第20题"}},[t._v("第20题：")])]),_("li",[_("a",{attrs:{href:"#第21题"}},[t._v("第21题")])]),_("li",[_("a",{attrs:{href:"#第22题"}},[t._v("第22题：")])]),_("li",[_("a",{attrs:{href:"#第23题"}},[t._v("第23题：")])]),_("li",[_("a",{attrs:{href:"#第24题"}},[t._v("第24题：")])]),_("li",[_("a",{attrs:{href:"#第25题"}},[t._v("第25题：")])]),_("li",[_("a",{attrs:{href:"#_26-左旋转字符串"}},[t._v("26.左旋转字符串")])]),_("li",[_("a",{attrs:{href:"#_27-跳台阶问题"}},[t._v("27.跳台阶问题")])]),_("li",[_("a",{attrs:{href:"#_28-整数的二进制表示中1的个数"}},[t._v("28.整数的二进制表示中1的个数")])]),_("li",[_("a",{attrs:{href:"#_29-栈的push、pop序列"}},[t._v("29.栈的push、pop序列")])]),_("li",[_("a",{attrs:{href:"#_30-在从1到n的正数中1出现的次数"}},[t._v("30.在从1到n的正数中1出现的次数")])]),_("li",[_("a",{attrs:{href:"#_31-华为面试题"}},[t._v("31.华为面试题：")])]),_("li",[_("a",{attrs:{href:"#_32-数组元素交换"}},[t._v("32.数组元素交换")])]),_("li",[_("a",{attrs:{href:"#_33-实现一个挺高级的字符匹配算法"}},[t._v("33.实现一个挺高级的字符匹配算法：")])]),_("li",[_("a",{attrs:{href:"#_34-实现一个队列。"}},[t._v("34.实现一个队列。")])]),_("li",[_("a",{attrs:{href:"#_35-求一个矩阵中最大的二维矩阵-元素和最大-如"}},[t._v("35.求一个矩阵中最大的二维矩阵(元素和最大).如:")])]),_("li",[_("a",{attrs:{href:"#_36-引用自网友-longzuo"}},[t._v("36.引用自网友：longzuo")])]),_("li",[_("a",{attrs:{href:"#_37-字符串匹配"}},[t._v("37.字符串匹配")])]),_("li",[_("a",{attrs:{href:"#_38-百度面试"}},[t._v("38.百度面试：")])]),_("li",[_("a",{attrs:{href:"#_39-网易有道笔试"}},[t._v("39.网易有道笔试：")])]),_("li",[_("a",{attrs:{href:"#_40-百度研发笔试题"}},[t._v("40.百度研发笔试题")])]),_("li",[_("a",{attrs:{href:"#_41-求固晶机的晶元查找程序"}},[t._v("41.求固晶机的晶元查找程序")])]),_("li",[_("a",{attrs:{href:"#_42-请修改append函数-利用这个函数实现"}},[t._v("42.请修改append函数，利用这个函数实现：")])]),_("li",[_("a",{attrs:{href:"#_43-递归和非递归俩种方法实现二叉树的前序遍历。"}},[t._v("43.递归和非递归俩种方法实现二叉树的前序遍历。")])]),_("li",[_("a",{attrs:{href:"#_44-腾讯面试题"}},[t._v("44.腾讯面试题：")])]),_("li",[_("a",{attrs:{href:"#_45-雅虎"}},[t._v("45.雅虎：")])]),_("li",[_("a",{attrs:{href:"#_46-搜狐"}},[t._v("46.搜狐：")])]),_("li",[_("a",{attrs:{href:"#_47-创新工场"}},[t._v("47.创新工场：")])]),_("li",[_("a",{attrs:{href:"#_48-微软"}},[t._v("48.微软：")])]),_("li",[_("a",{attrs:{href:"#_49-一道看上去很吓人的算法面试题"}},[t._v("49.一道看上去很吓人的算法面试题：")])]),_("li",[_("a",{attrs:{href:"#_50-网易有道笔试"}},[t._v("50.网易有道笔试：")])]),_("li",[_("a",{attrs:{href:"#_51-和为n连续正数序列。"}},[t._v("51.和为n连续正数序列。")])]),_("li",[_("a",{attrs:{href:"#_52-二元树的深度。"}},[t._v("52.二元树的深度。")])]),_("li",[_("a",{attrs:{href:"#_53-字符串的排列。"}},[t._v("53.字符串的排列。")])]),_("li",[_("a",{attrs:{href:"#_54-调整数组顺序使奇数位于偶数前面。"}},[t._v("54.调整数组顺序使奇数位于偶数前面。")])]),_("li",[_("a",{attrs:{href:"#_55-类cmystring"}},[t._v("55.类CMyString")])]),_("li",[_("a",{attrs:{href:"#_56-最长公共字串。"}},[t._v("56.最长公共字串。")])]),_("li",[_("a",{attrs:{href:"#_57-用俩个栈实现队列。"}},[t._v("57.用俩个栈实现队列。")])]),_("li",[_("a",{attrs:{href:"#_58-从尾到头输出链表。"}},[t._v("58.从尾到头输出链表。")])]),_("li",[_("a",{attrs:{href:"#_59-不能被继承的类。"}},[t._v("59.不能被继承的类。")])]),_("li",[_("a",{attrs:{href:"#_60-在o-1-时间内删除链表结点。"}},[t._v("60.在O（1）时间内删除链表结点。")])]),_("li",[_("a",{attrs:{href:"#_61-找出数组中两个只出现一次的数字"}},[t._v("61.找出数组中两个只出现一次的数字")])]),_("li",[_("a",{attrs:{href:"#_62-找出链表的第一个公共结点。"}},[t._v("62.找出链表的第一个公共结点。")])]),_("li",[_("a",{attrs:{href:"#_63-在字符串中删除特定的字符。"}},[t._v("63.在字符串中删除特定的字符。")])]),_("li",[_("a",{attrs:{href:"#_64-寻找丑数。"}},[t._v("64. 寻找丑数。")])]),_("li",[_("a",{attrs:{href:"#_65-输出1到最大的n位数"}},[t._v("65.输出1到最大的N位数")])]),_("li",[_("a",{attrs:{href:"#_66-颠倒栈。"}},[t._v("66.颠倒栈。")])]),_("li",[_("a",{attrs:{href:"#_67-俩个闲玩娱乐。"}},[t._v("67.俩个闲玩娱乐。")])]),_("li",[_("a",{attrs:{href:"#_68-把数组排成最小的数。"}},[t._v("68.把数组排成最小的数。")])]),_("li",[_("a",{attrs:{href:"#_69-旋转数组中的最小元素。"}},[t._v("69.旋转数组中的最小元素。")])]),_("li",[_("a",{attrs:{href:"#_70-给出一个函数来输出一个字符串的所有排列。"}},[t._v("70.给出一个函数来输出一个字符串的所有排列。")])]),_("li",[_("a",{attrs:{href:"#_71-数值的整数次方。"}},[t._v("71.数值的整数次方。")])]),_("li",[_("a",{attrs:{href:"#_72-单例类"}},[t._v("72. 单例类")])]),_("li",[_("a",{attrs:{href:"#_73-对策字符串的最大长度。"}},[t._v("73.对策字符串的最大长度。")])]),_("li",[_("a",{attrs:{href:"#_74-数组中超过出现次数超过一半的数字"}},[t._v("74.数组中超过出现次数超过一半的数字")])]),_("li",[_("a",{attrs:{href:"#_75-二叉树两个结点的最低共同父结点"}},[t._v("75.二叉树两个结点的最低共同父结点")])]),_("li",[_("a",{attrs:{href:"#_76-复杂链表的复制"}},[t._v("76.复杂链表的复制")])]),_("li",[_("a",{attrs:{href:"#_77-关于链表问题的面试题目如下"}},[t._v("77.关于链表问题的面试题目如下：")])]),_("li",[_("a",{attrs:{href:"#_78-链表和数组的区别在哪里"}},[t._v("78.链表和数组的区别在哪里？")])]),_("li",[_("a",{attrs:{href:"#_79-链表、数组算法"}},[t._v("79.链表、数组算法")])]),_("li",[_("a",{attrs:{href:"#_80-阿里巴巴一道笔试题"}},[t._v("80.阿里巴巴一道笔试题")])])])]),_("li",[_("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),_("p"),t._v(" "),_("h2",{attrs:{id:"常见的80道面试算法题摘选"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常见的80道面试算法题摘选"}},[t._v("#")]),t._v(" 常见的80道面试算法题摘选")]),t._v(" "),_("p",[t._v("转自： http://hi.baidu.com/geogre_jsj/blog/item/e4b98fd2aab5aa3611df9b92.html")]),t._v(" "),_("p",[t._v("由于这些题，实在太火了。所以，应广大网友建议要求，在此把之前已整理公布的前80题，")]),t._v(" "),_("p",[t._v("现在，一次性分享出来。此也算是前80题第一次集体亮相。")]),t._v(" "),_("p",[t._v("此些题，已有上万人，看到或见识到，若私自据为己有，必定为有知之人识破，付出代价。")]),t._v(" "),_("p",[t._v("所以，作者声明：")]),t._v(" "),_("p",[t._v("本人July对以上所有任何内容和资料享有版权，转载请注明作者本人July出处。")]),t._v(" "),_("p",[t._v("向你的厚道致敬。谢谢。")]),t._v(" "),_("p",[t._v("----------------------------------------------------------------------------------------------------------------")]),t._v(" "),_("h3",{attrs:{id:"_1-把二元查找树转变成排序的双向链表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-把二元查找树转变成排序的双向链表"}},[t._v("#")]),t._v(" 1.把二元查找树转变成排序的双向链表")]),t._v(" "),_("p",[t._v("题目：")]),t._v(" "),_("p",[t._v("输入一棵二元查找树，将该二元查找树转换成一个排序的双向链表。")]),t._v(" "),_("p",[t._v("要求不能创建任何新的结点，只调整指针的指向。")]),t._v(" "),_("p",[t._v("10")]),t._v(" "),_("p",[t._v("/ \\")]),t._v(" "),_("p",[t._v("6 14")]),t._v(" "),_("p",[t._v("/ \\ / \\")]),t._v(" "),_("p",[t._v("4 8 12 16")]),t._v(" "),_("p",[t._v("转换成双向链表")]),t._v(" "),_("p",[t._v("4=6=8=10=12=14=16。")]),t._v(" "),_("p",[t._v("首先我们定义的二元查找树 节点的数据结构如下：")]),t._v(" "),_("div",{staticClass:"language-cpp extra-class"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BSTreeNode")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m_nValue"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// value of node")]),t._v("\n\n BSTreeNode "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("m_pLeft"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// left child of node")]),t._v("\n\n BSTreeNode "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("m_pRight"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// right child of node")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("h3",{attrs:{id:"_2-设计包含min函数的栈。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-设计包含min函数的栈。"}},[t._v("#")]),t._v(" 2.设计包含min函数的栈。")]),t._v(" "),_("p",[t._v("定义栈的数据结构，要求添加一个min函数，能够得到栈的最小元素。")]),t._v(" "),_("p",[t._v("要求函数min、push以及pop的时间复杂度都是O(1)。")]),t._v(" "),_("h3",{attrs:{id:"_3-求子数组的最大和"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-求子数组的最大和"}},[t._v("#")]),t._v(" 3.求子数组的最大和")]),t._v(" "),_("p",[t._v("题目：")]),t._v(" "),_("p",[t._v("输入一个整形数组，数组里有正数也有负数。")]),t._v(" "),_("p",[t._v("数组中连续的一个或多个整数组成一个子数组，每个子数组都有一个和。")]),t._v(" "),_("p",[t._v("求所有子数组的和的最大值。要求时间复杂度为O(n)。")]),t._v(" "),_("p",[t._v("例如输入的数组为1, -2, 3, 10, -4, 7, 2, -5，和最大的子数组为3, 10, -4, 7, 2，")]),t._v(" "),_("p",[t._v("因此输出为该子数组的和18。")]),t._v(" "),_("h3",{attrs:{id:"_4-在二元树中找出和为某一值的所有路径"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-在二元树中找出和为某一值的所有路径"}},[t._v("#")]),t._v(" 4.在二元树中找出和为某一值的所有路径")]),t._v(" "),_("p",[t._v("题目：输入一个整数和一棵二元树。")]),t._v(" "),_("p",[t._v("从树的根结点开始往下访问一直到叶结点所经过的所有结点形成一条路径。")]),t._v(" "),_("p",[t._v("打印出和与输入整数相等的所有路径。")]),t._v(" "),_("p",[t._v("例如 输入整数22和如下二元树")]),t._v(" "),_("p",[t._v("10")]),t._v(" "),_("p",[t._v("/ \\")]),t._v(" "),_("p",[t._v("5 12")]),t._v(" "),_("p",[t._v("/  \\")]),t._v(" "),_("p",[t._v("4   7")]),t._v(" "),_("p",[t._v("则打印出两条路径：10, 12和10, 5, 7。")]),t._v(" "),_("p",[t._v("二元树节点的数据结构定义为：")]),t._v(" "),_("div",{staticClass:"language-cpp extra-class"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryTreeNode")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a node in the binary tree")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m_nValue"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// value of node")]),t._v("\n\nBinaryTreeNode "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("m_pLeft"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// left child of node")]),t._v("\n\nBinaryTreeNode "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("m_pRight"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// right child of node")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),_("h3",{attrs:{id:"_5-查找最小的k个元素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-查找最小的k个元素"}},[t._v("#")]),t._v(" 5.查找最小的k个元素")]),t._v(" "),_("p",[t._v("题目：输入n个整数，输出其中最小的k个。")]),t._v(" "),_("p",[t._v("例如输入1，2，3，4，5，6，7和8这8个数字，则最小的4个数字为1，2，3和4。")]),t._v(" "),_("h3",{attrs:{id:"第6题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第6题"}},[t._v("#")]),t._v(" 第6题")]),t._v(" "),_("p",[t._v("腾讯面试题：")]),t._v(" "),_("p",[t._v("给你10分钟时间，根据上排给出十个数，在其下排填出对应的十个数")]),t._v(" "),_("p",[t._v("要求下排每个数都是先前上排那十个数在下排出现的次数。")]),t._v(" "),_("p",[t._v("上排的十个数如下：")]),t._v(" "),_("p",[t._v("【0，1，2，3，4，5，6，7，8，9】")]),t._v(" "),_("p",[t._v("举一个例子，")]),t._v(" "),_("p",[t._v("数值: 0,1,2,3,4,5,6,7,8,9")]),t._v(" "),_("p",[t._v("分配: 6,2,1,0,0,0,1,0,0,0")]),t._v(" "),_("p",[t._v("0在下排出现了6次，1在下排出现了2次，")]),t._v(" "),_("p",[t._v("2在下排出现了1次，3在下排出现了0次....")]),t._v(" "),_("p",[t._v("以此类推..")]),t._v(" "),_("h3",{attrs:{id:"第7题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第7题"}},[t._v("#")]),t._v(" 第7题")]),t._v(" "),_("p",[t._v("微软亚院之编程判断俩个链表是否相交")]),t._v(" "),_("p",[t._v("给出俩个单向链表的头指针，比如h1，h2，判断这俩个链表是否相交。")]),t._v(" "),_("p",[t._v("为了简化问题，我们假设俩个链表均不带环。")]),t._v(" "),_("p",[t._v("问题扩展：")]),t._v(" "),_("p",[t._v("1.如果链表可能有环列?")]),t._v(" "),_("p",[t._v("2.如果需要求出俩个链表相交的第一个节点列?")]),t._v(" "),_("h3",{attrs:{id:"第8题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第8题"}},[t._v("#")]),t._v(" 第8题")]),t._v(" "),_("p",[t._v("此贴选一些 比较怪的题，，由于其中题目本身与算法关系不大，仅考考思维。特此并作一题。")]),t._v(" "),_("p",[t._v("1.有两个房间，一间房里有三盏灯，另一间房有控制着三盏灯的三个开关，")]),t._v(" "),_("p",[t._v("这两个房间是 分割开的，从一间里不能看到另一间的情况。")]),t._v(" "),_("p",[t._v("现在要求受训者分别进这两房间一次，然后判断出这三盏灯分别是由哪个开关控制的。")]),t._v(" "),_("p",[t._v("有什么办法呢？")]),t._v(" "),_("p",[t._v("2.你让一些人为你工作了七天，你要用一根金条作为报酬。金条被分成七小块，每天给出一块。")]),t._v(" "),_("p",[t._v("如果你只能将金条切割两次，你怎样分给这些工人?")]),t._v(" "),_("p",[t._v("3.　★用一种算法来颠倒一个链接表的顺序。现在在不用递归式的情况下做一遍。")]),t._v(" "),_("p",[t._v("★用一种算法在一个循环的链接表里插入一个节点，但不得穿越链接表。")]),t._v(" "),_("p",[t._v("★用一种算法整理一个数组。你为什么选择这种方法?")]),t._v(" "),_("p",[t._v("★用一种算法使通用字符串相匹配。")]),t._v(" "),_("p",[t._v("★颠倒一个字符串。优化速度。优化空间。")]),t._v(" "),_("p",[t._v("★颠倒一个句子中的词的顺序，比如将“我叫克丽丝”转换为“克丽丝叫我”，")]),t._v(" "),_("p",[t._v("实现速度最快，移动最少。")]),t._v(" "),_("p",[t._v("★找到一个子字符串。优化速度。优化空间。")]),t._v(" "),_("p",[t._v("★比较两个字符串，用O(n)时间和恒量空间。")]),t._v(" "),_("p",[t._v("★假设你有一个用1001个整数组成的数组，这些整数是任意排列的，但是你知道所有的整数都在1到1000(包括1000)之间。此外，除一个数字出现 两次外，其他所有数字只出现一次。假设你只能对这个数组做一次处理，用一种算法找出重复的那个数字。如果你在运算中使用了辅助的存储方式，那么你能找到不 用这种方式的算法吗?")]),t._v(" "),_("p",[t._v("★不用乘法或加法增加8倍。现在用同样的方法增加7倍。")]),t._v(" "),_("h3",{attrs:{id:"第9题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第9题"}},[t._v("#")]),t._v(" 第9题")]),t._v(" "),_("p",[t._v("判断整数序列是不是二元查找树的后序遍历结果")]),t._v(" "),_("p",[t._v("题目：输入一个整数数组，判断该数组是不是某二元查找树的后序遍历的结果。")]),t._v(" "),_("p",[t._v("如果是返回true，否则返回false。")]),t._v(" "),_("p",[t._v("例如输入5、7、6、9、11、10、8，由于这一整数序列是如下树的后序遍历结果：")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("8\n")])])]),_("p",[t._v("/ \\")]),t._v(" "),_("p",[t._v("6  10")]),t._v(" "),_("p",[t._v("/ \\ / \\")]),t._v(" "),_("p",[t._v("5 7 9 11")]),t._v(" "),_("p",[t._v("因此返回true。")]),t._v(" "),_("p",[t._v("如果输入7、4、6、5，没有哪棵树的后序遍历的结果是这个序列，因此返回false。")]),t._v(" "),_("h3",{attrs:{id:"第10题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第10题"}},[t._v("#")]),t._v(" 第10题")]),t._v(" "),_("p",[t._v("翻转句子中单词的顺序。")]),t._v(" "),_("p",[t._v("题目：输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。")]),t._v(" "),_("p",[t._v("句子中单词以空格符隔开。为简单起见，标点符号和普通字母一样处理。")]),t._v(" "),_("p",[t._v("例如输入“I am a student.”，则输出“student. a am I”。")]),t._v(" "),_("h3",{attrs:{id:"第11题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第11题"}},[t._v("#")]),t._v(" 第11题")]),t._v(" "),_("p",[t._v("求二叉树中节点的最大距离...")]),t._v(" "),_("p",[t._v("如果我们把二叉树看成一个图，父子节点之间的连线看成是双向的，")]),t._v(" "),_("p",[t._v('我们姑且定义"距离"为两节点之间边的个数。')]),t._v(" "),_("p",[t._v("写一个程序，")]),t._v(" "),_("p",[t._v("求一棵二叉树中相距最远的两个节点之间的距离。")]),t._v(" "),_("h3",{attrs:{id:"第12题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第12题"}},[t._v("#")]),t._v(" 第12题")]),t._v(" "),_("p",[t._v("题目：求1+2+…+n，")]),t._v(" "),_("p",[t._v("要求不能使用乘除法、for、while、if、else、switch、case等关键字以及条件判断语句（A?B:C）。")]),t._v(" "),_("h3",{attrs:{id:"第13题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第13题"}},[t._v("#")]),t._v(" 第13题：")]),t._v(" "),_("p",[t._v("题目：输入一个单向链表，输出该链表中倒数第k个结点。链表的倒数第0个结点为链表的尾指针。")]),t._v(" "),_("p",[t._v("链表结点定义如下：")]),t._v(" "),_("div",{staticClass:"language-cpp extra-class"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m_nKey"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n ListNode"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" m_pNext"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("h3",{attrs:{id:"第14题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第14题"}},[t._v("#")]),t._v(" 第14题：")]),t._v(" "),_("p",[t._v("题目：输入一个已经按升序排序过的数组和一个数字，")]),t._v(" "),_("p",[t._v("在数组中查找两个数，使得它们的和正好是输入的那个数字。")]),t._v(" "),_("p",[t._v("要求时间复杂度是O(n)。如果有多对数字的和等于输入的数字，输出任意一对即可。")]),t._v(" "),_("p",[t._v("例如输入数组1、2、4、7、11、15和数字15。由于4+11=15，因此输出4和11。")]),t._v(" "),_("h3",{attrs:{id:"第15题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第15题"}},[t._v("#")]),t._v(" 第15题：")]),t._v(" "),_("p",[t._v("题目：输入一颗二元查找树，将该树转换为它的镜像，")]),t._v(" "),_("p",[t._v("即在转换后的二元查找树中，左子树的结点都大于右子树的结点。")]),t._v(" "),_("p",[t._v("用递归和循环两种方法完成树的镜像转换。")]),t._v(" "),_("p",[t._v("例如输入：")]),t._v(" "),_("p",[t._v("8")]),t._v(" "),_("p",[t._v("/ \\")]),t._v(" "),_("p",[t._v("6 10")]),t._v(" "),_("p",[t._v("/\\ /\\")]),t._v(" "),_("p",[t._v("5 7 9 11")]),t._v(" "),_("p",[t._v("输出：")]),t._v(" "),_("p",[t._v("8")]),t._v(" "),_("p",[t._v("/ \\")]),t._v(" "),_("p",[t._v("10 6")]),t._v(" "),_("p",[t._v("/\\ /\\")]),t._v(" "),_("p",[t._v("11 9 7 5")]),t._v(" "),_("p",[t._v("定义二元查找树的结点为：")]),t._v(" "),_("div",{staticClass:"language-cpp extra-class"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BSTreeNode")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a node in the binary search tree (BST)")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m_nValue"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// value of node")]),t._v("\n\n BSTreeNode "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("m_pLeft"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// left child of node")]),t._v("\n\n BSTreeNode "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("m_pRight"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// right child of node")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("h3",{attrs:{id:"第16题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第16题"}},[t._v("#")]),t._v(" 第16题：")]),t._v(" "),_("p",[t._v("题目（微软）：")]),t._v(" "),_("p",[t._v("输入一颗二元树，从上往下按层打印树的每个结点，同一层中按照从左往右的顺序打印。")]),t._v(" "),_("p",[t._v("例如输入")]),t._v(" "),_("p",[t._v("8")]),t._v(" "),_("p",[t._v("/ \\")]),t._v(" "),_("p",[t._v("6 10")]),t._v(" "),_("p",[t._v("/ \\ / \\")]),t._v(" "),_("p",[t._v("5 7 9 11")]),t._v(" "),_("p",[t._v("输出8 6 10 5 7 9 11。")]),t._v(" "),_("h3",{attrs:{id:"第17题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第17题"}},[t._v("#")]),t._v(" 第17题：")]),t._v(" "),_("p",[t._v("题目：在一个字符串中找到第一个只出现一次的字符。如输入abaccdeff，则输出b。")]),t._v(" "),_("p",[t._v("分析：这道题是2006年google的一道笔试题。")]),t._v(" "),_("h3",{attrs:{id:"第18题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第18题"}},[t._v("#")]),t._v(" 第18题：")]),t._v(" "),_("p",[t._v("题目：n个数字（0,1,…,n-1）形成一个圆圈，从数字0开始，")]),t._v(" "),_("p",[t._v("每次从这个圆圈中删除第m个数字（第一个为当前数字本身，第二个为当前数字的下一个数字）。")]),t._v(" "),_("p",[t._v("当一个数字删除后，从被删除数字的下一个继续删除第m个数字。")]),t._v(" "),_("p",[t._v("求出在这个圆圈中剩下的最后一个数字。")]),t._v(" "),_("p",[t._v("July：我想，这个题目，不少人已经 见识过了。")]),t._v(" "),_("h3",{attrs:{id:"第19题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第19题"}},[t._v("#")]),t._v(" 第19题：")]),t._v(" "),_("p",[t._v("题目：定义Fibonacci数列如下：")]),t._v(" "),_("p",[t._v("/ 0 n=0")]),t._v(" "),_("p",[t._v("f(n)= 1 n=1")]),t._v(" "),_("p",[t._v("\\ f(n-1)+f(n-2) n=2")]),t._v(" "),_("p",[t._v("输入n，用最快的方法求该数列的第n项。")]),t._v(" "),_("p",[t._v("分析：在很多C语言教科书中讲到递归函数的时候，都会用Fibonacci作为例子。")]),t._v(" "),_("p",[t._v("因此很多程序员对这道题的递归解法非常熟悉，但....呵呵，你知道的。。")]),t._v(" "),_("h3",{attrs:{id:"第20题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第20题"}},[t._v("#")]),t._v(" 第20题：")]),t._v(" "),_("p",[t._v("题目：输入一个表示整数的字符串，把该字符串转换成整数并输出。")]),t._v(" "),_("p",[t._v('例如输入字符串"345"，则输出整数345。')]),t._v(" "),_("h3",{attrs:{id:"第21题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第21题"}},[t._v("#")]),t._v(" 第21题")]),t._v(" "),_("p",[t._v("2010年中兴面试题")]),t._v(" "),_("p",[t._v("编程求解：")]),t._v(" "),_("p",[t._v("输入两个整数 n 和 m，从数列1，2，3.......n 中 随意取几个数,")]),t._v(" "),_("p",[t._v("使其和等于 m ,要求将其中所有的可能组合列出来.")]),t._v(" "),_("h3",{attrs:{id:"第22题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第22题"}},[t._v("#")]),t._v(" 第22题：")]),t._v(" "),_("p",[t._v("有4张红色的牌和4张蓝色的牌，主持人先拿任意两张，再分别在A、B、C三人额头上贴任意两张牌，")]),t._v(" "),_("p",[t._v("A、B、C三人都可以看见其余两人额头上的牌，看完后让他们猜自己额头上是什么颜色的牌，")]),t._v(" "),_("p",[t._v("A说不知道，B说不知道，C说不知道，然后A说知道了。")]),t._v(" "),_("p",[t._v("请教如何推理，A是怎么知道的。")]),t._v(" "),_("p",[t._v("如果用程序，又怎么实现呢？")]),t._v(" "),_("h3",{attrs:{id:"第23题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第23题"}},[t._v("#")]),t._v(" 第23题：")]),t._v(" "),_("p",[t._v('用最简单，最快速的方法计算出下面这个圆形是否和正方形相交。"')]),t._v(" "),_("p",[t._v("3D坐标系 原点(0.0,0.0,0.0)")]),t._v(" "),_("p",[t._v("圆形:")]),t._v(" "),_("p",[t._v("半径r = 3.0")]),t._v(" "),_("p",[t._v("圆心o = ("),_("em",[t._v(".")]),t._v(", 0.0, "),_("em",[t._v(".")]),t._v(")")]),t._v(" "),_("p",[t._v("正方形:")]),t._v(" "),_("p",[t._v("4个角坐标;")]),t._v(" "),_("p",[t._v("1:("),_("em",[t._v(".")]),t._v(", 0.0, "),_("em",[t._v(".")]),t._v(")")]),t._v(" "),_("p",[t._v("2:("),_("em",[t._v(".")]),t._v(", 0.0, "),_("em",[t._v(".")]),t._v(")")]),t._v(" "),_("p",[t._v("3:("),_("em",[t._v(".")]),t._v(", 0.0, "),_("em",[t._v(".")]),t._v(")")]),t._v(" "),_("p",[t._v("4:("),_("em",[t._v(".")]),t._v(", 0.0, "),_("em",[t._v(".")]),t._v(")")]),t._v(" "),_("h3",{attrs:{id:"第24题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第24题"}},[t._v("#")]),t._v(" 第24题：")]),t._v(" "),_("p",[t._v("链表操作，")]),t._v(" "),_("p",[t._v("（1）.单链表就地逆置，")]),t._v(" "),_("p",[t._v("（2）合并链表")]),t._v(" "),_("h3",{attrs:{id:"第25题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第25题"}},[t._v("#")]),t._v(" 第25题：")]),t._v(" "),_("p",[t._v("写一个函数,它的原形是int continumax(char *outputstr,char *intputstr)")]),t._v(" "),_("p",[t._v("功能：")]),t._v(" "),_("p",[t._v("在字符串中找出连续最长的数字串，并把这个串的长度返回，")]),t._v(" "),_("p",[t._v("并把这个最长数字串付给其中一个函数参数outputstr所指内存。")]),t._v(" "),_("p",[t._v('例如："abcd12345ed125ss123456789"的首地址传给intputstr后，函数将返回9，')]),t._v(" "),_("p",[t._v("outputstr所指的值为123456789")]),t._v(" "),_("h3",{attrs:{id:"_26-左旋转字符串"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_26-左旋转字符串"}},[t._v("#")]),t._v(" 26.左旋转字符串")]),t._v(" "),_("p",[t._v("题目：")]),t._v(" "),_("p",[t._v("定义字符串的左旋转操作：把字符串前面的若干个字符移动到字符串的尾部。")]),t._v(" "),_("p",[t._v("如把字符串abcdef左旋转2位得到字符串cdefab。请实现字符串左旋转的函数。")]),t._v(" "),_("p",[t._v("要求时间对长度为n的字符串操作的复杂度为O(n)，辅助内存为O(1)。")]),t._v(" "),_("h3",{attrs:{id:"_27-跳台阶问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_27-跳台阶问题"}},[t._v("#")]),t._v(" 27.跳台阶问题")]),t._v(" "),_("p",[t._v("题目：一个台阶总共有n级，如果一次可以跳1级，也可以跳2级。")]),t._v(" "),_("p",[t._v("求总共有多少总跳法，并分析算法的时间复杂度。")]),t._v(" "),_("p",[t._v("这道题最近经常出现，包括MicroStrategy等比较重视算法的公司")]),t._v(" "),_("p",[t._v("都曾先后选用过个这道题作为面试题或者笔试题。")]),t._v(" "),_("h3",{attrs:{id:"_28-整数的二进制表示中1的个数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_28-整数的二进制表示中1的个数"}},[t._v("#")]),t._v(" 28.整数的二进制表示中1的个数")]),t._v(" "),_("p",[t._v("题目：输入一个整数，求该整数的二进制表达中有多少个1。")]),t._v(" "),_("p",[t._v("例如输入10，由于其二进制表示为1010，有两个1，因此输出2。")]),t._v(" "),_("p",[t._v("分析：")]),t._v(" "),_("p",[t._v("这是一道很基本的考查位运算的面试题。")]),t._v(" "),_("p",[t._v("包括微软在内的很多公司都曾采用过这道题。")]),t._v(" "),_("h3",{attrs:{id:"_29-栈的push、pop序列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_29-栈的push、pop序列"}},[t._v("#")]),t._v(" 29.栈的push、pop序列")]),t._v(" "),_("p",[t._v("题目：输入两个整数序列。其中一个序列表示栈的push顺序，")]),t._v(" "),_("p",[t._v("判断另一个序列有没有可能是对应的pop顺序。")]),t._v(" "),_("p",[t._v("为了简单起见，我们假设push序列的任意两个整数都是不相等的。")]),t._v(" "),_("p",[t._v("比如输入的push序列是1、2、3、4、5，那么4、5、3、2、1就有可能是一个pop系列。")]),t._v(" "),_("p",[t._v("因为可以有如下的push和pop序列：")]),t._v(" "),_("p",[t._v("push 1，push 2，push 3，push 4，pop，push 5，pop，pop，pop，pop，")]),t._v(" "),_("p",[t._v("这样得到的pop序列就是4、5、3、2、1。")]),t._v(" "),_("p",[t._v("但序列4、3、5、1、2就不可能是push序列1、2、3、4、5的pop序列。")]),t._v(" "),_("h3",{attrs:{id:"_30-在从1到n的正数中1出现的次数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_30-在从1到n的正数中1出现的次数"}},[t._v("#")]),t._v(" 30.在从1到n的正数中1出现的次数")]),t._v(" "),_("p",[t._v("题目：输入一个整数n，求从1到n这n个整数的十进制表示中1出现的次数。")]),t._v(" "),_("p",[t._v("例如输入12，从1到12这些整数中包含1 的数字有1，10，11和12，1一共出现了5次。")]),t._v(" "),_("p",[t._v("分析：这是一道广为流传的google面试题。")]),t._v(" "),_("h3",{attrs:{id:"_31-华为面试题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_31-华为面试题"}},[t._v("#")]),t._v(" 31.华为面试题：")]),t._v(" "),_("p",[t._v("一类似于蜂窝的结构的图，进行搜索最短路径（要求5分钟）")]),t._v(" "),_("h3",{attrs:{id:"_32-数组元素交换"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_32-数组元素交换"}},[t._v("#")]),t._v(" 32.数组元素交换")]),t._v(" "),_("p",[t._v("有两个序列a,b，大小都为n,序列元素的值任意整数，无序；")]),t._v(" "),_("p",[t._v("要求：通过交换a,b中的元素，使[序列a元素的和]与[序列b元素的和]之间的差最小。")]),t._v(" "),_("p",[t._v("例如:")]),t._v(" "),_("p",[t._v("var a=[100,99,98,1,2, 3];")]),t._v(" "),_("p",[t._v("var b=[1, 2, 3, 4,5,40];")]),t._v(" "),_("h3",{attrs:{id:"_33-实现一个挺高级的字符匹配算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_33-实现一个挺高级的字符匹配算法"}},[t._v("#")]),t._v(" 33.实现一个挺高级的字符匹配算法：")]),t._v(" "),_("p",[t._v("给一串很长字符串，要求找到符合要求的字符串，例如目的串：123")]),t._v(" "),_("p",[t._v("1****"),_("strong",[t._v("3"),_("em",[_("strong",[t._v("2 ,12")])])]),t._v("3这些都要找出来")]),t._v(" "),_("p",[t._v("其实就是类似一些和谐系统。。。。。")]),t._v(" "),_("h3",{attrs:{id:"_34-实现一个队列。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_34-实现一个队列。"}},[t._v("#")]),t._v(" 34.实现一个队列。")]),t._v(" "),_("p",[t._v("队列的应用场景为：")]),t._v(" "),_("p",[t._v("一个生产者线程将int类型的数入列，一个消费者线程将int类型的数出列")]),t._v(" "),_("h3",{attrs:{id:"_35-求一个矩阵中最大的二维矩阵-元素和最大-如"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_35-求一个矩阵中最大的二维矩阵-元素和最大-如"}},[t._v("#")]),t._v(" 35.求一个矩阵中最大的二维矩阵(元素和最大).如:")]),t._v(" "),_("p",[t._v("1 2 0 3 4")]),t._v(" "),_("p",[t._v("2 3 4 5 1")]),t._v(" "),_("p",[t._v("1 1 5 3 0")]),t._v(" "),_("p",[t._v("中最大的是:")]),t._v(" "),_("p",[t._v("4 5")]),t._v(" "),_("p",[t._v("5 3")]),t._v(" "),_("p",[t._v("要求:(1)写出算法;(2)分析时间复杂度;(3)用C写出关键代码")]),t._v(" "),_("p",[t._v("第36题-40题（有些题目搜集于CSDN上的网友，已标明）：")]),t._v(" "),_("h3",{attrs:{id:"_36-引用自网友-longzuo"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_36-引用自网友-longzuo"}},[t._v("#")]),t._v(" 36.引用自网友：longzuo")]),t._v(" "),_("p",[t._v("谷歌笔试：")]),t._v(" "),_("p",[t._v("n支队伍比赛，分别编号为0，1，2。。。。n-1，已知它们之间的实力对比关系，")]),t._v(" "),_("p",[t._v("存储在一个二维数组w[n][n]中，w[i][j] 的值代表编号为i，j的队伍中更强的一支。")]),t._v(" "),_("p",[t._v("所以w[i][j]=i 或者j，现在给出它们的出场顺序，并存储在数组order[n]中，")]),t._v(" "),_("p",[t._v("比如order[n] = {4,3,5,8,1......}，那么第一轮比赛就是 4对3， 5对8。.......")]),t._v(" "),_("p",[t._v("胜者晋级，败者淘汰，同一轮淘汰的所有队伍排名不再细分，即可以随便排，")]),t._v(" "),_("p",[t._v("下一轮由上一轮的胜者按照顺序，再依次两两比，比如可能是4对5,直至出现第一名")]),t._v(" "),_("p",[t._v("编程实现，给出二维数组w，一维数组order 和 用于输出比赛名次的数组result[n]，")]),t._v(" "),_("p",[t._v("求出result。")]),t._v(" "),_("h3",{attrs:{id:"_37-字符串匹配"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_37-字符串匹配"}},[t._v("#")]),t._v(" 37.字符串匹配")]),t._v(" "),_("p",[t._v("有n个长为m+1的字符串，")]),t._v(" "),_("p",[t._v("如果某个字符串的最后m个字符与某个字符串的前m个字符匹配，则两个字符串可以联接，")]),t._v(" "),_("p",[t._v("问这n个字符串最多可以连成一个多长的字符串，如果出现循环，则返回错误。")]),t._v(" "),_("h3",{attrs:{id:"_38-百度面试"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_38-百度面试"}},[t._v("#")]),t._v(" 38.百度面试：")]),t._v(" "),_("p",[t._v("1.用天平（只能比较，不能称重）从一堆小球中找出其中唯一一个较轻的，使用x次天平，")]),t._v(" "),_("p",[t._v("最多可以从y个小球中找出较轻的那个，求y与x的关系式。")]),t._v(" "),_("p",[t._v("2.有一个很大很大的输入流，大到没有存储器可以将其存储下来，")]),t._v(" "),_("p",[t._v("而且只输入一次，如何从这个输入流中随机取得m个记录。")]),t._v(" "),_("p",[t._v("3.大量的URL字符串，如何从中去除重复的，优化时间空间复杂度")]),t._v(" "),_("h3",{attrs:{id:"_39-网易有道笔试"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_39-网易有道笔试"}},[t._v("#")]),t._v(" 39.网易有道笔试：")]),t._v(" "),_("p",[t._v("(1).")]),t._v(" "),_("p",[t._v("求一个二叉树中任意两个节点间的最大距离，")]),t._v(" "),_("p",[t._v("两个节点的距离的定义是 这两个节点间边的个数，")]),t._v(" "),_("p",[t._v("比如某个孩子节点和父节点间的距离是1，和相邻兄弟节点间的距离是2，优化时间空间复杂度。")]),t._v(" "),_("p",[t._v("(2).")]),t._v(" "),_("p",[t._v("求一个有向连通图的割点，割点的定义是，如果除去此节点和与其相关的边，")]),t._v(" "),_("p",[t._v("有向图不再连通，描述算法。")]),t._v(" "),_("h3",{attrs:{id:"_40-百度研发笔试题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_40-百度研发笔试题"}},[t._v("#")]),t._v(" 40.百度研发笔试题")]),t._v(" "),_("p",[t._v("引用自：zp155334877")]),t._v(" "),_("p",[t._v("1)设计一个栈结构，满足一下条件：min，push，pop操作的时间复杂度为O(1)。")]),t._v(" "),_("p",[t._v("2)一串首尾相连的珠子(m个)，有N种颜色(N"),_("code",[t._v("<")]),t._v("=10)，")]),t._v(" "),_("p",[t._v("设计一个算法，取出其中一段，要求包含所有N中颜色，并使长度最短。")]),t._v(" "),_("p",[t._v("并分析时间复杂度与空间复杂度。")]),t._v(" "),_("p",[t._v("3)设计一个系统处理词语搭配问题，比如说 中国 和人民可以搭配，")]),t._v(" "),_("p",[t._v("则中国人民 人民中国都有效。要求：")]),t._v(" "),_("p",[t._v("*系统每秒的查询数量可能上千次；")]),t._v(" "),_("p",[t._v("*词语的数量级为10W；")]),t._v(" "),_("p",[t._v("*每个词至多可以与1W个词搭配")]),t._v(" "),_("p",[t._v("当用户输入中国人民的时候，要求返回与这个搭配词组相关的信息。")]),t._v(" "),_("h3",{attrs:{id:"_41-求固晶机的晶元查找程序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_41-求固晶机的晶元查找程序"}},[t._v("#")]),t._v(" 41.求固晶机的晶元查找程序")]),t._v(" "),_("p",[t._v("晶元盘由数目不详的大小一样的晶元组成，晶元并不一定全布满晶元盘，")]),t._v(" "),_("p",[t._v("照相机每次这能匹配一个晶元，如匹配过，则拾取该晶元，")]),t._v(" "),_("p",[t._v("若匹配不过，照相机则按测好的晶元间距移到下一个位置。")]),t._v(" "),_("p",[t._v("求遍历晶元盘的算法 求思路。")]),t._v(" "),_("h3",{attrs:{id:"_42-请修改append函数-利用这个函数实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_42-请修改append函数-利用这个函数实现"}},[t._v("#")]),t._v(" 42.请修改append函数，利用这个函数实现：")]),t._v(" "),_("p",[t._v("两个非降序链表的并集，1->2->3 和 2->3->5 并为 1->2->3->5")]),t._v(" "),_("p",[t._v("另外只能输出结果，不能修改两个链表的数据。")]),t._v(" "),_("h3",{attrs:{id:"_43-递归和非递归俩种方法实现二叉树的前序遍历。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_43-递归和非递归俩种方法实现二叉树的前序遍历。"}},[t._v("#")]),t._v(" 43.递归和非递归俩种方法实现二叉树的前序遍历。")]),t._v(" "),_("h3",{attrs:{id:"_44-腾讯面试题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_44-腾讯面试题"}},[t._v("#")]),t._v(" 44.腾讯面试题：")]),t._v(" "),_("p",[t._v("1.设计一个魔方（六面）的程序。")]),t._v(" "),_("p",[t._v("2.有一千万条短信，有重复，以文本文件的形式保存，一行一条，有重复。")]),t._v(" "),_("p",[t._v("请用5分钟时间，找出重复出现最多的前10条。")]),t._v(" "),_("p",[t._v("3.收藏了1万条url，现在给你一条url，如何找出相似的url。（面试官不解释何为相似）")]),t._v(" "),_("h3",{attrs:{id:"_45-雅虎"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_45-雅虎"}},[t._v("#")]),t._v(" 45.雅虎：")]),t._v(" "),_("p",[t._v("1.对于一个整数矩阵，存在一种运算，对矩阵中任意元素加一时，需要其相邻（上下左右）")]),t._v(" "),_("p",[t._v("某一个元素也加一，现给出一正数矩阵，判断其是否能够由一个全零矩阵经过上述运算得到。")]),t._v(" "),_("p",[t._v("2.一个整数数组，长度为n，将其分为m份，使各份的和相等，求m的最大值")]),t._v(" "),_("p",[t._v("比如{3，2，4，3，6} 可以分成{3，2，4，3，6} m=1;")]),t._v(" "),_("p",[t._v("{3,6}{2,4,3} m=2")]),t._v(" "),_("p",[t._v("{3,3}{2,4}{6} m=3 所以m的最大值为3")]),t._v(" "),_("h3",{attrs:{id:"_46-搜狐"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_46-搜狐"}},[t._v("#")]),t._v(" 46.搜狐：")]),t._v(" "),_("p",[t._v("四对括号可以有多少种匹配排列方式？比如两对括号可以有两种：（）（）和（（））")]),t._v(" "),_("h3",{attrs:{id:"_47-创新工场"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_47-创新工场"}},[t._v("#")]),t._v(" 47.创新工场：")]),t._v(" "),_("p",[t._v("求一个数组的最长递减子序列 比如{9，4，3，2，5，4，3，2}的最长递减子序列为{9，5，4，3，2}")]),t._v(" "),_("h3",{attrs:{id:"_48-微软"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_48-微软"}},[t._v("#")]),t._v(" 48.微软：")]),t._v(" "),_("p",[t._v("一个数组是由一个递减数列左移若干位形成的，比如{4，3，2，1，6，5}")]),t._v(" "),_("p",[t._v("是由{6，5，4，3，2，1}左移两位形成的，在这种数组中查找某一个数。")]),t._v(" "),_("h3",{attrs:{id:"_49-一道看上去很吓人的算法面试题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_49-一道看上去很吓人的算法面试题"}},[t._v("#")]),t._v(" 49.一道看上去很吓人的算法面试题：")]),t._v(" "),_("p",[t._v("如何对n个数进行排序，要求时间复杂度O(n)，空间复杂度O(1)")]),t._v(" "),_("h3",{attrs:{id:"_50-网易有道笔试"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_50-网易有道笔试"}},[t._v("#")]),t._v(" 50.网易有道笔试：")]),t._v(" "),_("p",[t._v("1.求一个二叉树中任意两个节点间的最大距离，两个节点的距离的定义是 这两个节点间边的个数，")]),t._v(" "),_("p",[t._v("比如某个孩子节点和父节点间的距离是1，和相邻兄弟节点间的距离是2，优化时间空间复杂度。")]),t._v(" "),_("p",[t._v("2.求一个有向连通图的割点，割点的定义是，")]),t._v(" "),_("p",[t._v("如果除去此节点和与其相关的边，有向图不再连通，描述算法。")]),t._v(" "),_("p",[t._v("-------------------------------------------------------------------")]),t._v(" "),_("h3",{attrs:{id:"_51-和为n连续正数序列。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_51-和为n连续正数序列。"}},[t._v("#")]),t._v(" 51.和为n连续正数序列。")]),t._v(" "),_("p",[t._v("题目：输入一个正数n，输出所有和为n连续正数序列。")]),t._v(" "),_("p",[t._v("例如输入15，由于1+2+3+4+5=4+5+6=7+8=15，所以输出3个连续序列1-5、4-6和7-8。")]),t._v(" "),_("p",[t._v("分析：这是网易的一道面试题。")]),t._v(" "),_("h3",{attrs:{id:"_52-二元树的深度。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_52-二元树的深度。"}},[t._v("#")]),t._v(" 52.二元树的深度。")]),t._v(" "),_("p",[t._v("题目：输入一棵二元树的根结点，求该树的深度。")]),t._v(" "),_("p",[t._v("从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。")]),t._v(" "),_("p",[t._v("例如：输入二元树：")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("                 10\n\n                /   \\\n\n               6    14\n\n              /     /  \\\n\n             4     12   16\n")])])]),_("p",[t._v("输出该树的深度3。")]),t._v(" "),_("p",[t._v("二元树的结点定义如下：")]),t._v(" "),_("div",{staticClass:"language-cpp extra-class"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SBinaryTreeNode")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a node of the binary tree")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n   "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("        m_nValue"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// value of node")]),t._v("\n\n   SBinaryTreeNode "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("m_pLeft"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// left child of node")]),t._v("\n\n   SBinaryTreeNode "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("m_pRight"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// right child of node")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("p",[t._v("分析：这道题本质上还是考查二元树的遍历。")]),t._v(" "),_("h3",{attrs:{id:"_53-字符串的排列。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_53-字符串的排列。"}},[t._v("#")]),t._v(" 53.字符串的排列。")]),t._v(" "),_("p",[t._v("题目：输入一个字符串，打印出该字符串中字符的所有排列。")]),t._v(" "),_("p",[t._v("例如输入字符串abc，则输出由字符a、b、c所能排列出来的所有字符串")]),t._v(" "),_("p",[t._v("abc、acb、bac、bca、cab和cba。")]),t._v(" "),_("p",[t._v("分析：这是一道很好的考查对递归理解的编程题，")]),t._v(" "),_("p",[t._v("因此在过去一年中频繁出现在各大公司的面试、笔试题中。")]),t._v(" "),_("h3",{attrs:{id:"_54-调整数组顺序使奇数位于偶数前面。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_54-调整数组顺序使奇数位于偶数前面。"}},[t._v("#")]),t._v(" 54.调整数组顺序使奇数位于偶数前面。")]),t._v(" "),_("p",[t._v("题目：输入一个整数数组，调整数组中数字的顺序，使得所有奇数位于数组的前半部分，")]),t._v(" "),_("p",[t._v("所有偶数位于数组的后半部分。要求时间复杂度为O(n)。")]),t._v(" "),_("h3",{attrs:{id:"_55-类cmystring"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_55-类cmystring"}},[t._v("#")]),t._v(" 55.类CMyString")]),t._v(" "),_("p",[t._v("题目：类CMyString的声明如下：")]),t._v(" "),_("div",{staticClass:"language-cpp extra-class"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CMyString")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\n   "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("CMyString")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pData "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n   "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("CMyString")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" CMyString"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" str"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n   "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("CMyString")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n   CMyString"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" CMyString"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" str"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\n   "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" m_pData"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("p",[t._v("请实现其赋值运算符的重载函数，要求异常安全，即当对一个对象进行赋值时发生异常，对象的状态不能改变。")]),t._v(" "),_("h3",{attrs:{id:"_56-最长公共字串。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_56-最长公共字串。"}},[t._v("#")]),t._v(" 56.最长公共字串。")]),t._v(" "),_("p",[t._v("题目：如果字符串一的所有字符按其在字符串中的顺序出现在另外一个字符串二中，")]),t._v(" "),_("p",[t._v("则字符串一称之为字符串二的子串。")]),t._v(" "),_("p",[t._v("注意，并不要求子串（字符串一）的字符必须连续出现在字符串二中。")]),t._v(" "),_("p",[t._v("请编写一个函数，输入两个字符串，求它们的最长公共子串，并打印出最长公共子串。")]),t._v(" "),_("p",[t._v("例如：输入两个字符串BDCABA和ABCBDAB，字符串BCBA和BDAB都是是它们的最长公共子串，")]),t._v(" "),_("p",[t._v("则输出它们的长度4，并打印任意一个子串。")]),t._v(" "),_("p",[t._v("分析：求最长公共子串（Longest Common Subsequence, LCS）是一道非常经典的动态规划题，")]),t._v(" "),_("p",[t._v("因此一些重视算法的公司像MicroStrategy都把它当作面试题。")]),t._v(" "),_("h3",{attrs:{id:"_57-用俩个栈实现队列。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_57-用俩个栈实现队列。"}},[t._v("#")]),t._v(" 57.用俩个栈实现队列。")]),t._v(" "),_("p",[t._v("题目：某队列的声明如下：")]),t._v(" "),_("div",{staticClass:"language-cpp extra-class"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CQueue")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\n   "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("CQueue")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n   "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("CQueue")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n \n\n   "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendTail")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" T"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" node"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// append a element to tail")]),t._v("\n\n   "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteHead")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// remove a element from head")]),t._v("\n\n \n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\n   T"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" m_stack1"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n   T"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" m_stack2"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("p",[t._v("分析：从上面的类的声明中，我们发现在队列中有两个栈。")]),t._v(" "),_("p",[t._v("因此这道题实质上是要求我们用两个栈来实现一个队列。")]),t._v(" "),_("p",[t._v("相信大家对栈和队列的基本性质都非常了解了：栈是一种后入先出的数据容器，")]),t._v(" "),_("p",[t._v("因此对队列进行的插入和删除操作都是在栈顶上进行；队列是一种先入先出的数据容器，")]),t._v(" "),_("p",[t._v("我们总是把新元素插入到队列的尾部，而从队列的头部删除元素。")]),t._v(" "),_("h3",{attrs:{id:"_58-从尾到头输出链表。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_58-从尾到头输出链表。"}},[t._v("#")]),t._v(" 58.从尾到头输出链表。")]),t._v(" "),_("p",[t._v("题目：输入一个链表的头结点，从尾到头反过来输出每个结点的值。链表结点定义如下：")]),t._v(" "),_("div",{staticClass:"language-cpp extra-class"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("    m_nKey"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n   ListNode"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" m_pNext"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("p",[t._v("分析：这是一道很有意思的面试题。")]),t._v(" "),_("p",[t._v("该题以及它的变体经常出现在各大公司的面试、笔试题中。")]),t._v(" "),_("h3",{attrs:{id:"_59-不能被继承的类。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_59-不能被继承的类。"}},[t._v("#")]),t._v(" 59.不能被继承的类。")]),t._v(" "),_("p",[t._v("题目：用C++设计一个不能被继承的类。")]),t._v(" "),_("p",[t._v("分析：这是Adobe公司2007年校园招聘的最新笔试题。")]),t._v(" "),_("p",[t._v("这道题除了考察应聘者的C++基本功底外，还能考察反应能力，是一道很好的题目。")]),t._v(" "),_("h3",{attrs:{id:"_60-在o-1-时间内删除链表结点。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_60-在o-1-时间内删除链表结点。"}},[t._v("#")]),t._v(" 60.在O（1）时间内删除链表结点。")]),t._v(" "),_("p",[t._v("题目：给定链表的头指针和一个结点指针，在O(1)时间删除该结点。链表结点的定义如下：")]),t._v(" "),_("div",{staticClass:"language-cpp extra-class"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("    m_nKey"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   ListNode"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" m_pNext"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("p",[t._v("函数的声明如下：")]),t._v(" "),_("p",[t._v("void DeleteNode(ListNode* pListHead, ListNode* pToBeDeleted);")]),t._v(" "),_("p",[t._v("分析：这是一道广为流传的Google面试题，能有效考察我们的编程基本功，还能考察我们的反应速度，")]),t._v(" "),_("p",[t._v("更重要的是，还能考察我们对时间复杂度的理解。")]),t._v(" "),_("p",[t._v("-------------------------------------------------------------------------")]),t._v(" "),_("h3",{attrs:{id:"_61-找出数组中两个只出现一次的数字"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_61-找出数组中两个只出现一次的数字"}},[t._v("#")]),t._v(" 61.找出数组中两个只出现一次的数字")]),t._v(" "),_("p",[t._v("题目：一个整型数组里除了两个数字之外，其他的数字都出现了两次。")]),t._v(" "),_("p",[t._v("请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。")]),t._v(" "),_("p",[t._v("分析：这是一道很新颖的关于位运算的面试题。")]),t._v(" "),_("h3",{attrs:{id:"_62-找出链表的第一个公共结点。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_62-找出链表的第一个公共结点。"}},[t._v("#")]),t._v(" 62.找出链表的第一个公共结点。")]),t._v(" "),_("p",[t._v("题目：两个单向链表，找出它们的第一个公共结点。")]),t._v(" "),_("p",[t._v("链表的结点定义为：")]),t._v(" "),_("div",{staticClass:"language-cpp extra-class"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n   "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("     m_nKey"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n   ListNode"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("  m_pNext"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("p",[t._v("分析：这是一道微软的面试题。微软非常喜欢与链表相关的题目，")]),t._v(" "),_("p",[t._v("因此在微软的面试题中，链表出现的概率相当高。")]),t._v(" "),_("h3",{attrs:{id:"_63-在字符串中删除特定的字符。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_63-在字符串中删除特定的字符。"}},[t._v("#")]),t._v(" 63.在字符串中删除特定的字符。")]),t._v(" "),_("p",[t._v("题目：输入两个字符串，从第一字符串中删除第二个字符串中所有的字符。例如，输入”They are students.”和”aeiou”，")]),t._v(" "),_("p",[t._v("则删除之后的第一个字符串变成”Thy r stdnts.”。")]),t._v(" "),_("p",[t._v("分析：这是一道微软面试题。在微软的常见面试题中，与字符串相关的题目占了很大的一部分，")]),t._v(" "),_("p",[t._v("因为写程序操作字符串能很好的反映我们的编程基本功。")]),t._v(" "),_("h3",{attrs:{id:"_64-寻找丑数。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_64-寻找丑数。"}},[t._v("#")]),t._v(" 64. 寻找丑数。")]),t._v(" "),_("p",[t._v("题目：我们把只包含因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，")]),t._v(" "),_("p",[t._v("但14不是，因为它包含因子7。习惯上我们把1当做是第一个丑数。")]),t._v(" "),_("p",[t._v("求按从小到大的顺序的第1500个丑数。")]),t._v(" "),_("p",[t._v("分析：这是一道在网络上广为流传的面试题，据说google曾经采用过这道题。")]),t._v(" "),_("h3",{attrs:{id:"_65-输出1到最大的n位数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_65-输出1到最大的n位数"}},[t._v("#")]),t._v(" 65.输出1到最大的N位数")]),t._v(" "),_("p",[t._v("题目：输入数字n，按顺序输出从1最大的n位10进制数。比如输入3，")]),t._v(" "),_("p",[t._v("则输出1、2、3一直到最大的3位数即999。")]),t._v(" "),_("p",[t._v("分析：这是一道很有意思的题目。看起来很简单，其实里面却有不少的玄机。")]),t._v(" "),_("h3",{attrs:{id:"_66-颠倒栈。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_66-颠倒栈。"}},[t._v("#")]),t._v(" 66.颠倒栈。")]),t._v(" "),_("p",[t._v("题目：用递归颠倒一个栈。例如输入栈{1, 2, 3, 4, 5}，1在栈顶。")]),t._v(" "),_("p",[t._v("颠倒之后的栈为{5, 4, 3, 2, 1}，5处在栈顶。")]),t._v(" "),_("h3",{attrs:{id:"_67-俩个闲玩娱乐。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_67-俩个闲玩娱乐。"}},[t._v("#")]),t._v(" 67.俩个闲玩娱乐。")]),t._v(" "),_("p",[t._v("1.扑克牌的顺子")]),t._v(" "),_("p",[t._v("从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。")]),t._v(" "),_("p",[t._v("2-10为数字本身，A为1，J为11，Q为12，K为13，而大小王可以看成任意数字。")]),t._v(" "),_("p",[t._v("2.n个骰子的点数。")]),t._v(" "),_("p",[t._v("把n个骰子扔在地上，所有骰子朝上一面的点数之和为S。输入n，")]),t._v(" "),_("p",[t._v("打印出S的所有可能的值出现的概率。")]),t._v(" "),_("h3",{attrs:{id:"_68-把数组排成最小的数。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_68-把数组排成最小的数。"}},[t._v("#")]),t._v(" 68.把数组排成最小的数。")]),t._v(" "),_("p",[t._v("题目：输入一个正整数数组，将它们连接起来排成一个数，输出能排出的所有数字中最小的一个。")]),t._v(" "),_("p",[t._v("例如输入数组{32, 321}，则输出这两个能排成的最小数字32132。")]),t._v(" "),_("p",[t._v("请给出解决问题的算法，并证明该算法。")]),t._v(" "),_("p",[t._v("分析：这是09年6月份百度的一道面试题，")]),t._v(" "),_("p",[t._v("从这道题我们可以看出百度对应聘者在算法方面有很高的要求。")]),t._v(" "),_("h3",{attrs:{id:"_69-旋转数组中的最小元素。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_69-旋转数组中的最小元素。"}},[t._v("#")]),t._v(" 69.旋转数组中的最小元素。")]),t._v(" "),_("p",[t._v("题目：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个排好序的数组的一个旋转，")]),t._v(" "),_("p",[t._v("输出旋转数组的最小元素。例如数组{3, 4, 5, 1, 2}为{1, 2, 3, 4, 5}的一个旋转，该数组的最小值为1。")]),t._v(" "),_("p",[t._v("分析：这道题最直观的解法并不难。从头到尾遍历数组一次，就能找出最小的元素，")]),t._v(" "),_("p",[t._v("时间复杂度显然是O(N)。但这个思路没有利用输入数组的特性，我们应该能找到更好的解法。")]),t._v(" "),_("h3",{attrs:{id:"_70-给出一个函数来输出一个字符串的所有排列。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_70-给出一个函数来输出一个字符串的所有排列。"}},[t._v("#")]),t._v(" 70.给出一个函数来输出一个字符串的所有排列。")]),t._v(" "),_("p",[t._v("ANSWER 简单的回溯就可以实现了。当然排列的产生也有很多种算法，去看看组合数学，")]),t._v(" "),_("p",[t._v("还有逆序生成排列和一些不需要递归生成排列的方法。")]),t._v(" "),_("p",[t._v("印象中Knuth的"),_("code",[t._v("<TAOCP>")]),t._v("第一卷里面深入讲了排列的生成。这些算法的理解需要一定的数学功底，")]),t._v(" "),_("p",[t._v("也需要一定的灵感，有兴趣最好看看。")]),t._v(" "),_("h3",{attrs:{id:"_71-数值的整数次方。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_71-数值的整数次方。"}},[t._v("#")]),t._v(" 71.数值的整数次方。")]),t._v(" "),_("p",[t._v("题目：实现函数double Power(double base, int exponent)，求base的exponent次方。")]),t._v(" "),_("p",[t._v("不需要考虑溢出。")]),t._v(" "),_("p",[t._v("分析：这是一道看起来很简单的问题。可能有不少的人在看到题目后30秒写出如下的代码：")]),t._v(" "),_("div",{staticClass:"language-cpp extra-class"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("Power")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" base"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" exponent"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n \n\n   "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" result "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n   "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" exponent"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n     result "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" base"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n   "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("h3",{attrs:{id:"_72-单例类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_72-单例类"}},[t._v("#")]),t._v(" 72. 单例类")]),t._v(" "),_("p",[t._v("题目：设计一个类，我们只能生成该类的一个实例。")]),t._v(" "),_("p",[t._v("分析：只能生成一个实例的类是实现了Singleton模式的类型。")]),t._v(" "),_("h3",{attrs:{id:"_73-对策字符串的最大长度。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_73-对策字符串的最大长度。"}},[t._v("#")]),t._v(" 73.对策字符串的最大长度。")]),t._v(" "),_("p",[t._v("题目：输入一个字符串，输出该字符串中对称的子字符串的最大长度。")]),t._v(" "),_("p",[t._v("比如输入字符串“google”，由于该字符串里最长的对称子字符串是“goog”，因此输出4。")]),t._v(" "),_("p",[t._v("分析：可能很多人都写过判断一个字符串是不是对称的函数，这个题目可以看成是该函数的加强版。")]),t._v(" "),_("h3",{attrs:{id:"_74-数组中超过出现次数超过一半的数字"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_74-数组中超过出现次数超过一半的数字"}},[t._v("#")]),t._v(" 74.数组中超过出现次数超过一半的数字")]),t._v(" "),_("p",[t._v("题目：数组中有一个数字出现的次数超过了数组长度的一半，找出这个数字。")]),t._v(" "),_("p",[t._v("分析：这是一道广为流传的面试题，包括百度、微软和Google在内的多家公司都")]),t._v(" "),_("p",[t._v("曾经采用过这个题目。要几十分钟的时间里很好地解答这道题，")]),t._v(" "),_("p",[t._v("除了较好的编程能力之外，还需要较快的反应和较强的逻辑思维能力。")]),t._v(" "),_("h3",{attrs:{id:"_75-二叉树两个结点的最低共同父结点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_75-二叉树两个结点的最低共同父结点"}},[t._v("#")]),t._v(" 75.二叉树两个结点的最低共同父结点")]),t._v(" "),_("p",[t._v("题目：二叉树的结点定义如下：")]),t._v(" "),_("div",{staticClass:"language-cpp extra-class"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m_nvalue"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  TreeNode"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" m_pLeft"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  TreeNode"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" m_pRight"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("p",[t._v("输入二叉树中的两个结点，输出这两个结点在数中最低的共同父结点。")]),t._v(" "),_("p",[t._v("分析：求数中两个结点的最低共同结点是面试中经常出现的一个问题。这个问题至少有两个变种。")]),t._v(" "),_("h3",{attrs:{id:"_76-复杂链表的复制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_76-复杂链表的复制"}},[t._v("#")]),t._v(" 76.复杂链表的复制")]),t._v(" "),_("p",[t._v("题目：有一个复杂链表，其结点除了有一个m_pNext指针指向下一个结点外，")]),t._v(" "),_("p",[t._v("还有一个m_pSibling指向链表中的任一结点或者NULL。其结点的C++定义如下：")]),t._v(" "),_("div",{staticClass:"language-cpp extra-class"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ComplexNode")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m_nValue"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  ComplexNode"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" m_pNext"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  ComplexNode"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" m_pSibling"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("p",[t._v("下图是一个含有5个结点的该类型复杂链表。")]),t._v(" "),_("p",[t._v("图中实线箭头表示m_pNext指针，虚线箭头表示m_pSibling指针。为简单起见，")]),t._v(" "),_("p",[t._v("指向NULL的指针没有画出。")]),t._v(" "),_("p",[t._v("请完成函数ComplexNode* Clone(ComplexNode* pHead)，以复制一个复杂链表。")]),t._v(" "),_("p",[t._v("分析：在常见的数据结构上稍加变化，这是一种很新颖的面试题。")]),t._v(" "),_("p",[t._v("要在不到一个小时的时间里解决这种类型的题目，我们需要较快的反应能力，")]),t._v(" "),_("p",[t._v("对数据结构透彻的理解以及扎实的编程功底。")]),t._v(" "),_("h3",{attrs:{id:"_77-关于链表问题的面试题目如下"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_77-关于链表问题的面试题目如下"}},[t._v("#")]),t._v(" 77.关于链表问题的面试题目如下：")]),t._v(" "),_("p",[t._v("1.给定单链表，检测是否有环。")]),t._v(" "),_("p",[t._v("使用两个指针p1,p2从链表头开始遍历，p1每次前进一步，p2每次前进两步。如果p2到达链表尾部，")]),t._v(" "),_("p",[t._v("说明无环，否则p1、p2必然会在某个时刻相遇(p1==p2)，从而检测到链表中有环。")]),t._v(" "),_("p",[t._v("2.给定两个单链表(head1, head2)，检测两个链表是否有交点，如果有返回第一个交点。")]),t._v(" "),_("p",[t._v("如果head1==head2，那么显然相交，直接返回head1。")]),t._v(" "),_("p",[t._v("否则，分别从head1,head2开始遍历两个链表获得其长度len1与len2，假设len1>=len2，")]),t._v(" "),_("p",[t._v("那么指针p1由head1开始向后移动len1-len2步，指针p2=head2，")]),t._v(" "),_("p",[t._v("下面p1、p2每次向后前进一步并比较p1p2是否相等，如果相等即返回该结点，")]),t._v(" "),_("p",[t._v("否则说明两个链表没有交点。")]),t._v(" "),_("p",[t._v("3.给定单链表(head)，如果有环的话请返回从头结点进入环的第一个节点。")]),t._v(" "),_("p",[t._v("运用题一，我们可以检查链表中是否有环。")]),t._v(" "),_("p",[t._v("如果有环，那么p1p2重合点p必然在环中。从p点断开环，")]),t._v(" "),_("p",[t._v("方法为：p1=p, p2=p->next, p->next=NULL。此时，原单链表可以看作两条单链表，")]),t._v(" "),_("p",[t._v("一条从head开始，另一条从p2开始，于是运用题二的方法，我们找到它们的第一个交点即为所求。")]),t._v(" "),_("p",[t._v("4.只给定单链表中某个结点p(并非最后一个结点，即p->next!=NULL)指针，删除该结点。")]),t._v(" "),_("p",[t._v("办法很简单，首先是放p中数据,然后将p->next的数据copy入p中，接下来删除p->next即可。")]),t._v(" "),_("p",[t._v("5.只给定单链表中某个结点p(非空结点)，在p前面插入一个结点。")]),t._v(" "),_("p",[t._v("办法与前者类似，首先分配一个结点q，将q插入在p后，接下来将p中的数据copy入q中，")]),t._v(" "),_("p",[t._v("然后再将要插入的数据记录在p中。")]),t._v(" "),_("h3",{attrs:{id:"_78-链表和数组的区别在哪里"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_78-链表和数组的区别在哪里"}},[t._v("#")]),t._v(" 78.链表和数组的区别在哪里？")]),t._v(" "),_("p",[t._v("分析：主要在基本概念上的理解。")]),t._v(" "),_("p",[t._v("但是最好能考虑的全面一点，现在公司招人的竞争可能就在细节上产生，")]),t._v(" "),_("p",[t._v("谁比较仔细，谁获胜的机会就大。")]),t._v(" "),_("h3",{attrs:{id:"_79-链表、数组算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_79-链表、数组算法"}},[t._v("#")]),t._v(" 79.链表、数组算法")]),t._v(" "),_("p",[t._v("1.编写实现链表排序的一种算法。说明为什么你会选择用这样的方法？")]),t._v(" "),_("p",[t._v("2.编写实现数组排序的一种算法。说明为什么你会选择用这样的方法？")]),t._v(" "),_("p",[t._v("3.请编写能直接实现strstr()函数功能的代码。")]),t._v(" "),_("h3",{attrs:{id:"_80-阿里巴巴一道笔试题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_80-阿里巴巴一道笔试题"}},[t._v("#")]),t._v(" 80.阿里巴巴一道笔试题")]),t._v(" "),_("p",[t._v("问题描述:")]),t._v(" "),_("p",[t._v("12个高矮不同的人,排成两排,每排必须是从矮到高排列,而且第二排比对应的第一排的人高,问排列方式有多少种?")]),t._v(" "),_("p",[t._v("这个笔试题,很YD,因为把某个递归关系隐藏得很深。")]),t._v(" "),_("h2",{attrs:{id:"参考文章"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),_("ul",[_("li",[t._v("https://blog.csdn.net/Swollow_/article/details/73614721")])])])}),[],!1,null,null,null);a.default=v.exports}}]);