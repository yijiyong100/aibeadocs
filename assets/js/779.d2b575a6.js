(window.webpackJsonp=window.webpackJsonp||[]).push([[779],{1295:function(a,t,n){"use strict";n.r(t);var s=n(53),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),n("p",[a._v("本文主要是介绍 Spring 面试题，面试题和相关解答来自网络，难免有纰漏和疏忽，阅读的时候，发现有疑问的地方，建议多方求证，也可以关注原文评论区，也欢迎在本站"),n("a",{attrs:{href:"https://www.yijiyong.com/about/aboutqa.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("【问题反馈页面】"),n("OutboundLink")],1),a._v("留言反馈。")])]),a._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#spring概述-10"}},[a._v("Spring概述（10）")]),n("ul",[n("li",[n("a",{attrs:{href:"#什么是spring"}},[a._v("什么是spring?")])]),n("li",[n("a",{attrs:{href:"#spring框架的设计目标-设计理念-和核心是什么"}},[a._v("Spring框架的设计目标，设计理念，和核心是什么")])]),n("li",[n("a",{attrs:{href:"#spring的优缺点是什么"}},[a._v("Spring的优缺点是什么？")])]),n("li",[n("a",{attrs:{href:"#spring有哪些应用场景"}},[a._v("Spring有哪些应用场景")])]),n("li",[n("a",{attrs:{href:"#spring由哪些模块组成"}},[a._v("Spring由哪些模块组成？")])]),n("li",[n("a",{attrs:{href:"#spring-框架中都用到了哪些设计模式"}},[a._v("Spring 框架中都用到了哪些设计模式？")])]),n("li",[n("a",{attrs:{href:"#详细讲解一下核心容器-spring-context应用上下文-模块"}},[a._v("详细讲解一下核心容器（spring context应用上下文) 模块")])]),n("li",[n("a",{attrs:{href:"#spring框架中有哪些不同类型的事件"}},[a._v("Spring框架中有哪些不同类型的事件")])]),n("li",[n("a",{attrs:{href:"#spring-应用程序有哪些不同组件"}},[a._v("Spring 应用程序有哪些不同组件？")])]),n("li",[n("a",{attrs:{href:"#使用-spring-有哪些方式"}},[a._v("使用 Spring 有哪些方式？")])])])]),n("li",[n("a",{attrs:{href:"#spring控制反转-ioc-13"}},[a._v("Spring控制反转(IOC)（13）")]),n("ul",[n("li",[n("a",{attrs:{href:"#什么是spring-ioc-容器"}},[a._v("什么是Spring IOC 容器？")])]),n("li",[n("a",{attrs:{href:"#控制反转-ioc-有什么作用"}},[a._v("控制反转(IoC)有什么作用")])]),n("li",[n("a",{attrs:{href:"#ioc的优点是什么"}},[a._v("IOC的优点是什么？")])]),n("li",[n("a",{attrs:{href:"#spring-ioc-的实现机制"}},[a._v("Spring IoC 的实现机制")])]),n("li",[n("a",{attrs:{href:"#spring-的-ioc支持哪些功能"}},[a._v("Spring 的 IoC支持哪些功能")])]),n("li",[n("a",{attrs:{href:"#beanfactory-和-applicationcontext有什么区别"}},[a._v("BeanFactory 和 ApplicationContext有什么区别？")])]),n("li",[n("a",{attrs:{href:"#spring-如何设计容器的-beanfactory和applicationcontext的关系详解"}},[a._v("Spring 如何设计容器的，BeanFactory和ApplicationContext的关系详解")])]),n("li",[n("a",{attrs:{href:"#applicationcontext通常的实现是什么"}},[a._v("ApplicationContext通常的实现是什么？")])]),n("li",[n("a",{attrs:{href:"#什么是spring的依赖注入"}},[a._v("什么是Spring的依赖注入？")])]),n("li",[n("a",{attrs:{href:"#依赖注入的基本原则"}},[a._v("依赖注入的基本原则")])]),n("li",[n("a",{attrs:{href:"#依赖注入有什么优势"}},[a._v("依赖注入有什么优势")])]),n("li",[n("a",{attrs:{href:"#有哪些不同类型的依赖注入实现方式"}},[a._v("有哪些不同类型的依赖注入实现方式？")])]),n("li",[n("a",{attrs:{href:"#构造器依赖注入和-setter方法注入的区别"}},[a._v("构造器依赖注入和 Setter方法注入的区别")])])])]),n("li",[n("a",{attrs:{href:"#spring-beans-19"}},[a._v("Spring Beans（19）")]),n("ul",[n("li",[n("a",{attrs:{href:"#什么是spring-beans"}},[a._v("什么是Spring beans？")])]),n("li",[n("a",{attrs:{href:"#一个-spring-bean-定义-包含什么"}},[a._v("一个 Spring Bean 定义 包含什么？")])]),n("li",[n("a",{attrs:{href:"#如何给spring-容器提供配置元数据-spring有几种配置方式"}},[a._v("如何给Spring 容器提供配置元数据？Spring有几种配置方式")])]),n("li",[n("a",{attrs:{href:"#spring配置文件包含了哪些信息"}},[a._v("Spring配置文件包含了哪些信息")])]),n("li",[n("a",{attrs:{href:"#spring基于xml注入bean的几种方式"}},[a._v("Spring基于xml注入bean的几种方式")])]),n("li",[n("a",{attrs:{href:"#你怎样定义类的作用域"}},[a._v("你怎样定义类的作用域？")])]),n("li",[n("a",{attrs:{href:"#解释spring支持的几种bean的作用域"}},[a._v("解释Spring支持的几种bean的作用域")])]),n("li",[n("a",{attrs:{href:"#spring框架中的单例bean是线程安全的吗"}},[a._v("Spring框架中的单例bean是线程安全的吗？")])]),n("li",[n("a",{attrs:{href:"#spring如何处理线程并发问题"}},[a._v("Spring如何处理线程并发问题？")])]),n("li",[n("a",{attrs:{href:"#解释spring框架中bean的生命周期"}},[a._v("解释Spring框架中bean的生命周期")])]),n("li",[n("a",{attrs:{href:"#哪些是重要的bean生命周期方法-你能重载它们吗"}},[a._v("哪些是重要的bean生命周期方法？ 你能重载它们吗？")])]),n("li",[n("a",{attrs:{href:"#什么是spring的内部bean-什么是spring-inner-beans"}},[a._v("什么是Spring的内部bean？什么是Spring inner beans？")])]),n("li",[n("a",{attrs:{href:"#在-spring中如何注入一个java集合"}},[a._v("在 Spring中如何注入一个java集合？")])]),n("li",[n("a",{attrs:{href:"#什么是bean装配"}},[a._v("什么是bean装配？")])]),n("li",[n("a",{attrs:{href:"#什么是bean的自动装配"}},[a._v("什么是bean的自动装配？")])]),n("li",[n("a",{attrs:{href:"#解释不同方式的自动装配-spring-自动装配-bean-有哪些方式"}},[a._v("解释不同方式的自动装配，spring 自动装配 bean 有哪些方式？")])]),n("li",[n("a",{attrs:{href:"#使用-autowired注解自动装配的过程是怎样的"}},[a._v("使用@Autowired注解自动装配的过程是怎样的？")])]),n("li",[n("a",{attrs:{href:"#自动装配有哪些局限性"}},[a._v("自动装配有哪些局限性？")])]),n("li",[n("a",{attrs:{href:"#你可以在spring中注入一个null-和一个空字符串吗"}},[a._v("你可以在Spring中注入一个null 和一个空字符串吗？")])])])]),n("li",[n("a",{attrs:{href:"#spring注解-8"}},[a._v("Spring注解（8）")]),n("ul",[n("li",[n("a",{attrs:{href:"#什么是基于java的spring注解配置-给一些注解的例子"}},[a._v("什么是基于Java的Spring注解配置? 给一些注解的例子")])]),n("li",[n("a",{attrs:{href:"#怎样开启注解装配"}},[a._v("怎样开启注解装配？")])]),n("li",[n("a",{attrs:{href:"#component-controller-repository-service-有何区别"}},[a._v("@Component, @Controller, @Repository, @Service 有何区别？")])]),n("li",[n("a",{attrs:{href:"#required-注解有什么作用"}},[a._v("@Required 注解有什么作用")])]),n("li",[n("a",{attrs:{href:"#autowired-注解有什么作用"}},[a._v("@Autowired 注解有什么作用")])]),n("li",[n("a",{attrs:{href:"#autowired和-resource之间的区别"}},[a._v("@Autowired和@Resource之间的区别")])]),n("li",[n("a",{attrs:{href:"#qualifier-注解有什么作用"}},[a._v("@Qualifier 注解有什么作用")])]),n("li",[n("a",{attrs:{href:"#requestmapping-注解有什么用"}},[a._v("@RequestMapping 注解有什么用？")])])])]),n("li",[n("a",{attrs:{href:"#spring数据访问-14"}},[a._v("Spring数据访问（14）")]),n("ul",[n("li",[n("a",{attrs:{href:"#解释对象-关系映射集成模块"}},[a._v("解释对象/关系映射集成模块")])]),n("li",[n("a",{attrs:{href:"#在spring框架中如何更有效地使用jdbc"}},[a._v("在Spring框架中如何更有效地使用JDBC？")])]),n("li",[n("a",{attrs:{href:"#解释jdbc抽象和dao模块"}},[a._v("解释JDBC抽象和DAO模块")])]),n("li",[n("a",{attrs:{href:"#spring-dao-有什么用"}},[a._v("spring DAO 有什么用？")])]),n("li",[n("a",{attrs:{href:"#spring-jdbc-api-中存在哪些类"}},[a._v("spring JDBC API 中存在哪些类？")])]),n("li",[n("a",{attrs:{href:"#jdbctemplate是什么"}},[a._v("JdbcTemplate是什么")])]),n("li",[n("a",{attrs:{href:"#使用spring通过什么方式访问hibernate-使用-spring-访问-hibernate-的方法有哪些"}},[a._v("使用Spring通过什么方式访问Hibernate？使用 Spring 访问 Hibernate 的方法有哪些？")])]),n("li",[n("a",{attrs:{href:"#如何通过hibernatedaosupport将spring和hibernate结合起来"}},[a._v("如何通过HibernateDaoSupport将Spring和Hibernate结合起来？")])]),n("li",[n("a",{attrs:{href:"#spring支持的事务管理类型-spring-事务实现方式有哪些"}},[a._v("Spring支持的事务管理类型， spring 事务实现方式有哪些？")])]),n("li",[n("a",{attrs:{href:"#spring事务的实现方式和实现原理"}},[a._v("Spring事务的实现方式和实现原理")])]),n("li",[n("a",{attrs:{href:"#说一下spring的事务传播行为"}},[a._v("说一下Spring的事务传播行为")])]),n("li",[n("a",{attrs:{href:"#说一下-spring-的事务隔离"}},[a._v("说一下 spring 的事务隔离？")])]),n("li",[n("a",{attrs:{href:"#spring框架的事务管理有哪些优点"}},[a._v("Spring框架的事务管理有哪些优点？")])]),n("li",[n("a",{attrs:{href:"#你更倾向用那种事务管理类型"}},[a._v("你更倾向用那种事务管理类型？")])])])]),n("li",[n("a",{attrs:{href:"#spring面向切面编程-aop-13"}},[a._v("Spring面向切面编程(AOP)（13）")]),n("ul",[n("li",[n("a",{attrs:{href:"#什么是aop"}},[a._v("什么是AOP")])]),n("li",[n("a",{attrs:{href:"#spring-aop-and-aspectj-aop-有什么区别-aop-有哪些实现方式"}},[a._v("Spring AOP and AspectJ AOP 有什么区别？AOP 有哪些实现方式？")])]),n("li",[n("a",{attrs:{href:"#jdk动态代理和cglib动态代理的区别"}},[a._v("JDK动态代理和CGLIB动态代理的区别")])]),n("li",[n("a",{attrs:{href:"#如何理解-spring-中的代理"}},[a._v("如何理解 Spring 中的代理？")])]),n("li",[n("a",{attrs:{href:"#解释一下spring-aop里面的几个名词"}},[a._v("解释一下Spring AOP里面的几个名词")])]),n("li",[n("a",{attrs:{href:"#spring在运行时通知对象"}},[a._v("Spring在运行时通知对象")])]),n("li",[n("a",{attrs:{href:"#spring只支持方法级别的连接点"}},[a._v("Spring只支持方法级别的连接点")])]),n("li",[n("a",{attrs:{href:"#在spring-aop-中-关注点和横切关注的区别是什么-在-spring-aop-中-concern-和-cross-cutting-concern-的不同之处"}},[a._v("在Spring AOP 中，关注点和横切关注的区别是什么？在 spring aop 中 concern 和 cross-cutting concern 的不同之处")])]),n("li",[n("a",{attrs:{href:"#spring通知有哪些类型"}},[a._v("Spring通知有哪些类型？")])]),n("li",[n("a",{attrs:{href:"#什么是切面-aspect"}},[a._v("什么是切面 Aspect？")])]),n("li",[n("a",{attrs:{href:"#解释基于xml-schema方式的切面实现"}},[a._v("解释基于XML Schema方式的切面实现")])]),n("li",[n("a",{attrs:{href:"#解释基于注解的切面实现"}},[a._v("解释基于注解的切面实现")])]),n("li",[n("a",{attrs:{href:"#有几种不同类型的自动代理"}},[a._v("有几种不同类型的自动代理？")])])])]),n("li",[n("a",{attrs:{href:"#参考文章"}},[a._v("参考文章")])])])]),n("p"),a._v(" "),n("h2",{attrs:{id:"spring概述-10"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring概述-10"}},[a._v("#")]),a._v(" Spring概述（10）")]),a._v(" "),n("h3",{attrs:{id:"什么是spring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是spring"}},[a._v("#")]),a._v(" 什么是spring?")]),a._v(" "),n("p",[a._v("Spring是"),n("strong",[a._v("一个轻量级Java开发框架")]),a._v("，最早有"),n("strong",[a._v("Rod Johnson")]),a._v("创建，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的JavaSE/JavaEE full-stack（一站式）轻量级开源框架，为开发Java应用程序提供全面的基础架构支持。Spring负责基础架构，因此Java开发者可以专注于应用程序的开发。")]),a._v(" "),n("p",[a._v("Spring最根本的使命是"),n("strong",[a._v("解决企业级应用开发的复杂性，即简化Java开发")]),a._v("。")]),a._v(" "),n("p",[a._v("Spring可以做很多事情，它为企业级开发提供给了丰富的功能，但是这些功能的底层都依赖于它的两个核心特性，也就是"),n("strong",[a._v("依赖注入（dependency injection，DI）**和**面向切面编程（aspect-oriented programming，AOP）")]),a._v("。")]),a._v(" "),n("p",[a._v("为了降低Java开发的复杂性，Spring采取了以下4种关键策略")]),a._v(" "),n("ul",[n("li",[a._v("基于POJO的轻量级和最小侵入性编程；")]),a._v(" "),n("li",[a._v("通过依赖注入和面向接口实现松耦合；")]),a._v(" "),n("li",[a._v("基于切面和惯例进行声明式编程；")]),a._v(" "),n("li",[a._v("通过切面和模板减少样板式代码。")])]),a._v(" "),n("h3",{attrs:{id:"spring框架的设计目标-设计理念-和核心是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring框架的设计目标-设计理念-和核心是什么"}},[a._v("#")]),a._v(" Spring框架的设计目标，设计理念，和核心是什么")]),a._v(" "),n("p",[n("strong",[a._v("Spring设计目标")]),a._v("：Spring为开发者提供一个一站式轻量级应用开发平台；")]),a._v(" "),n("p",[n("strong",[a._v("Spring设计理念")]),a._v("：在JavaEE开发中，支持POJO和JavaBean开发方式，使应用面向接口开发，充分支持OO（面向对象）设计方法；Spring通过IoC容器实现对象耦合关系的管理，并实现依赖反转，将对象之间的依赖关系交给IoC容器，实现解耦；")]),a._v(" "),n("p",[n("strong",[a._v("Spring框架的核心")]),a._v("：IoC容器和AOP模块。通过IoC容器管理POJO对象以及他们之间的耦合关系；通过AOP以动态非侵入的方式增强服务。")]),a._v(" "),n("p",[a._v("IoC让相互协作的组件保持松散的耦合，而AOP编程允许你把遍布于应用各层的功能分离出来形成可重用的功能组件。")]),a._v(" "),n("h3",{attrs:{id:"spring的优缺点是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring的优缺点是什么"}},[a._v("#")]),a._v(" Spring的优缺点是什么？")]),a._v(" "),n("p",[a._v("优点")]),a._v(" "),n("ul",[n("li",[n("p",[a._v("方便解耦，简化开发")]),a._v(" "),n("p",[a._v("Spring就是一个大工厂，可以将所有对象的创建和依赖关系的维护，交给Spring管理。")])]),a._v(" "),n("li",[n("p",[a._v("AOP编程的支持")]),a._v(" "),n("p",[a._v("Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能。")])]),a._v(" "),n("li",[n("p",[a._v("声明式事务的支持")]),a._v(" "),n("p",[a._v("只需要通过配置就可以完成对事务的管理，而无需手动编程。")])]),a._v(" "),n("li",[n("p",[a._v("方便程序的测试")]),a._v(" "),n("p",[a._v("Spring对Junit4支持，可以通过注解方便的测试Spring程序。")])]),a._v(" "),n("li",[n("p",[a._v("方便集成各种优秀框架")]),a._v(" "),n("p",[a._v("Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架的直接支持（如：Struts、Hibernate、MyBatis等）。")])]),a._v(" "),n("li",[n("p",[a._v("降低JavaEE API的使用难度")]),a._v(" "),n("p",[a._v("Spring对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。")])])]),a._v(" "),n("p",[a._v("缺点")]),a._v(" "),n("ul",[n("li",[a._v("Spring明明一个很轻量级的框架，却给人感觉大而全")]),a._v(" "),n("li",[a._v("Spring依赖反射，反射影响性能")]),a._v(" "),n("li",[a._v("使用门槛升高，入门Spring需要较长时间")])]),a._v(" "),n("h3",{attrs:{id:"spring有哪些应用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring有哪些应用场景"}},[a._v("#")]),a._v(" Spring有哪些应用场景")]),a._v(" "),n("p",[n("strong",[a._v("应用场景")]),a._v("：JavaEE企业应用开发，包括SSH、SSM等")]),a._v(" "),n("p",[n("strong",[a._v("Spring价值")]),a._v("：")]),a._v(" "),n("ul",[n("li",[a._v("Spring是非侵入式的框架，目标是使应用程序代码对框架依赖最小化；")]),a._v(" "),n("li",[a._v("Spring提供一个一致的编程模型，使应用直接使用POJO开发，与运行环境隔离开来；")]),a._v(" "),n("li",[a._v("Spring推动应用设计风格向面向对象和面向接口开发转变，提高了代码的重用性和可测试性；")])]),a._v(" "),n("h3",{attrs:{id:"spring由哪些模块组成"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring由哪些模块组成"}},[a._v("#")]),a._v(" Spring由哪些模块组成？")]),a._v(" "),n("p",[a._v("Spring 总共大约有 20 个模块， 由 1300 多个不同的文件构成。 而这些组件被分别整合在"),n("code",[a._v("核心容器（Core Container）")]),a._v(" 、 "),n("code",[a._v("AOP（Aspect Oriented Programming）和设备支持（Instrmentation）")]),a._v(" 、"),n("code",[a._v("数据访问与集成（Data Access/Integeration）")]),a._v(" 、 "),n("code",[a._v("Web")]),a._v("、 "),n("code",[a._v("消息（Messaging）")]),a._v(" 、 "),n("code",[a._v("Test")]),a._v("等 6 个模块中。 以下是 Spring 5 的模块结构图：")]),a._v(" "),n("img",{staticClass:"zoom-custom-imgs",attrs:{src:a.$withBase("/assets/img/post/springbasic/springbasic-1.png"),alt:"wxmp"}}),a._v(" "),n("ul",[n("li",[a._v("spring core：提供了框架的基本组成部分，包括控制反转（Inversion of Control，IOC）和依赖注入（Dependency Injection，DI）功能。")]),a._v(" "),n("li",[a._v("spring beans：提供了BeanFactory，是工厂模式的一个经典实现，Spring将管理对象称为Bean。")]),a._v(" "),n("li",[a._v("spring context：构建于 core 封装包基础上的 context 封装包，提供了一种框架式的对象访问方法。")]),a._v(" "),n("li",[a._v("spring jdbc：提供了一个JDBC的抽象层，消除了烦琐的JDBC编码和数据库厂商特有的错误代码解析， 用于简化JDBC。")]),a._v(" "),n("li",[a._v("spring aop：提供了面向切面的编程实现，让你可以自定义拦截器、切点等。")]),a._v(" "),n("li",[a._v("spring Web：提供了针对 Web 开发的集成特性，例如文件上传，利用 servlet listeners 进行 ioc 容器初始化和针对 Web 的 ApplicationContext。")]),a._v(" "),n("li",[a._v("spring test：主要为测试提供支持的，支持使用JUnit或TestNG对Spring组件进行单元测试和集成测试。")])]),a._v(" "),n("h3",{attrs:{id:"spring-框架中都用到了哪些设计模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-框架中都用到了哪些设计模式"}},[a._v("#")]),a._v(" Spring 框架中都用到了哪些设计模式？")]),a._v(" "),n("ul",[n("li",[n("ol",[n("li",[a._v("工厂模式：BeanFactory就是简单工厂模式的体现，用来创建对象的实例；")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[a._v("单例模式：Bean默认为单例模式。")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"3"}},[n("li",[a._v("代理模式：Spring的AOP功能用到了JDK的动态代理和CGLIB字节码生成技术；")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"4"}},[n("li",[a._v("模板方法：用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"5"}},[n("li",[a._v("观察者模式：定义对象键一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知被制动更新，如Spring中listener的实现–ApplicationListener。")])])])]),a._v(" "),n("h3",{attrs:{id:"详细讲解一下核心容器-spring-context应用上下文-模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#详细讲解一下核心容器-spring-context应用上下文-模块"}},[a._v("#")]),a._v(" 详细讲解一下核心容器（spring context应用上下文) 模块")]),a._v(" "),n("p",[a._v("这是基本的Spring模块，提供spring 框架的基础功能，BeanFactory 是 任何以spring为基础的应用的核心。Spring 框架建立在此模块之上，它使Spring成为一个容器。")]),a._v(" "),n("p",[a._v("Bean 工厂是工厂模式的一个实现，提供了控制反转功能，用来把应用的配置和依赖从真正的应用代码中分离。最常用的就是org.springframework.beans.factory.xml.XmlBeanFactory ，它根据XML文件中的定义加载beans。该容器从XML 文件读取配置元数据并用它去创建一个完全配置的系统或应用。")]),a._v(" "),n("h3",{attrs:{id:"spring框架中有哪些不同类型的事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring框架中有哪些不同类型的事件"}},[a._v("#")]),a._v(" Spring框架中有哪些不同类型的事件")]),a._v(" "),n("p",[a._v("Spring 提供了以下5种标准的事件：")]),a._v(" "),n("ul",[n("li",[n("ol",[n("li",[a._v("上下文更新事件（ContextRefreshedEvent）：在调用ConfigurableApplicationContext 接口中的refresh()方法时被触发。")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[a._v("上下文开始事件（ContextStartedEvent）：当容器调用ConfigurableApplicationContext的Start()方法开始/重新开始容器时触发该事件。")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"3"}},[n("li",[a._v("上下文停止事件（ContextStoppedEvent）：当容器调用ConfigurableApplicationContext的Stop()方法停止容器时触发该事件。")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"4"}},[n("li",[a._v("上下文关闭事件（ContextClosedEvent）：当ApplicationContext被关闭时触发该事件。容器被关闭时，其管理的所有单例Bean都被销毁。")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"5"}},[n("li",[a._v("请求处理事件（RequestHandledEvent）：在Web应用中，当一个http请求（request）结束触发该事件。如果一个bean实现了ApplicationListener接口，当一个ApplicationEvent 被发布以后，bean会自动被通知。")])])])]),a._v(" "),n("h3",{attrs:{id:"spring-应用程序有哪些不同组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-应用程序有哪些不同组件"}},[a._v("#")]),a._v(" Spring 应用程序有哪些不同组件？")]),a._v(" "),n("p",[a._v("Spring 应用一般有以下组件：")]),a._v(" "),n("ul",[n("li",[a._v("接口 - 定义功能。")]),a._v(" "),n("li",[a._v("Bean 类 - 它包含属性，setter 和 getter 方法，函数等。")]),a._v(" "),n("li",[a._v("Bean 配置文件 - 包含类的信息以及如何配置它们。")]),a._v(" "),n("li",[a._v("Spring 面向切面编程（AOP） - 提供面向切面编程的功能。")]),a._v(" "),n("li",[a._v("用户程序 - 它使用接口。")])]),a._v(" "),n("h3",{attrs:{id:"使用-spring-有哪些方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-spring-有哪些方式"}},[a._v("#")]),a._v(" 使用 Spring 有哪些方式？")]),a._v(" "),n("p",[a._v("使用 Spring 有以下方式：")]),a._v(" "),n("ul",[n("li",[a._v("作为一个成熟的 Spring Web 应用程序。")]),a._v(" "),n("li",[a._v("作为第三方 Web 框架，使用 Spring Frameworks 中间层。")]),a._v(" "),n("li",[a._v("作为企业级 Java Bean，它可以包装现有的 POJO（Plain Old Java Objects）。")]),a._v(" "),n("li",[a._v("用于远程使用。")])]),a._v(" "),n("h2",{attrs:{id:"spring控制反转-ioc-13"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring控制反转-ioc-13"}},[a._v("#")]),a._v(" Spring控制反转(IOC)（13）")]),a._v(" "),n("h3",{attrs:{id:"什么是spring-ioc-容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是spring-ioc-容器"}},[a._v("#")]),a._v(" 什么是Spring IOC 容器？")]),a._v(" "),n("p",[a._v("控制反转即IoC (Inversion of Control)，它把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的“控制反转”概念就是对组件对象控制权的转移，从程序代码本身转移到了外部容器。")]),a._v(" "),n("p",[a._v("Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。")]),a._v(" "),n("h3",{attrs:{id:"控制反转-ioc-有什么作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#控制反转-ioc-有什么作用"}},[a._v("#")]),a._v(" 控制反转(IoC)有什么作用")]),a._v(" "),n("ul",[n("li",[a._v("管理对象的创建和依赖关系的维护。对象的创建并不是一件简单的事，在对象关系比较复杂时，如果依赖关系需要程序猿来维护的话，那是相当头疼的")]),a._v(" "),n("li",[a._v("解耦，由容器去维护具体的对象")]),a._v(" "),n("li",[a._v("托管了类的产生过程，比如我们需要在类的产生过程中做一些处理，最直接的例子就是代理，如果有容器程序可以把这部分处理交给容器，应用程序则无需去关心类是如何完成代理的")])]),a._v(" "),n("h3",{attrs:{id:"ioc的优点是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ioc的优点是什么"}},[a._v("#")]),a._v(" IOC的优点是什么？")]),a._v(" "),n("ul",[n("li",[a._v("IOC 或 依赖注入把应用的代码量降到最低。")]),a._v(" "),n("li",[a._v("它使应用容易测试，单元测试不再需要单例和JNDI查找机制。")]),a._v(" "),n("li",[a._v("最小的代价和最小的侵入性使松散耦合得以实现。")]),a._v(" "),n("li",[a._v("IOC容器支持加载服务时的饿汉式初始化和懒加载。")])]),a._v(" "),n("h3",{attrs:{id:"spring-ioc-的实现机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc-的实现机制"}},[a._v("#")]),a._v(" Spring IoC 的实现机制")]),a._v(" "),n("p",[a._v("Spring 中的 IoC 的实现原理就是工厂模式加反射机制。")]),a._v(" "),n("p",[a._v("示例：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Fruit")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("abstract")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("eat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Apple")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Fruit")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("eat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Apple"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Orange")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Fruit")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("eat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Orange"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Factory")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Fruit")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getInstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Fruit")]),a._v(" f"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            f"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Fruit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("forName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("newInstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("printStackTrace")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Client")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Fruit")]),a._v(" f"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Factory")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getInstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"io.github.dunwu.spring.Apple"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("f"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("eat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("h3",{attrs:{id:"spring-的-ioc支持哪些功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-的-ioc支持哪些功能"}},[a._v("#")]),a._v(" Spring 的 IoC支持哪些功能")]),a._v(" "),n("p",[a._v("Spring 的 IoC 设计支持以下功能：")]),a._v(" "),n("ul",[n("li",[a._v("依赖注入")]),a._v(" "),n("li",[a._v("依赖检查")]),a._v(" "),n("li",[a._v("自动装配")]),a._v(" "),n("li",[a._v("支持集合")]),a._v(" "),n("li",[a._v("指定初始化方法和销毁方法")]),a._v(" "),n("li",[a._v("支持回调某些方法（但是需要实现 Spring 接口，略有侵入）")])]),a._v(" "),n("p",[a._v("其中，最重要的就是依赖注入，从 XML 的配置上说，即 ref 标签。对应 Spring RuntimeBeanReference 对象。")]),a._v(" "),n("p",[a._v("对于 IoC 来说，最重要的就是容器。容器管理着 Bean 的生命周期，控制着 Bean 的依赖注入。")]),a._v(" "),n("h3",{attrs:{id:"beanfactory-和-applicationcontext有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#beanfactory-和-applicationcontext有什么区别"}},[a._v("#")]),a._v(" BeanFactory 和 ApplicationContext有什么区别？")]),a._v(" "),n("p",[a._v("BeanFactory和ApplicationContext是Spring的两大核心接口，都可以当做Spring的容器。其中ApplicationContext是BeanFactory的子接口。")]),a._v(" "),n("p",[a._v("依赖关系")]),a._v(" "),n("p",[a._v("BeanFactory：是Spring里面最底层的接口，包含了各种Bean的定义，读取bean配置文档，管理bean的加载、实例化，控制bean的生命周期，维护bean之间的依赖关系。")]),a._v(" "),n("p",[a._v("ApplicationContext接口作为BeanFactory的派生，除了提供BeanFactory所具有的功能外，还提供了更完整的框架功能：")]),a._v(" "),n("ul",[n("li",[a._v("继承MessageSource，因此支持国际化。")]),a._v(" "),n("li",[a._v("统一的资源文件访问方式。")]),a._v(" "),n("li",[a._v("提供在监听器中注册bean的事件。")]),a._v(" "),n("li",[a._v("同时加载多个配置文件。")]),a._v(" "),n("li",[a._v("载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层。")])]),a._v(" "),n("p",[a._v("加载方式")]),a._v(" "),n("p",[a._v("BeanFactroy采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化。这样，我们就不能发现一些存在的Spring的配置问题。如果Bean的某一个属性没有注入，BeanFacotry加载后，直至第一次使用调用getBean方法才会抛出异常。")]),a._v(" "),n("p",[a._v("ApplicationContext，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误，这样有利于检查所依赖属性是否注入。 ApplicationContext启动后预载入所有的单实例Bean，通过预载入单实例bean ,确保当你需要的时候，你就不用等待，因为它们已经创建好了。")]),a._v(" "),n("p",[a._v("相对于基本的BeanFactory，ApplicationContext 唯一的不足是占用内存空间。当应用程序配置Bean较多时，程序启动较慢。")]),a._v(" "),n("p",[a._v("创建方式")]),a._v(" "),n("p",[a._v("BeanFactory通常以编程的方式被创建，ApplicationContext还能以声明的方式创建，如使用ContextLoader。")]),a._v(" "),n("p",[a._v("注册方式")]),a._v(" "),n("p",[a._v("BeanFactory和ApplicationContext都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册。")]),a._v(" "),n("h3",{attrs:{id:"spring-如何设计容器的-beanfactory和applicationcontext的关系详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-如何设计容器的-beanfactory和applicationcontext的关系详解"}},[a._v("#")]),a._v(" Spring 如何设计容器的，BeanFactory和ApplicationContext的关系详解")]),a._v(" "),n("p",[a._v("Spring 作者 Rod Johnson 设计了两个接口用以表示容器。")]),a._v(" "),n("ul",[n("li",[a._v("BeanFactory")]),a._v(" "),n("li",[a._v("ApplicationContext")])]),a._v(" "),n("p",[a._v("BeanFactory 简单粗暴，可以理解为就是个 HashMap，Key 是 BeanName，Value 是 Bean 实例。通常只提供注册（put），获取（get）这两个功能。我们可以称之为 "),n("strong",[a._v("“低级容器”")]),a._v("。")]),a._v(" "),n("p",[a._v("ApplicationContext 可以称之为 "),n("strong",[a._v("“高级容器”")]),a._v("。因为他比 BeanFactory 多了更多的功能。他继承了多个接口。因此具备了更多的功能。例如资源的获取，支持多种消息（例如 JSP tag 的支持），对 BeanFactory 多了工具级别的支持等待。所以你看他的名字，已经不是 BeanFactory 之类的工厂了，而是 “应用上下文”， 代表着整个大容器的所有功能。该接口定义了一个 refresh 方法，此方法是所有阅读 Spring 源码的人的最熟悉的方法，用于刷新整个容器，即重新加载/刷新所有的 bean。")]),a._v(" "),n("p",[a._v("当然，除了这两个大接口，还有其他的辅助接口，这里就不介绍他们了。")]),a._v(" "),n("p",[a._v("BeanFactory和ApplicationContext的关系")]),a._v(" "),n("p",[a._v("为了更直观的展示 “低级容器” 和 “高级容器” 的关系，这里通过常用的 ClassPathXmlApplicationContext 类来展示整个容器的层级 UML 关系。")]),a._v(" "),n("img",{staticClass:"zoom-custom-imgs",attrs:{src:a.$withBase("/assets/img/post/springbasic/springbasic-2.png"),alt:"wxmp"}}),a._v(" "),n("p",[a._v("有点复杂？ 先不要慌，我来解释一下。")]),a._v(" "),n("p",[a._v("最上面的是 BeanFactory，下面的 3 个绿色的，都是功能扩展接口，这里就不展开讲。")]),a._v(" "),n("p",[a._v("看下面的隶属 ApplicationContext 粉红色的 “高级容器”，依赖着 “低级容器”，这里说的是依赖，不是继承哦。他依赖着 “低级容器” 的 getBean 功能。而高级容器有更多的功能：支持不同的信息源头，可以访问文件资源，支持应用事件（Observer 模式）。")]),a._v(" "),n("p",[a._v("通常用户看到的就是 “高级容器”。 但 BeanFactory 也非常够用啦！")]),a._v(" "),n("p",[a._v("左边灰色区域的是 “低级容器”， 只负载加载 Bean，获取 Bean。容器其他的高级功能是没有的。例如上图画的 refresh 刷新 Bean 工厂所有配置，生命周期事件回调等。")]),a._v(" "),n("p",[a._v("小结")]),a._v(" "),n("p",[a._v("说了这么多，不知道你有没有理解Spring IoC？ 这里小结一下：IoC 在 Spring 里，只需要低级容器就可以实现，2 个步骤：")]),a._v(" "),n("ul",[n("li",[n("ol",[n("li",[a._v("加载配置文件，解析成 BeanDefinition 放在 Map 里。")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[a._v("调用 getBean 的时候，从 BeanDefinition 所属的 Map 里，拿出 Class 对象进行实例化，同时，如果有依赖关系，将递归调用 getBean 方法 —— 完成依赖注入。")])])])]),a._v(" "),n("p",[a._v("上面就是 Spring 低级容器（BeanFactory）的 IoC。")]),a._v(" "),n("p",[a._v("至于高级容器 ApplicationContext，他包含了低级容器的功能，当他执行 refresh 模板方法的时候，将刷新整个容器的 Bean。同时其作为高级容器，包含了太多的功能。一句话，他不仅仅是 IoC。他支持不同信息源头，支持 BeanFactory 工具类，支持层级容器，支持访问文件资源，支持事件发布通知，支持接口回调等等。")]),a._v(" "),n("h3",{attrs:{id:"applicationcontext通常的实现是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#applicationcontext通常的实现是什么"}},[a._v("#")]),a._v(" ApplicationContext通常的实现是什么？")]),a._v(" "),n("p",[n("strong",[a._v("FileSystemXmlApplicationContext")]),a._v(" ：此容器从一个XML文件中加载beans的定义，XML Bean 配置文件的全路径名必须提供给它的构造函数。")]),a._v(" "),n("p",[n("strong",[a._v("ClassPathXmlApplicationContext")]),a._v("：此容器也从一个XML文件中加载beans的定义，这里，你需要正确设置classpath因为这个容器将在classpath里找bean配置。")]),a._v(" "),n("p",[n("strong",[a._v("WebXmlApplicationContext")]),a._v("：此容器加载一个XML文件，此文件定义了一个WEB应用的所有bean。")]),a._v(" "),n("h3",{attrs:{id:"什么是spring的依赖注入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是spring的依赖注入"}},[a._v("#")]),a._v(" 什么是Spring的依赖注入？")]),a._v(" "),n("p",[a._v("控制反转IoC是一个很大的概念，可以用不同的方式来实现。其主要实现方式有两种：依赖注入和依赖查找")]),a._v(" "),n("p",[a._v("依赖注入：相对于IoC而言，依赖注入(DI)更加准确地描述了IoC的设计理念。所谓依赖注入（Dependency Injection），即组件之间的依赖关系由容器在应用系统运行期来决定，也就是由容器动态地将某种依赖关系的目标对象实例注入到应用系统中的各个关联的组件之中。组件不做定位查询，只提供普通的Java方法让容器去决定依赖关系。")]),a._v(" "),n("h3",{attrs:{id:"依赖注入的基本原则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入的基本原则"}},[a._v("#")]),a._v(" 依赖注入的基本原则")]),a._v(" "),n("p",[a._v("依赖注入的基本原则是：应用组件不应该负责查找资源或者其他依赖的协作对象。配置对象的工作应该由IoC容器负责，“查找资源”的逻辑应该从应用组件的代码中抽取出来，交给IoC容器负责。容器全权负责组件的装配，它会把符合依赖关系的对象通过属性（JavaBean中的setter）或者是构造器传递给需要的对象。")]),a._v(" "),n("h3",{attrs:{id:"依赖注入有什么优势"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入有什么优势"}},[a._v("#")]),a._v(" 依赖注入有什么优势")]),a._v(" "),n("p",[a._v("依赖注入之所以更流行是因为它是一种更可取的方式：让容器全权负责依赖查询，受管组件只需要暴露JavaBean的setter方法或者带参数的构造器或者接口，使容器可以在初始化时组装对象的依赖关系。其与依赖查找方式相比，主要优势为：")]),a._v(" "),n("ul",[n("li",[a._v("查找定位操作与应用代码完全无关。")]),a._v(" "),n("li",[a._v("不依赖于容器的API，可以很容易地在任何容器以外使用应用对象。")]),a._v(" "),n("li",[a._v("不需要特殊的接口，绝大多数对象可以做到完全不必依赖容器。")])]),a._v(" "),n("h3",{attrs:{id:"有哪些不同类型的依赖注入实现方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有哪些不同类型的依赖注入实现方式"}},[a._v("#")]),a._v(" 有哪些不同类型的依赖注入实现方式？")]),a._v(" "),n("p",[a._v("依赖注入是时下最流行的IoC实现方式，依赖注入分为接口注入（Interface Injection），Setter方法注入（Setter Injection）和构造器注入（Constructor Injection）三种方式。其中接口注入由于在灵活性和易用性比较差，现在从Spring4开始已被废弃。")]),a._v(" "),n("p",[n("strong",[a._v("构造器依赖注入")]),a._v("：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。")]),a._v(" "),n("p",[n("strong",[a._v("Setter方法注入")]),a._v("：Setter方法注入是容器通过调用无参构造器或无参static工厂 方法实例化bean之后，调用该bean的setter方法，即实现了基于setter的依赖注入。")]),a._v(" "),n("h3",{attrs:{id:"构造器依赖注入和-setter方法注入的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构造器依赖注入和-setter方法注入的区别"}},[a._v("#")]),a._v(" 构造器依赖注入和 Setter方法注入的区别")]),a._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("strong",[a._v("构造函数注入")])]),a._v(" "),n("th",[n("strong",[a._v("setter")]),a._v(" "),n("strong",[a._v("注入")])])])]),a._v(" "),n("tbody",[n("tr",[n("td",[a._v("没有部分注入")]),a._v(" "),n("td",[a._v("有部分注入")])]),a._v(" "),n("tr",[n("td",[a._v("不会覆盖 setter 属性")]),a._v(" "),n("td",[a._v("会覆盖 setter 属性")])]),a._v(" "),n("tr",[n("td",[a._v("任意修改都会创建一个新实例")]),a._v(" "),n("td",[a._v("任意修改不会创建一个新实例")])]),a._v(" "),n("tr",[n("td",[a._v("适用于设置很多属性")]),a._v(" "),n("td",[a._v("适用于设置少量属性")])])])]),a._v(" "),n("p",[a._v("两种依赖方式都可以使用，构造器注入和Setter方法注入。最好的解决方案是用构造器参数实现强制依赖，setter方法实现可选依赖。")]),a._v(" "),n("h2",{attrs:{id:"spring-beans-19"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-beans-19"}},[a._v("#")]),a._v(" Spring Beans（19）")]),a._v(" "),n("h3",{attrs:{id:"什么是spring-beans"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是spring-beans"}},[a._v("#")]),a._v(" 什么是Spring beans？")]),a._v(" "),n("p",[a._v("Spring beans 是那些形成Spring应用的主干的java对象。它们被Spring IOC容器初始化，装配，和管理。这些beans通过容器中配置的元数据创建。比如，以XML文件中 的形式定义。")]),a._v(" "),n("h3",{attrs:{id:"一个-spring-bean-定义-包含什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一个-spring-bean-定义-包含什么"}},[a._v("#")]),a._v(" 一个 Spring Bean 定义 包含什么？")]),a._v(" "),n("p",[a._v("一个Spring Bean 的定义包含容器必知的所有配置元数据，包括如何创建一个bean，它的生命周期详情及它的依赖。")]),a._v(" "),n("h3",{attrs:{id:"如何给spring-容器提供配置元数据-spring有几种配置方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何给spring-容器提供配置元数据-spring有几种配置方式"}},[a._v("#")]),a._v(" 如何给Spring 容器提供配置元数据？Spring有几种配置方式")]),a._v(" "),n("p",[a._v("这里有三种重要的方法给Spring 容器提供配置元数据。")]),a._v(" "),n("ul",[n("li",[a._v("XML配置文件。")]),a._v(" "),n("li",[a._v("基于注解的配置。")]),a._v(" "),n("li",[a._v("基于java的配置。")])]),a._v(" "),n("h3",{attrs:{id:"spring配置文件包含了哪些信息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring配置文件包含了哪些信息"}},[a._v("#")]),a._v(" Spring配置文件包含了哪些信息")]),a._v(" "),n("p",[a._v("Spring配置文件是个XML 文件，这个文件包含了类信息，描述了如何配置它们，以及如何相互调用。")]),a._v(" "),n("h3",{attrs:{id:"spring基于xml注入bean的几种方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring基于xml注入bean的几种方式"}},[a._v("#")]),a._v(" Spring基于xml注入bean的几种方式")]),a._v(" "),n("ul",[n("li",[n("ol",[n("li",[a._v("Set方法注入；")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[a._v("构造器注入：①通过index设置参数的位置；②通过type设置参数类型；")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"3"}},[n("li",[a._v("静态工厂注入；")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"4"}},[n("li",[a._v("实例工厂；")])])])]),a._v(" "),n("h3",{attrs:{id:"你怎样定义类的作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#你怎样定义类的作用域"}},[a._v("#")]),a._v(" 你怎样定义类的作用域？")]),a._v(" "),n("p",[a._v("当定义一个 在Spring里，我们还能给这个bean声明一个作用域。它可以通过bean 定义中的scope属性来定义。如，当Spring要在需要的时候每次生产一个新的bean实例，bean的scope属性被指定为prototype。另一方面，一个bean每次使用的时候必须返回同一个实例，这个bean的scope 属性 必须设为 singleton。")]),a._v(" "),n("h3",{attrs:{id:"解释spring支持的几种bean的作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解释spring支持的几种bean的作用域"}},[a._v("#")]),a._v(" 解释Spring支持的几种bean的作用域")]),a._v(" "),n("p",[a._v("Spring框架支持以下五种bean的作用域：")]),a._v(" "),n("ul",[n("li",[n("strong",[a._v("singleton :")]),a._v(" bean在每个Spring ioc 容器中只有一个实例。")]),a._v(" "),n("li",[n("strong",[a._v("prototype")]),a._v("：一个bean的定义可以有多个实例。")]),a._v(" "),n("li",[n("strong",[a._v("request")]),a._v("：每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。")]),a._v(" "),n("li",[n("strong",[a._v("session")]),a._v("：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。")]),a._v(" "),n("li",[n("strong",[a._v("global-session")]),a._v("：在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。")])]),a._v(" "),n("p",[n("strong",[a._v("注意：")]),a._v(" 缺省的Spring bean 的作用域是Singleton。使用 prototype 作用域需要慎重的思考，因为频繁创建和销毁 bean 会带来很大的性能开销。")]),a._v(" "),n("h3",{attrs:{id:"spring框架中的单例bean是线程安全的吗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring框架中的单例bean是线程安全的吗"}},[a._v("#")]),a._v(" Spring框架中的单例bean是线程安全的吗？")]),a._v(" "),n("p",[a._v("不是，Spring框架中的单例bean不是线程安全的。")]),a._v(" "),n("p",[a._v("spring 中的 bean 默认是单例模式，spring 框架并没有对单例 bean 进行多线程的封装处理。")]),a._v(" "),n("p",[a._v("实际上大部分时候 spring bean 无状态的（比如 dao 类），所有某种程度上来说 bean 也是安全的，但如果 bean 有状态的话（比如 view model 对象），那就要开发者自己去保证线程安全了，最简单的就是改变 bean 的作用域，把“singleton”变更为“prototype”，这样请求 bean 相当于 new Bean()了，所以就可以保证线程安全了。")]),a._v(" "),n("ul",[n("li",[a._v("有状态就是有数据存储功能。")]),a._v(" "),n("li",[a._v("无状态就是不会保存数据。")])]),a._v(" "),n("h3",{attrs:{id:"spring如何处理线程并发问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring如何处理线程并发问题"}},[a._v("#")]),a._v(" Spring如何处理线程并发问题？")]),a._v(" "),n("p",[a._v("在一般情况下，只有无状态的Bean才可以在多线程环境下共享，在Spring中，绝大部分Bean都可以声明为singleton作用域，因为Spring对一些Bean中非线程安全状态采用ThreadLocal进行处理，解决线程安全问题。")]),a._v(" "),n("p",[a._v("ThreadLocal和线程同步机制都是为了解决多线程中相同变量的访问冲突问题。同步机制采用了“时间换空间”的方式，仅提供一份变量，不同的线程在访问前需要获取锁，没获得锁的线程则需要排队。而ThreadLocal采用了“空间换时间”的方式。")]),a._v(" "),n("p",[a._v("ThreadLocal会为每一个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突。因为每一个线程都拥有自己的变量副本，从而也就没有必要对该变量进行同步了。ThreadLocal提供了线程安全的共享对象，在编写多线程代码时，可以把不安全的变量封装进ThreadLocal。")]),a._v(" "),n("h3",{attrs:{id:"解释spring框架中bean的生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解释spring框架中bean的生命周期"}},[a._v("#")]),a._v(" 解释Spring框架中bean的生命周期")]),a._v(" "),n("p",[a._v("在传统的Java应用中，bean的生命周期很简单。使用Java关键字new进行bean实例化，然后该bean就可以使用了。一旦该bean不再被使用，则由Java自动进行垃圾回收。相比之下，Spring容器中的bean的生命周期就显得相对复杂多了。正确理解Spring bean的生命周期非常重要，因为你或许要利用Spring提供的扩展点来自定义bean的创建过程。下图展示了bean装载到Spring应用上下文中的一个典型的生命周期过程。")]),a._v(" "),n("img",{staticClass:"zoom-custom-imgs",attrs:{src:a.$withBase("/assets/img/post/springbasic/springbasic-3.png"),alt:"wxmp"}}),a._v(" "),n("p",[a._v("bean在Spring容器中从创建到销毁经历了若干阶段，每一阶段都可以针对Spring如何管理bean进行个性化定制。")]),a._v(" "),n("p",[a._v("正如你所见，在bean准备就绪之前，bean工厂执行了若干启动步骤。")]),a._v(" "),n("p",[a._v("我们对上图进行详细描述：")]),a._v(" "),n("p",[a._v("Spring对bean进行实例化；")]),a._v(" "),n("p",[a._v("Spring将值和bean的引用注入到bean对应的属性中；")]),a._v(" "),n("p",[a._v("如果bean实现了BeanNameAware接口，Spring将bean的ID传递给setBean-Name()方法；")]),a._v(" "),n("p",[a._v("如果bean实现了BeanFactoryAware接口，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入；")]),a._v(" "),n("p",[a._v("如果bean实现了ApplicationContextAware接口，Spring将调用setApplicationContext()方法，将bean所在的应用上下文的引用传入进来；")]),a._v(" "),n("p",[a._v("如果bean实现了BeanPostProcessor接口，Spring将调用它们的post-ProcessBeforeInitialization()方法；")]),a._v(" "),n("p",[a._v("如果bean实现了InitializingBean接口，Spring将调用它们的after-PropertiesSet()方法。类似地，如果bean使用initmethod声明了初始化方法，该方法也会被调用；")]),a._v(" "),n("p",[a._v("如果bean实现了BeanPostProcessor接口，Spring将调用它们的post-ProcessAfterInitialization()方法；")]),a._v(" "),n("p",[a._v("此时，bean已经准备就绪，可以被应用程序使用了，它们将一直驻留在应用上下文中，直到该应用上下文被销毁；")]),a._v(" "),n("p",[a._v("如果bean实现了DisposableBean接口，Spring将调用它的destroy()接口方法。同样，如果bean使用destroy-method声明了销毁方法，该方法也会被调用。")]),a._v(" "),n("p",[a._v("现在你已经了解了如何创建和加载一个Spring容器。但是一个空的容器并没有太大的价值，在你把东西放进去之前，它里面什么都没有。为了从Spring的DI(依赖注入)中受益，我们必须将应用对象装配进Spring容器中。")]),a._v(" "),n("h3",{attrs:{id:"哪些是重要的bean生命周期方法-你能重载它们吗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#哪些是重要的bean生命周期方法-你能重载它们吗"}},[a._v("#")]),a._v(" 哪些是重要的bean生命周期方法？ 你能重载它们吗？")]),a._v(" "),n("p",[a._v("有两个重要的bean 生命周期方法，第一个是setup ， 它是在容器加载bean的时候被调用。第二个方法是 teardown 它是在容器卸载类的时候被调用。")]),a._v(" "),n("p",[a._v("bean 标签有两个重要的属性（init-method和destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。")]),a._v(" "),n("h3",{attrs:{id:"什么是spring的内部bean-什么是spring-inner-beans"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是spring的内部bean-什么是spring-inner-beans"}},[a._v("#")]),a._v(" 什么是Spring的内部bean？什么是Spring inner beans？")]),a._v(" "),n("p",[a._v("在Spring框架中，当一个bean仅被用作另一个bean的属性时，它能被声明为一个内部bean。内部bean可以用setter注入“属性”和构造方法注入“构造参数”的方式来实现，内部bean通常是匿名的，它们的Scope一般是prototype。")]),a._v(" "),n("h3",{attrs:{id:"在-spring中如何注入一个java集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在-spring中如何注入一个java集合"}},[a._v("#")]),a._v(" 在 Spring中如何注入一个java集合？")]),a._v(" "),n("p",[a._v("Spring提供以下几种集合的配置元素：")]),a._v(" "),n("p",[a._v("类型用于注入一列值，允许有相同的值。")]),a._v(" "),n("p",[a._v("类型用于注入一组值，不允许有相同的值。")]),a._v(" "),n("p",[a._v("类型用于注入一组键值对，键和值都可以为任意类型。")]),a._v(" "),n("p",[a._v("类型用于注入一组键值对，键和值都只能为String类型。")]),a._v(" "),n("h3",{attrs:{id:"什么是bean装配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是bean装配"}},[a._v("#")]),a._v(" 什么是bean装配？")]),a._v(" "),n("p",[a._v("装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关系，如何通过依赖注入来把它们装配到一起。")]),a._v(" "),n("h3",{attrs:{id:"什么是bean的自动装配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是bean的自动装配"}},[a._v("#")]),a._v(" 什么是bean的自动装配？")]),a._v(" "),n("p",[a._v("在Spring框架中，在配置文件中设定bean的依赖关系是一个很好的机制，Spring 容器能够自动装配相互合作的bean，这意味着容器不需要和配置，能通过Bean工厂自动处理bean之间的协作。这意味着 Spring可以通过向Bean Factory中注入的方式自动搞定bean之间的依赖关系。自动装配可以设置在每个bean上，也可以设定在特定的bean上。")]),a._v(" "),n("h3",{attrs:{id:"解释不同方式的自动装配-spring-自动装配-bean-有哪些方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解释不同方式的自动装配-spring-自动装配-bean-有哪些方式"}},[a._v("#")]),a._v(" 解释不同方式的自动装配，spring 自动装配 bean 有哪些方式？")]),a._v(" "),n("p",[a._v("在spring中，对象无需自己查找或创建与其关联的其他对象，由容器负责把需要相互协作的对象引用赋予各个对象，使用autowire来配置自动装载模式。")]),a._v(" "),n("p",[a._v("在Spring框架xml配置中共有5种自动装配：")]),a._v(" "),n("ul",[n("li",[a._v("no：默认的方式是不进行自动装配的，通过手工设置ref属性来进行装配bean。")]),a._v(" "),n("li",[a._v("byName：通过bean的名称进行自动装配，如果一个bean的 property 与另一bean 的name 相同，就进行自动装配。")]),a._v(" "),n("li",[a._v("byType：通过参数的数据类型进行自动装配。")]),a._v(" "),n("li",[a._v("constructor：利用构造函数进行装配，并且构造函数的参数通过byType进行装配。")]),a._v(" "),n("li",[a._v("autodetect：自动探测，如果有构造方法，通过 construct的方式自动装配，否则使用 byType的方式自动装配。")])]),a._v(" "),n("h3",{attrs:{id:"使用-autowired注解自动装配的过程是怎样的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-autowired注解自动装配的过程是怎样的"}},[a._v("#")]),a._v(" 使用@Autowired注解自动装配的过程是怎样的？")]),a._v(" "),n("p",[a._v("使用@Autowired注解来自动装配指定的bean。在使用@Autowired注解之前需要在Spring配置文件进行配置，"),n("code",[a._v("<context:annotation-config />")]),a._v("。")]),a._v(" "),n("p",[a._v("在启动spring IoC时，容器自动装载了一个AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IoC容器自动查找需要的bean，并装配给该对象的属性。在使用@Autowired时，首先在容器中查询对应类型的bean：")]),a._v(" "),n("ul",[n("li",[a._v("如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据；")]),a._v(" "),n("li",[a._v("如果查询的结果不止一个，那么@Autowired会根据名称来查找；")]),a._v(" "),n("li",[a._v("如果上述查找的结果为空，那么会抛出异常。解决方法时，使用required=false。")])]),a._v(" "),n("h3",{attrs:{id:"自动装配有哪些局限性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自动装配有哪些局限性"}},[a._v("#")]),a._v(" 自动装配有哪些局限性？")]),a._v(" "),n("p",[a._v("自动装配的局限性是：")]),a._v(" "),n("p",[n("strong",[a._v("重写")]),a._v("：你仍需用 和 配置来定义依赖，意味着总要重写自动装配。")]),a._v(" "),n("p",[n("strong",[a._v("基本数据类型")]),a._v("：你不能自动装配简单的属性，如基本数据类型，String字符串，和类。")]),a._v(" "),n("p",[n("strong",[a._v("模糊特性")]),a._v("：自动装配不如显式装配精确，如果有可能，建议使用显式装配。")]),a._v(" "),n("h3",{attrs:{id:"你可以在spring中注入一个null-和一个空字符串吗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#你可以在spring中注入一个null-和一个空字符串吗"}},[a._v("#")]),a._v(" 你可以在Spring中注入一个null 和一个空字符串吗？")]),a._v(" "),n("p",[a._v("可以。")]),a._v(" "),n("h2",{attrs:{id:"spring注解-8"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring注解-8"}},[a._v("#")]),a._v(" Spring注解（8）")]),a._v(" "),n("h3",{attrs:{id:"什么是基于java的spring注解配置-给一些注解的例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是基于java的spring注解配置-给一些注解的例子"}},[a._v("#")]),a._v(" 什么是基于Java的Spring注解配置? 给一些注解的例子")]),a._v(" "),n("p",[a._v("基于Java的配置，允许你在少量的Java注解的帮助下，进行你的大部分Spring配置而非通过XML文件。")]),a._v(" "),n("p",[a._v("以@Configuration 注解为例，它用来标记类可以当做一个bean的定义，被Spring IOC容器使用。")]),a._v(" "),n("p",[a._v("另一个例子是@Bean注解，它表示此方法将要返回一个对象，作为一个bean注册进Spring应用上下文。")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Configuration")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StudentConfig")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Bean")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StudentBean")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("myStudent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StudentBean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("h3",{attrs:{id:"怎样开启注解装配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#怎样开启注解装配"}},[a._v("#")]),a._v(" 怎样开启注解装配？")]),a._v(" "),n("p",[a._v("注解装配在默认情况下是不开启的，为了使用注解装配，我们必须在Spring配置文件中配置 "),n("code",[a._v("<context:annotation-config/>")]),a._v("元素。")]),a._v(" "),n("h3",{attrs:{id:"component-controller-repository-service-有何区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#component-controller-repository-service-有何区别"}},[a._v("#")]),a._v(" @Component, @Controller, @Repository, @Service 有何区别？")]),a._v(" "),n("p",[a._v("@Component：这将 java 类标记为 bean。它是任何 Spring 管理组件的通用构造型。spring 的组件扫描机制现在可以将其拾取并将其拉入应用程序环境中。")]),a._v(" "),n("p",[a._v("@Controller：这将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IoC 容器中。")]),a._v(" "),n("p",[a._v("@Service：此注解是组件注解的特化。它不会对 @Component 注解提供任何其他行为。您可以在服务层类中使用 @Service 而不是 @Component，因为它以更好的方式指定了意图。")]),a._v(" "),n("p",[a._v("@Repository：这个注解是具有类似用途和功能的 @Component 注解的特化。它为 DAO 提供了额外的好处。它将 DAO 导入 IoC 容器，并使未经检查的异常有资格转换为 Spring DataAccessException。")]),a._v(" "),n("h3",{attrs:{id:"required-注解有什么作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#required-注解有什么作用"}},[a._v("#")]),a._v(" @Required 注解有什么作用")]),a._v(" "),n("p",[a._v("这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动装配，若@Required注解的bean属性未被设置，容器将抛出BeanInitializationException。示例：")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Employee")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Required")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("setName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" string "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("h3",{attrs:{id:"autowired-注解有什么作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#autowired-注解有什么作用"}},[a._v("#")]),a._v(" @Autowired 注解有什么作用")]),a._v(" "),n("p",[a._v("@Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为false）。@Autowired 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required一样，修饰setter方法、构造器、属性或者具有任意名称和/或多个参数的PN方法。")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Employee")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Autowired")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("setName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" string "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),n("h3",{attrs:{id:"autowired和-resource之间的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#autowired和-resource之间的区别"}},[a._v("#")]),a._v(" @Autowired和@Resource之间的区别")]),a._v(" "),n("p",[a._v("@Autowired可用于：构造函数、成员变量、Setter方法")]),a._v(" "),n("p",[a._v("@Autowired和@Resource之间的区别")]),a._v(" "),n("ul",[n("li",[a._v("@Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为false）。")]),a._v(" "),n("li",[a._v("@Resource默认是按照名称来装配注入的，只有当找不到与名称匹配的bean才会按照类型来装配注入。")])]),a._v(" "),n("h3",{attrs:{id:"qualifier-注解有什么作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#qualifier-注解有什么作用"}},[a._v("#")]),a._v(" @Qualifier 注解有什么作用")]),a._v(" "),n("p",[a._v("当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用@Qualifier 注解和 @Autowired 通过指定应该装配哪个确切的 bean 来消除歧义。")]),a._v(" "),n("h3",{attrs:{id:"requestmapping-注解有什么用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#requestmapping-注解有什么用"}},[a._v("#")]),a._v(" @RequestMapping 注解有什么用？")]),a._v(" "),n("p",[a._v("@RequestMapping 注解用于将特定 HTTP 请求方法映射到将处理相应请求的控制器中的特定类/方法。此注释可应用于两个级别：")]),a._v(" "),n("ul",[n("li",[a._v("类级别：映射请求的 URL")]),a._v(" "),n("li",[a._v("方法级别：映射 URL 以及 HTTP 请求方法")])]),a._v(" "),n("h2",{attrs:{id:"spring数据访问-14"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring数据访问-14"}},[a._v("#")]),a._v(" Spring数据访问（14）")]),a._v(" "),n("h3",{attrs:{id:"解释对象-关系映射集成模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解释对象-关系映射集成模块"}},[a._v("#")]),a._v(" 解释对象/关系映射集成模块")]),a._v(" "),n("p",[a._v("Spring 通过提供ORM模块，支持我们在直接JDBC之上使用一个对象/关系映射映射(ORM)工具，Spring 支持集成主流的ORM框架，如Hiberate，JDO和 iBATIS，JPA，TopLink，JDO，OJB 。Spring的事务管理同样支持以上所有ORM框架及JDBC。")]),a._v(" "),n("h3",{attrs:{id:"在spring框架中如何更有效地使用jdbc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在spring框架中如何更有效地使用jdbc"}},[a._v("#")]),a._v(" 在Spring框架中如何更有效地使用JDBC？")]),a._v(" "),n("p",[a._v("使用Spring JDBC 框架，资源管理和错误处理的代价都会被减轻。所以开发者只需写statements 和 queries从数据存取数据，JDBC也可以在Spring框架提供的模板类的帮助下更有效地被使用，这个模板叫JdbcTemplate")]),a._v(" "),n("h3",{attrs:{id:"解释jdbc抽象和dao模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解释jdbc抽象和dao模块"}},[a._v("#")]),a._v(" 解释JDBC抽象和DAO模块")]),a._v(" "),n("p",[a._v("通过使用JDBC抽象和DAO模块，保证数据库代码的简洁，并能避免数据库资源错误关闭导致的问题，它在各种不同的数据库的错误信息之上，提供了一个统一的异常访问层。它还利用Spring的AOP 模块给Spring应用中的对象提供事务管理服务。")]),a._v(" "),n("h3",{attrs:{id:"spring-dao-有什么用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-dao-有什么用"}},[a._v("#")]),a._v(" spring DAO 有什么用？")]),a._v(" "),n("p",[a._v("Spring DAO（数据访问对象） 使得 JDBC，Hibernate 或 JDO 这样的数据访问技术更容易以一种统一的方式工作。这使得用户容易在持久性技术之间切换。它还允许您在编写代码时，无需考虑捕获每种技术不同的异常。")]),a._v(" "),n("h3",{attrs:{id:"spring-jdbc-api-中存在哪些类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-jdbc-api-中存在哪些类"}},[a._v("#")]),a._v(" spring JDBC API 中存在哪些类？")]),a._v(" "),n("p",[a._v("JdbcTemplate")]),a._v(" "),n("p",[a._v("SimpleJdbcTemplate")]),a._v(" "),n("p",[a._v("NamedParameterJdbcTemplate")]),a._v(" "),n("p",[a._v("SimpleJdbcInsert")]),a._v(" "),n("p",[a._v("SimpleJdbcCall")]),a._v(" "),n("h3",{attrs:{id:"jdbctemplate是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jdbctemplate是什么"}},[a._v("#")]),a._v(" JdbcTemplate是什么")]),a._v(" "),n("p",[a._v("JdbcTemplate 类提供了很多便利的方法解决诸如把数据库数据转变成基本数据类型或对象，执行写好的或可调用的数据库操作语句，提供自定义的数据错误处理。")]),a._v(" "),n("h3",{attrs:{id:"使用spring通过什么方式访问hibernate-使用-spring-访问-hibernate-的方法有哪些"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用spring通过什么方式访问hibernate-使用-spring-访问-hibernate-的方法有哪些"}},[a._v("#")]),a._v(" 使用Spring通过什么方式访问Hibernate？使用 Spring 访问 Hibernate 的方法有哪些？")]),a._v(" "),n("p",[a._v("在Spring中有两种方式访问Hibernate：")]),a._v(" "),n("ul",[n("li",[a._v("使用 Hibernate 模板和回调进行控制反转")]),a._v(" "),n("li",[a._v("扩展 HibernateDAOSupport 并应用 AOP 拦截器节点")])]),a._v(" "),n("h3",{attrs:{id:"如何通过hibernatedaosupport将spring和hibernate结合起来"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何通过hibernatedaosupport将spring和hibernate结合起来"}},[a._v("#")]),a._v(" 如何通过HibernateDaoSupport将Spring和Hibernate结合起来？")]),a._v(" "),n("p",[a._v("用Spring的 SessionFactory 调用 LocalSessionFactory。集成过程分三步：")]),a._v(" "),n("ul",[n("li",[a._v("配置the Hibernate SessionFactory")]),a._v(" "),n("li",[a._v("继承HibernateDaoSupport实现一个DAO")]),a._v(" "),n("li",[a._v("在AOP支持的事务中装配")])]),a._v(" "),n("h3",{attrs:{id:"spring支持的事务管理类型-spring-事务实现方式有哪些"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring支持的事务管理类型-spring-事务实现方式有哪些"}},[a._v("#")]),a._v(" Spring支持的事务管理类型， spring 事务实现方式有哪些？")]),a._v(" "),n("p",[a._v("Spring支持两种类型的事务管理：")]),a._v(" "),n("p",[n("strong",[a._v("编程式事务管理")]),a._v("：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。")]),a._v(" "),n("p",[n("strong",[a._v("声明式事务管理")]),a._v("：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。")]),a._v(" "),n("h3",{attrs:{id:"spring事务的实现方式和实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring事务的实现方式和实现原理"}},[a._v("#")]),a._v(" Spring事务的实现方式和实现原理")]),a._v(" "),n("p",[a._v("Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，spring是无法提供事务功能的。真正的数据库层的事务提交和回滚是通过binlog或者redo log实现的。")]),a._v(" "),n("h3",{attrs:{id:"说一下spring的事务传播行为"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#说一下spring的事务传播行为"}},[a._v("#")]),a._v(" 说一下Spring的事务传播行为")]),a._v(" "),n("p",[a._v("spring事务的传播行为说的是，当多个事务同时存在的时候，spring如何处理这些事务的行为。")]),a._v(" "),n("blockquote",[n("p",[a._v("① PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。")]),a._v(" "),n("p",[a._v("② PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。")]),a._v(" "),n("p",[a._v("③ PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。")]),a._v(" "),n("p",[a._v("④ PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。")]),a._v(" "),n("p",[a._v("⑤ PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。")]),a._v(" "),n("p",[a._v("⑥ PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。")]),a._v(" "),n("p",[a._v("⑦ PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则按REQUIRED属性执行。")])]),a._v(" "),n("h3",{attrs:{id:"说一下-spring-的事务隔离"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#说一下-spring-的事务隔离"}},[a._v("#")]),a._v(" 说一下 spring 的事务隔离？")]),a._v(" "),n("p",[a._v("spring 有五大隔离级别，默认值为 ISOLATION_DEFAULT（使用数据库的设置），其他四个隔离级别和数据库的隔离级别一致：")]),a._v(" "),n("ul",[n("li",[n("ol",[n("li",[a._v("ISOLATION_DEFAULT：用底层数据库的设置隔离级别，数据库设置的是什么我就用什么；")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[a._v("ISOLATION_READ_UNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）；")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"3"}},[n("li",[a._v("ISOLATION_READ_COMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读），SQL server 的默认级别；")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"4"}},[n("li",[a._v("ISOLATION_REPEATABLE_READ：可重复读，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读），MySQL 的默认级别；")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"5"}},[n("li",[a._v("ISOLATION_SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。")])])])]),a._v(" "),n("p",[n("strong",[a._v("脏读")]),a._v(" ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，此时该事务还未提交，然后另一个事务尝试读取到了记录 A。")]),a._v(" "),n("p",[n("strong",[a._v("不可重复读")]),a._v(" ：是指在一个事务内，多次读同一数据。")]),a._v(" "),n("p",[n("strong",[a._v("幻读")]),a._v(" ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了。")]),a._v(" "),n("h3",{attrs:{id:"spring框架的事务管理有哪些优点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring框架的事务管理有哪些优点"}},[a._v("#")]),a._v(" Spring框架的事务管理有哪些优点？")]),a._v(" "),n("ul",[n("li",[a._v("为不同的事务API 如 JTA，JDBC，Hibernate，JPA 和JDO，提供一个不变的编程模式。")]),a._v(" "),n("li",[a._v("为编程式事务管理提供了一套简单的API而不是一些复杂的事务API")]),a._v(" "),n("li",[a._v("支持声明式事务管理。")]),a._v(" "),n("li",[a._v("和Spring各种数据访问抽象层很好得集成。")])]),a._v(" "),n("h3",{attrs:{id:"你更倾向用那种事务管理类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#你更倾向用那种事务管理类型"}},[a._v("#")]),a._v(" 你更倾向用那种事务管理类型？")]),a._v(" "),n("p",[a._v("大多数Spring框架的用户选择声明式事务管理，因为它对应用代码的影响最小，因此更符合一个无侵入的轻量级容器的思想。声明式事务管理要优于编程式事务管理，虽然比编程式事务管理（这种方式允许你通过代码控制事务）少了一点灵活性。唯一不足地方是，最细粒度只能作用到方法级别，无法做到像编程式事务那样可以作用到代码块级别。")]),a._v(" "),n("h2",{attrs:{id:"spring面向切面编程-aop-13"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring面向切面编程-aop-13"}},[a._v("#")]),a._v(" Spring面向切面编程(AOP)（13）")]),a._v(" "),n("h3",{attrs:{id:"什么是aop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是aop"}},[a._v("#")]),a._v(" 什么是AOP")]),a._v(" "),n("p",[a._v("OOP(Object-Oriented Programming)面向对象编程，允许开发者定义纵向的关系，但并适用于定义横向的关系，导致了大量代码的重复，而不利于各个模块的重用。")]),a._v(" "),n("p",[a._v("AOP(Aspect-Oriented Programming)，一般称为面向切面编程，作为面向对象的一种补充，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。可用于权限认证、日志、事务处理等。")]),a._v(" "),n("h3",{attrs:{id:"spring-aop-and-aspectj-aop-有什么区别-aop-有哪些实现方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop-and-aspectj-aop-有什么区别-aop-有哪些实现方式"}},[a._v("#")]),a._v(" Spring AOP and AspectJ AOP 有什么区别？AOP 有哪些实现方式？")]),a._v(" "),n("p",[a._v("AOP实现的关键在于 代理模式，AOP代理主要分为静态代理和动态代理。静态代理的代表为AspectJ；动态代理则以Spring AOP为代表。")]),a._v(" "),n("p",[a._v("（1）AspectJ是静态代理的增强，所谓静态代理，就是AOP框架会在编译阶段生成AOP代理类，因此也称为编译时增强，他会在编译阶段将AspectJ(切面)织入到Java字节码中，运行的时候就是增强之后的AOP对象。")]),a._v(" "),n("p",[a._v("（2）Spring AOP使用的动态代理，所谓的动态代理就是说AOP框架不会去修改字节码，而是每次运行时在内存中临时为方法生成一个AOP对象，这个AOP对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。")]),a._v(" "),n("h3",{attrs:{id:"jdk动态代理和cglib动态代理的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jdk动态代理和cglib动态代理的区别"}},[a._v("#")]),a._v(" JDK动态代理和CGLIB动态代理的区别")]),a._v(" "),n("p",[a._v("Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理：")]),a._v(" "),n("ul",[n("li",[a._v("JDK动态代理只提供接口的代理，不支持类的代理。核心InvocationHandler接口和Proxy类，InvocationHandler 通过invoke()方法反射来调用目标类中的代码，动态地将横切逻辑和业务编织在一起；接着，Proxy利用 InvocationHandler动态创建一个符合某一接口的的实例, 生成目标类的代理对象。")]),a._v(" "),n("li",[a._v("如果代理类没有实现 InvocationHandler 接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成指定类的一个子类对象，并覆盖其中特定方法并添加增强代码，从而实现AOP。CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。")])]),a._v(" "),n("p",[a._v("静态代理与动态代理区别在于生成AOP代理对象的时机不同，相对来说AspectJ的静态代理方式具有更好的性能，但是AspectJ需要特定的编译器进行处理，而Spring AOP则无需特定的编译器处理。")]),a._v(" "),n("blockquote",[n("p",[a._v("InvocationHandler 的 invoke(Object proxy,Method method,Object[] args)：proxy是最终生成的代理实例; method 是被代理目标实例的某个具体方法; args 是被代理目标实例某个方法的具体入参, 在方法反射调用时使用。")])]),a._v(" "),n("h3",{attrs:{id:"如何理解-spring-中的代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何理解-spring-中的代理"}},[a._v("#")]),a._v(" 如何理解 Spring 中的代理？")]),a._v(" "),n("p",[a._v("将 Advice 应用于目标对象后创建的对象称为代理。在客户端对象的情况下，目标对象和代理对象是相同的。")]),a._v(" "),n("p",[a._v("Advice + Target Object = Proxy")]),a._v(" "),n("h3",{attrs:{id:"解释一下spring-aop里面的几个名词"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解释一下spring-aop里面的几个名词"}},[a._v("#")]),a._v(" 解释一下Spring AOP里面的几个名词")]),a._v(" "),n("p",[a._v("（1）切面（Aspect）：切面是通知和切点的结合。通知和切点共同定义了切面的全部内容。 在Spring AOP中，切面可以使用通用类（基于模式的风格） 或者在普通类中以 @AspectJ 注解来实现。")]),a._v(" "),n("p",[a._v("（2）连接点（Join point）：指方法，在Spring AOP中，一个连接点 总是 代表一个方法的执行。 应用可能有数以千计的时机应用通知。这些时机被称为连接点。连接点是在应用执行过程中能够插入切面的一个点。这个点可以是调用方法时、抛出异常时、甚至修改一个字段时。切面代码可以利用这些点插入到应用的正常流程之中，并添加新的行为。")]),a._v(" "),n("p",[a._v("（3）通知（Advice）：在AOP术语中，切面的工作被称为通知。")]),a._v(" "),n("p",[a._v("（4）切入点（Pointcut）：切点的定义会匹配通知所要织入的一个或多个连接点。我们通常使用明确的类和方法名称，或是利用正则表达式定义所匹配的类和方法名称来指定这些切点。")]),a._v(" "),n("p",[a._v("（5）引入（Introduction）：引入允许我们向现有类添加新方法或属性。")]),a._v(" "),n("p",[a._v("（6）目标对象（Target Object）： 被一个或者多个切面（aspect）所通知（advise）的对象。它通常是一个代理对象。也有人把它叫做 被通知（adviced） 对象。 既然Spring AOP是通过运行时代理实现的，这个对象永远是一个 被代理（proxied） 对象。")]),a._v(" "),n("p",[a._v("（7）织入（Weaving）：织入是把切面应用到目标对象并创建新的代理对象的过程。在目标对象的生命周期里有多少个点可以进行织入：")]),a._v(" "),n("ul",[n("li",[a._v("编译期：切面在目标类编译时被织入。AspectJ的织入编译器是以这种方式织入切面的。")]),a._v(" "),n("li",[a._v("类加载期：切面在目标类加载到JVM时被织入。需要特殊的类加载器，它可以在目标类被引入应用之前增强该目标类的字节码。AspectJ5的加载时织入就支持以这种方式织入切面。")]),a._v(" "),n("li",[a._v("运行期：切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。SpringAOP就是以这种方式织入切面。")])]),a._v(" "),n("h3",{attrs:{id:"spring在运行时通知对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring在运行时通知对象"}},[a._v("#")]),a._v(" Spring在运行时通知对象")]),a._v(" "),n("p",[a._v("通过在代理类中包裹切面，Spring在运行期把切面织入到Spring管理的bean中。代理封装了目标类，并拦截被通知方法的调用，再把调用转发给真正的目标bean。当代理拦截到方法调用时，在调用目标bean方法之前，会执行切面逻辑。")]),a._v(" "),n("p",[a._v("直到应用需要被代理的bean时，Spring才创建代理对象。如果使用的是ApplicationContext的话，在ApplicationContext从BeanFactory中加载所有bean的时候，Spring才会创建被代理的对象。因为Spring运行时才创建代理对象，所以我们不需要特殊的编译器来织入SpringAOP的切面。")]),a._v(" "),n("h3",{attrs:{id:"spring只支持方法级别的连接点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring只支持方法级别的连接点"}},[a._v("#")]),a._v(" Spring只支持方法级别的连接点")]),a._v(" "),n("p",[a._v("因为Spring基于动态代理，所以Spring只支持方法连接点。Spring缺少对字段连接点的支持，而且它不支持构造器连接点。方法之外的连接点拦截功能，我们可以利用Aspect来补充。")]),a._v(" "),n("h3",{attrs:{id:"在spring-aop-中-关注点和横切关注的区别是什么-在-spring-aop-中-concern-和-cross-cutting-concern-的不同之处"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在spring-aop-中-关注点和横切关注的区别是什么-在-spring-aop-中-concern-和-cross-cutting-concern-的不同之处"}},[a._v("#")]),a._v(" 在Spring AOP 中，关注点和横切关注的区别是什么？在 spring aop 中 concern 和 cross-cutting concern 的不同之处")]),a._v(" "),n("p",[a._v("关注点（concern）是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。")]),a._v(" "),n("p",[a._v("横切关注点（cross-cutting concern）是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。")]),a._v(" "),n("h3",{attrs:{id:"spring通知有哪些类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring通知有哪些类型"}},[a._v("#")]),a._v(" Spring通知有哪些类型？")]),a._v(" "),n("p",[a._v("在AOP术语中，切面的工作被称为通知，实际上是程序执行时要通过SpringAOP框架触发的代码段。")]),a._v(" "),n("p",[a._v("Spring切面可以应用5种类型的通知：")]),a._v(" "),n("ul",[n("li",[n("ol",[n("li",[a._v("前置通知（Before）：在目标方法被调用之前调用通知功能；")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[a._v("后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么；")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"3"}},[n("li",[a._v("返回通知（After-returning ）：在目标方法成功执行之后调用通知；")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"4"}},[n("li",[a._v("异常通知（After-throwing）：在目标方法抛出异常后调用通知；")])])]),a._v(" "),n("li",[n("ol",{attrs:{start:"5"}},[n("li",[a._v("环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。")])])])]),a._v(" "),n("blockquote",[n("p",[a._v("同一个aspect，不同advice的执行顺序：")]),a._v(" "),n("p",[a._v("①没有异常情况下的执行顺序：")]),a._v(" "),n("p",[a._v("around before advice\nbefore advice\ntarget method 执行\naround after advice\nafter advice\nafterReturning")]),a._v(" "),n("p",[a._v("②有异常情况下的执行顺序：")]),a._v(" "),n("p",[a._v("around before advice\nbefore advice\ntarget method 执行\naround after advice\nafter advice\nafterThrowing:异常发生\njava.lang.RuntimeException: 异常发生")])]),a._v(" "),n("h3",{attrs:{id:"什么是切面-aspect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是切面-aspect"}},[a._v("#")]),a._v(" 什么是切面 Aspect？")]),a._v(" "),n("p",[a._v("aspect 由 pointcount 和 advice 组成，切面是通知和切点的结合。 它既包含了横切逻辑的定义, 也包括了连接点的定义. Spring AOP 就是负责实施切面的框架, 它将切面所定义的横切逻辑编织到切面所指定的连接点中.\nAOP 的工作重心在于如何将增强编织目标对象的连接点上, 这里包含两个工作:")]),a._v(" "),n("ul",[n("li",[a._v("如何通过 pointcut 和 advice 定位到特定的 joinpoint 上")]),a._v(" "),n("li",[a._v("如何在 advice 中编写切面代码.")])]),a._v(" "),n("p",[a._v("可以简单地认为, 使用 @Aspect 注解的类就是切面.")]),a._v(" "),n("img",{staticClass:"zoom-custom-imgs",attrs:{src:a.$withBase("/assets/img/post/springbasic/springbasic-4.png"),alt:"wxmp"}}),a._v(" "),n("h3",{attrs:{id:"解释基于xml-schema方式的切面实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解释基于xml-schema方式的切面实现"}},[a._v("#")]),a._v(" 解释基于XML Schema方式的切面实现")]),a._v(" "),n("p",[a._v("在这种情况下，切面由常规类以及基于XML的配置实现。")]),a._v(" "),n("h3",{attrs:{id:"解释基于注解的切面实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解释基于注解的切面实现"}},[a._v("#")]),a._v(" 解释基于注解的切面实现")]),a._v(" "),n("p",[a._v("在这种情况下(基于@AspectJ的实现)，涉及到的切面声明的风格与带有java5标注的普通java类一致。")]),a._v(" "),n("h3",{attrs:{id:"有几种不同类型的自动代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有几种不同类型的自动代理"}},[a._v("#")]),a._v(" 有几种不同类型的自动代理？")]),a._v(" "),n("p",[a._v("BeanNameAutoProxyCreator")]),a._v(" "),n("p",[a._v("DefaultAdvisorAutoProxyCreator")]),a._v(" "),n("p",[a._v("Metadata autoproxying")]),a._v(" "),n("h2",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),n("ul",[n("li",[a._v("https://thinkwon.blog.csdn.net/article/details/104397516")])])])}),[],!1,null,null,null);t.default=r.exports}}]);