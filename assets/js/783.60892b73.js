(window.webpackJsonp=window.webpackJsonp||[]).push([[783],{1299:function(a,t,s){"use strict";s.r(t);var n=s(53),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),s("p",[a._v("本文主要是介绍 Spring Cloud Alibaba面试题，面试题和相关解答来自网络，难免有纰漏和疏忽，阅读的时候，发现有疑问的地方，建议多方求证，也可以关注原文评论区，也欢迎在本站"),s("a",{attrs:{href:"https://www.yijiyong.com/about/aboutqa.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("【问题反馈页面】"),s("OutboundLink")],1),a._v("留言反馈。")])]),a._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#_1-微服务个人理解"}},[a._v("1.微服务个人理解")])]),s("li",[s("a",{attrs:{href:"#_2-什么是spring-cloud-alibaba"}},[a._v("2.什么是Spring Cloud&&Alibaba？")])]),s("li",[s("a",{attrs:{href:"#_3-服务注册和发现是什么意思-spring-cloud如何实现"}},[a._v("3.服务注册和发现是什么意思？Spring Cloud如何实现？")])]),s("li",[s("a",{attrs:{href:"#_4-什么是nacos"}},[a._v("4.什么是Nacos?")])]),s("li",[s("a",{attrs:{href:"#_5-nacos注册中心原理"}},[a._v("5.Nacos注册中心原理")])]),s("li",[s("a",{attrs:{href:"#_6-nacos注册中心使用【nacos-client客户端】"}},[a._v("6.Nacos注册中心使用【Nacos-Client客户端】")])]),s("li",[s("a",{attrs:{href:"#_7-nacos配置中心使用【nacos-server服务端】"}},[a._v("7.Nacos配置中心使用【Nacos-Server服务端】")])]),s("li",[s("a",{attrs:{href:"#_8-feign介绍"}},[a._v("8.Feign介绍")])]),s("li",[s("a",{attrs:{href:"#_9-feign调用原理"}},[a._v("9.Feign调用原理")])]),s("li",[s("a",{attrs:{href:"#_10-feign调用原理"}},[a._v("10.Feign调用原理")])]),s("li",[s("a",{attrs:{href:"#_11-feign使用中遇到的相关问题"}},[a._v("11.Feign使用中遇到的相关问题")])]),s("li",[s("a",{attrs:{href:"#_12-什么是服务熔断-什么是服务降级"}},[a._v("12.什么是服务熔断？什么是服务降级？")])]),s("li",[s("a",{attrs:{href:"#_13-什么是服务雪崩效应"}},[a._v("13.什么是服务雪崩效应?")])]),s("li",[s("a",{attrs:{href:"#_14-loadbalanced注解的作用"}},[a._v("14.@LoadBalanced注解的作用")])]),s("li",[s("a",{attrs:{href:"#_15-nginx与ribbon的区别"}},[a._v("15. Nginx与Ribbon的区别")])]),s("li",[s("a",{attrs:{href:"#_16-ribbon底层实现原理"}},[a._v("16.Ribbon底层实现原理")])]),s("li",[s("a",{attrs:{href:"#_17-ribbon负载均衡算法"}},[a._v("17.Ribbon负载均衡算法")])]),s("li",[s("a",{attrs:{href:"#_18-分布式事务产生的背景"}},[a._v("18.分布式事务产生的背景？")])]),s("li",[s("a",{attrs:{href:"#_19-seata是什么"}},[a._v("19.seata是什么")])]),s("li",[s("a",{attrs:{href:"#_20-seata术语"}},[a._v("20.seata术语")])]),s("li",[s("a",{attrs:{href:"#_21-seata流程"}},[a._v("21.seata流程")])]),s("li",[s("a",{attrs:{href:"#_22-seata流程相亲版"}},[a._v("22.seata流程相亲版")])]),s("li",[s("a",{attrs:{href:"#_23-seata分布式事务框架实现原理"}},[a._v("23.Seata分布式事务框架实现原理？")])]),s("li",[s("a",{attrs:{href:"#_24-springboot如何整合seata"}},[a._v("24.SpringBoot如何整合Seata?")])]),s("li",[s("a",{attrs:{href:"#_25-常见的分布式事务解决方案"}},[a._v("25.常见的分布式事务解决方案？")])]),s("li",[s("a",{attrs:{href:"#_26、springcloud-alibaba的面试题视频参考"}},[a._v("26、SpringCloud Alibaba的面试题视频参考：")])]),s("li",[s("a",{attrs:{href:"#参考文章"}},[a._v("参考文章")])])])]),s("p"),a._v(" "),s("h2",{attrs:{id:"_1-微服务个人理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-微服务个人理解"}},[a._v("#")]),a._v(" 1.微服务个人理解")]),a._v(" "),s("p",[a._v("微服务架构是一种架构模式或者说是一种架构风格，它提倡将单一应用程序划分为一组小的服务，每个服务运行在其独立的自己的进程中，服务之间相互协调、互相配合，为用户提供最终价值。服务之间采用轻量级的通信机制互相沟通（通常是基于HTTP的RESTful API），每个服务都围绕着具体的业务进行构建，并且能够被独立的构建在生产环境、类生产环境等。另外，应避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。")]),a._v(" "),s("h2",{attrs:{id:"_2-什么是spring-cloud-alibaba"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是spring-cloud-alibaba"}},[a._v("#")]),a._v(" 2.什么是Spring Cloud&&Alibaba？")]),a._v(" "),s("p",[a._v("Spring Cloud是Spring开源组织下的一个子项目，提供了一系列用于实现分布式微服务系统的工具集，帮助开发者快速构建微服务应用。")]),a._v(" "),s("p",[a._v("Spring Cloud Alibaba是Spring Cloud的子项目；包含微服务开发必备组件；基于和符合Spring Cloud标准的阿里的微服务解决方案。")]),a._v(" "),s("h2",{attrs:{id:"_3-服务注册和发现是什么意思-spring-cloud如何实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-服务注册和发现是什么意思-spring-cloud如何实现"}},[a._v("#")]),a._v(" 3.服务注册和发现是什么意思？Spring Cloud如何实现？")]),a._v(" "),s("p",[a._v("当我们开始一个项目时，我们通常在属性文件中进行所有的配置。随着越来越多的服务开发和部署，添加和修改这些属性变得更加复杂。有些服务可能会下降，而某些位置可能会发生变化。手动更改属性可能会产生问题。 Nacos服务注册和发现可以在这种情况下提供帮助。由于所有服务都在Eureka服务器上注册并通过调用Nacos服务器完成查找，因此无需处理服务地点的任何更改和处理。")]),a._v(" "),s("h2",{attrs:{id:"_4-什么是nacos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么是nacos"}},[a._v("#")]),a._v(" 4.什么是Nacos?")]),a._v(" "),s("p",[a._v("英文全称Dynamic Naming and Configuration Service，Na为naming/nameServer即注册中心,co为configuration即注册中心，service是指该注册/配置中心都是以服务为核心。")]),a._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:a.$withBase("/assets/img/post/springbasic/springcloudalibaba-1.png"),alt:"wxmp"}}),a._v(" "),s("h2",{attrs:{id:"_5-nacos注册中心原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-nacos注册中心原理"}},[a._v("#")]),a._v(" 5.Nacos注册中心原理")]),a._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:a.$withBase("/assets/img/post/springbasic/springcloudalibaba-2.png"),alt:"wxmp"}}),a._v(" "),s("p",[a._v("服务提供者、服务消费者、服务发现组件这三者之间的关系大致如下")]),a._v(" "),s("p",[a._v("1、微服务在启动时，将自己的网络地址等信息注册到服务发现组件(nacos server)中，服务发现组件会存储这些信息。")]),a._v(" "),s("p",[a._v("2、各个微服务与服务发现组件使用一定机制通信（例如在一定的时间内发送心跳包）。服务发现组件若发现与某微服务实例通信正常则保持注册状态(up在线状态)、若长时间无法与某微服务实例通信，就会自动注销（即：删除）该实例。")]),a._v(" "),s("p",[a._v("3、服务消费者可从服务发现组件查询服务提供者的网络地址，并使用该地址调用服务提供者的接口。")]),a._v(" "),s("p",[a._v("4、当微服务网络地址发生变更（例如实例增减或者IP端口发生变化等）时，会重新注册到服务发现组件。")]),a._v(" "),s("h2",{attrs:{id:"_6-nacos注册中心使用【nacos-client客户端】"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-nacos注册中心使用【nacos-client客户端】"}},[a._v("#")]),a._v(" 6.Nacos注册中心使用【Nacos-Client客户端】")]),a._v(" "),s("p",[a._v("（1）pom文件加依赖:alibaba-nacos-discovery")]),a._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("org.springframework.cloud"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("spring-cloud-starter-alibaba-nacos-discovery"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),s("p",[a._v("（2）启动类加注解")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//Nacos服务端【早期版本需要加注解，现在0.0.9版本后已不是必须的】")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@EnableDiscoveryClient")]),a._v("\n")])])]),s("p",[a._v("（3）在对应的微服务的yml配置文件【服务名称和nacos server 地址】")]),a._v(" "),s("div",{staticClass:"language-ini extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ini"}},[s("code",[a._v("spring:\n  cloud:\n    nacos:\n      discovery:\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("        #指定nacos server的地址，不需要写http")]),a._v("\n        server-addr: localhost:8848 \n")])])]),s("h2",{attrs:{id:"_7-nacos配置中心使用【nacos-server服务端】"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-nacos配置中心使用【nacos-server服务端】"}},[a._v("#")]),a._v(" 7.Nacos配置中心使用【Nacos-Server服务端】")]),a._v(" "),s("p",[a._v("1）加依赖–alibaba-nacos-config")]),a._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("\x3c!--nacos-config nacos管理配置的依赖--\x3e")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("org.springframework.cloud"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("spring-cloud-starter-alibaba-nacos-config"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),s("p",[a._v("2）加配置，新增bootstrap.yml文件配置，配置属性如下")]),a._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("spring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("cloud")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("nacos")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("server-addr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" 127.0.0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8848")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#这里的server-addr用作配置管理")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("file-extension")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" yaml\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("application")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("server\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("profiles")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# profiles区分多环境配置")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("active")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" dev "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#切换配置文件，如dev、test、pro等环境")]),a._v("\n")])])]),s("p",[a._v("3）配置中心包含：配置管理、服务管理(微服务管理)、命名空间、集群管理")]),a._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:a.$withBase("/assets/img/post/springbasic/springcloudalibaba-3.png"),alt:"wxmp"}}),a._v(" "),s("p",[a._v("4）通过配置更改动态刷新参数–@RefreshScope注解\n普通application参数在配置中心直接配置皆可，如果需要可以动态刷新的配置，需要在相应类上加上@RefreshScope注解,示例如下，当在nacos配置中心更改配置后，方法getId的值也会刷新。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@RefreshScope")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IdEntity")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${id}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h2",{attrs:{id:"_8-feign介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-feign介绍"}},[a._v("#")]),a._v(" 8.Feign介绍")]),a._v(" "),s("p",[a._v("Feign是Netfilx开源的声明式HTTP客户端，Feign是一个http请求调用的轻量级框架，可以以Java接口注解的方式调用Http请求。Spring Cloud引入 Feign并且集成了Ribbon实现客户端负载均衡调用。")]),a._v(" "),s("h2",{attrs:{id:"_9-feign调用原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-feign调用原理"}},[a._v("#")]),a._v(" 9.Feign调用原理")]),a._v(" "),s("p",[a._v("Feign远程调用，核心就是通过一系列的封装和处理，将以JAVA注解的方式定义的远程调用API接口，最终转换成HTTP的请求形式，然后将HTTP的请求的响应结果，解码成JAVA Bean，放回给调用者。")]),a._v(" "),s("p",[a._v("基于重试器发送HTTP请求：Feign 内置了一个重试器，当HTTP请求出现IO异常时，Feign会有一个最大尝试次数发送请求。")]),a._v(" "),s("h2",{attrs:{id:"_10-feign调用原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-feign调用原理"}},[a._v("#")]),a._v(" 10.Feign调用原理")]),a._v(" "),s("p",[a._v("（1）加依赖–openfeign")]),a._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("\x3c!--feign依赖、服务通信--\x3e")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("org.springframework.cloud"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("spring-cloud-starter-openfeign"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),s("p",[a._v("（2）启动类加注解")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@EnableFeignClients")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//feign注解")]),a._v("\n")])])]),s("p",[a._v("（3）请求接口的类加FeignClient注解：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@FeignClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"article-server"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("h2",{attrs:{id:"_11-feign使用中遇到的相关问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-feign使用中遇到的相关问题"}},[a._v("#")]),a._v(" 11.Feign使用中遇到的相关问题")]),a._v(" "),s("p",[a._v("（1）使用feign客户端调用其他微服务时，发送POST请求时，对象信息没有传递成功。关键在于加上注解："),s("code",[a._v("@RequestBody")]),a._v("\n（2）使用feign客户端调用其他微服务时，报错超时："),s("code",[a._v("e=feign.RetryableException: Read timed out executing POST")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("ribbon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("ReadTimeout")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("60000")]),a._v("ribbon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("ConnectTimeout"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("6000012")]),a._v("\n")])])]),s("h2",{attrs:{id:"_12-什么是服务熔断-什么是服务降级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-什么是服务熔断-什么是服务降级"}},[a._v("#")]),a._v(" 12.什么是服务熔断？什么是服务降级？")]),a._v(" "),s("p",[s("code",[a._v("熔断机制")]),a._v("是应对雪崩效应的一种微服务链路保护机制。当某个微服务不可用或者响应时间太长时，会进行服务降级，进而熔断该节点微服务的调用，快速返回“错误”的响应信息。当检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现，Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内调用20次，如果失败，就会启动熔断机制。")]),a._v(" "),s("p",[s("code",[a._v("服务降级")]),a._v("，一般是从整体负荷考虑。就是当某个服务熔断之后，服务器将不再被调用，此时客户端可以自己准备一个本地的fallback回调，返回一个缺省值。这样做，虽然水平下降，但好歹可用，比直接挂掉强。")]),a._v(" "),s("h2",{attrs:{id:"_13-什么是服务雪崩效应"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-什么是服务雪崩效应"}},[a._v("#")]),a._v(" 13.什么是服务雪崩效应?")]),a._v(" "),s("p",[a._v("雪崩效应是在大型互联网项目中，当某个服务发生宕机时，调用这个服务的其他服务也会发生宕机，大型项目的微服务之间的调用是互通的，这样就会将服务的不可用逐步扩大到各个其他服务中，从而使整个项目的服务宕机崩溃。")]),a._v(" "),s("h2",{attrs:{id:"_14-loadbalanced注解的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-loadbalanced注解的作用"}},[a._v("#")]),a._v(" 14.@LoadBalanced注解的作用")]),a._v(" "),s("p",[a._v("开启客户端负载均衡。")]),a._v(" "),s("h2",{attrs:{id:"_15-nginx与ribbon的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-nginx与ribbon的区别"}},[a._v("#")]),a._v(" 15. Nginx与Ribbon的区别")]),a._v(" "),s("p",[a._v("Nginx是反向代理同时可以实现负载均衡，nginx拦截客户端请求采用负载均衡策略根据upstream配置进行转发，相当于请求通过nginx服务器进行转发。Ribbon是客户端负载均衡，从注册中心读取目标服务器信息，然后客户端采用轮询策略对服务直接访问，全程在客户端操作。")]),a._v(" "),s("h2",{attrs:{id:"_16-ribbon底层实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-ribbon底层实现原理"}},[a._v("#")]),a._v(" 16.Ribbon底层实现原理")]),a._v(" "),s("p",[a._v("Ribbon使用discoveryClient从注册中心读取目标服务信息，对同一接口请求进行计数，使用%取余算法获取目标服务集群索引，返回获取到的目标服务信息。")]),a._v(" "),s("h2",{attrs:{id:"_17-ribbon负载均衡算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-ribbon负载均衡算法"}},[a._v("#")]),a._v(" 17.Ribbon负载均衡算法")]),a._v(" "),s("p",[a._v("IRule是以下七种负载均衡算法的父接口")]),a._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:a.$withBase("/assets/img/post/springbasic/springcloudalibaba-4.png"),alt:"wxmp"}}),a._v("\n说明：\n"),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:a.$withBase("/assets/img/post/springbasic/springcloudalibaba-5.png"),alt:"wxmp"}}),a._v(" "),s("ul",[s("li",[s("strong",[a._v("RoundRobinRule")]),a._v("： 默认轮询的方式")]),a._v(" "),s("li",[s("strong",[a._v("RandomRule")]),a._v("： 随机方式")]),a._v(" "),s("li",[s("strong",[a._v("WeightedResponseTimeRule")]),a._v("： 根据响应时间来分配权重的方式，响应的越快，分配的值越大。")]),a._v(" "),s("li",[s("strong",[a._v("BestAvailableRule")]),a._v("： 选择并发量最小的方式")]),a._v(" "),s("li",[s("strong",[a._v("RetryRule")]),a._v("： 在一个配置时间段内当选择server不成功，则一直尝试使用subRule的方式选择一个可用的server")]),a._v(" "),s("li",[s("strong",[a._v("ZoneAvoidanceRule")]),a._v("： 根据性能和可用性来选择。")]),a._v(" "),s("li",[s("strong",[a._v("AvailabilityFilteringRule")]),a._v("： 过滤掉那些因为一直连接失败的被标记为circuit tripped的后端server，并过滤掉那些高并发的的后端server（active connections 超过配置的阈值）")])]),a._v(" "),s("h2",{attrs:{id:"_18-分布式事务产生的背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-分布式事务产生的背景"}},[a._v("#")]),a._v(" 18.分布式事务产生的背景？")]),a._v(" "),s("p",[a._v("在传统的单体项目中，多个不同的业务逻辑使用的都是同一个数据源，使用的都是同一个事务管理器，所以不会存在事务问题。\n在分布式或者微服务架构中，每个服务都有自己的数据源，使用不同事务管理器，如果A服务去调用B服务，B服务执行失败了，A服务的事务和B服务的事务都会回滚，这时候是不存在事务问题的，但是如果A服务B服务执行成功之后出现异常，A服务的事务会回滚，但是B服务的事务不会回滚，此时就存在分布式事务问题。")]),a._v(" "),s("h2",{attrs:{id:"_19-seata是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-seata是什么"}},[a._v("#")]),a._v(" 19.seata是什么")]),a._v(" "),s("p",[a._v("Seata是阿里巴巴退出的一款用来解决分布式事务问题的框架，他经过天猫双十一的考验，很有可能成为解决分布式事务问题的主流框架")]),a._v(" "),s("h2",{attrs:{id:"_20-seata术语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-seata术语"}},[a._v("#")]),a._v(" 20.seata术语")]),a._v(" "),s("p",[a._v("Seata分为三个模块，分别是TM、RM和TC(简写)。")]),a._v(" "),s("ul",[s("li",[a._v("TC(transaction Coordinator)，代表seata服务器，seata是一个spring boot的jar包。")]),a._v(" "),s("li",[a._v("TM(transaction Manager)事务管理器。")]),a._v(" "),s("li",[a._v("RM(Resource Manager) 代表每个数据库。\nSeata还用了一个XID，代表了一个分布式事务，相当于dubbo中的Request ID。")])]),a._v(" "),s("h2",{attrs:{id:"_21-seata流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21-seata流程"}},[a._v("#")]),a._v(" 21.seata流程")]),a._v(" "),s("ul",[s("li",[a._v("TM向TC注册全局事务，并生成全局唯一的XID。")]),a._v(" "),s("li",[a._v("RM向TC注册分支事务，并将其纳入该XID对应的全局事务范围。")]),a._v(" "),s("li",[a._v("RM向TC汇报资源的准备状态。")]),a._v(" "),s("li",[a._v("TC汇总所有事务参与者的执行状态，决定分布式事务是全部提交还是全部回滚。")]),a._v(" "),s("li",[a._v("TC通知所有RM提交/回滚事务。")])]),a._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:a.$withBase("/assets/img/post/springbasic/springcloudalibaba-6.png"),alt:"wxmp"}}),a._v(" "),s("h2",{attrs:{id:"_22-seata流程相亲版"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22-seata流程相亲版"}},[a._v("#")]),a._v(" 22.seata流程相亲版")]),a._v(" "),s("ul",[s("li",[a._v("张学霸（TM）跟导师(TC)提议，为卢学霸安排对象，卢学霸生成了一个相亲id。")]),a._v(" "),s("li",[a._v("女神（RM）向tc注册了资料，卢学霸在他的相亲id中接收到了推送。")]),a._v(" "),s("li",[a._v("女神向卢学霸汇报自己的资料。")]),a._v(" "),s("li",[a._v("TC汇总所有女神的资料，让卢学霸决定是否去参加相亲。")]),a._v(" "),s("li",[a._v("TC向卢学霸汇报相亲结果。")])]),a._v(" "),s("h2",{attrs:{id:"_23-seata分布式事务框架实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23-seata分布式事务框架实现原理"}},[a._v("#")]),a._v(" 23.Seata分布式事务框架实现原理？")]),a._v(" "),s("p",[a._v("Seata有三个组成部分：事务协调器TC：协调者、事务管理器TM：发起方、资源管理器RM：参与方")]),a._v(" "),s("ul",[s("li",[a._v("（1）发起方会向协调者申请一个全局事务id，并保存到ThreadLocal中（为什么要保存到ThreadLocal中？弱引用，线程之间不会发生数据冲突）")]),a._v(" "),s("li",[a._v("（2）Seata数据源代理发起方和参与方的数据源，将前置镜像和后置镜像写入到undo_log表中，方便后期回滚使用")]),a._v(" "),s("li",[a._v("（3）发起方获取全局事务id，通过改写Feign客户端请求头传入全局事务id。")]),a._v(" "),s("li",[a._v("（4）参与方从请求头中获取全局事务id保存到ThreadLocal中，并把该分支注册到SeataServer中。")]),a._v(" "),s("li",[a._v("（5）如果没有出现异常，发起方会通知协调者，协调者通知所有分支，通过全局事务id和本地事务id删除undo_log数据，如果出现异常，通过undo_log逆向生成sql语句并执行，然后删除undo_log语句。如果处理业务逻辑代码超时，也会回滚。")])]),a._v(" "),s("h2",{attrs:{id:"_24-springboot如何整合seata"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24-springboot如何整合seata"}},[a._v("#")]),a._v(" 24.SpringBoot如何整合Seata?")]),a._v(" "),s("p",[a._v("一般情况下，学一个知识不需要去学API，学的主要是思想，API会发生变化，思想几乎是不会变的")]),a._v(" "),s("ul",[s("li",[a._v("第一步：引入依赖")]),a._v(" "),s("li",[a._v("第二步：bin下的file文件和registry文件放入到每个项目中，并修改，分组名称要保持一致")]),a._v(" "),s("li",[a._v("第三步：yml配置seata")]),a._v(" "),s("li",[a._v("第四步：引入"),s("code",[a._v("DataSourceProxy")]),a._v("配置文件")]),a._v(" "),s("li",[a._v("第五步：添加核心主机"),s("code",[a._v("@GlobalTransaction")]),a._v("注解")])]),a._v(" "),s("h2",{attrs:{id:"_25-常见的分布式事务解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25-常见的分布式事务解决方案"}},[a._v("#")]),a._v(" 25.常见的分布式事务解决方案？")]),a._v(" "),s("ul",[s("li",[a._v("1、使用MQ")]),a._v(" "),s("li",[a._v("2、使用LCN")]),a._v(" "),s("li",[a._v("3、使用Seata")]),a._v(" "),s("li",[a._v("4、2PC、3PC")])]),a._v(" "),s("h2",{attrs:{id:"_26、springcloud-alibaba的面试题视频参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_26、springcloud-alibaba的面试题视频参考"}},[a._v("#")]),a._v(" 26、SpringCloud Alibaba的面试题视频参考：")]),a._v(" "),s("p",[a._v("SpringCloud Alibaba的面试题视频参考:https://www.bilibili.com/video/av500291691")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://www.bilibili.com/video/av500291691",target:"_blank",rel:"noopener noreferrer"}},[a._v("SpringCloud Alibaba的面试题视频参考"),s("OutboundLink")],1)]),a._v(" "),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),s("ul",[s("li",[a._v("https://blog.csdn.net/BruceLiu_code/article/details/115322713")])])])}),[],!1,null,null,null);t.default=e.exports}}]);