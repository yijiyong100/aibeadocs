(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{598:function(t,a,s){"use strict";s.r(a);var n=s(53),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("本文主要是介绍 TensorFlow-基础入门介绍 。")])]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#tensorflow-简介"}},[t._v("TensorFlow 简介")])]),s("li",[s("a",{attrs:{href:"#tensorflow北大公开课"}},[t._v("TensorFlow北大公开课：")]),s("ul",[s("li",[s("a",{attrs:{href:"#课程概述"}},[t._v("课程概述")])]),s("li",[s("a",{attrs:{href:"#课程大纲"}},[t._v("课程大纲")])]),s("li",[s("a",{attrs:{href:"#证书要求"}},[t._v("证书要求")])]),s("li",[s("a",{attrs:{href:"#参考资料"}},[t._v("参考资料")])])])]),s("li",[s("a",{attrs:{href:"#【-】"}},[t._v("【----------------------------】")]),s("ul",[s("li",[s("a",{attrs:{href:"#tensorflow的定义"}},[t._v("tensorflow的定义")])]),s("li",[s("a",{attrs:{href:"#tensorflow-网站"}},[t._v("tensorflow 网站")])]),s("li",[s("a",{attrs:{href:"#tensorflow的特性"}},[t._v("tensorflow的特性")])]),s("li",[s("a",{attrs:{href:"#tensorflow-playground"}},[t._v("tensorflow playground")])]),s("li",[s("a",{attrs:{href:"#tensorflow的基本概念"}},[t._v("tensorflow的基本概念")])]),s("li",[s("a",{attrs:{href:"#tensorflow写代码流程"}},[t._v("tensorflow写代码流程")])])])]),s("li",[s("a",{attrs:{href:"#【-】"}},[t._v("【----------------------------】")])]),s("li",[s("a",{attrs:{href:"#tensorflow-2-0简介"}},[t._v("TensorFlow 2.0简介")])]),s("li",[s("a",{attrs:{href:"#知识树"}},[t._v("知识树")])]),s("li",[s("a",{attrs:{href:"#_1、tensorflow-2-x-vs-1-x"}},[t._v("1、TensorFlow 2.x vs 1.x")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-1-tensorflow发展历程"}},[t._v("1.1 TensorFlow发展历程")])]),s("li",[s("a",{attrs:{href:"#_1-2-为什么要学习tensorflow"}},[t._v("1.2 为什么要学习TensorFlow")])]),s("li",[s("a",{attrs:{href:"#_1-3-tensorflow-2-x-vs-1-x"}},[t._v("1.3 TensorFlow 2.x vs 1.x")])]),s("li",[s("a",{attrs:{href:"#_1-4-tensorflow-2-0-变化"}},[t._v("1.4 TensorFlow 2.0 变化")])])])]),s("li",[s("a",{attrs:{href:"#_2、eager-execution"}},[t._v("2、Eager Execution")]),s("ul",[s("li",[s("a",{attrs:{href:"#_2-1-eager-execution优缺点"}},[t._v("2.1 Eager Execution优缺点")])])])]),s("li",[s("a",{attrs:{href:"#_3、tensorflow-api"}},[t._v("3、TensorFlow API")]),s("ul",[s("li",[s("a",{attrs:{href:"#_3-1-低层tensorflow-api"}},[t._v("3.1 低层TensorFlow API")])]),s("li",[s("a",{attrs:{href:"#_3-2-中层tensorflow-api"}},[t._v("3.2 中层TensorFlow API")])]),s("li",[s("a",{attrs:{href:"#_3-3-高层tensorflow-api"}},[t._v("3.3 高层TensorFlow API")])]),s("li",[s("a",{attrs:{href:"#_3-4-tensorflow-api-总结"}},[t._v("3.4 TensorFlow API 总结")])])])]),s("li",[s("a",{attrs:{href:"#_4、资料来源"}},[t._v("4、资料来源")])]),s("li",[s("a",{attrs:{href:"#【-】"}},[t._v("【----------------------------】")])]),s("li",[s("a",{attrs:{href:"#tensorflow基础总结"}},[t._v("TensorFlow基础总结")])]),s("li",[s("a",{attrs:{href:"#_1-基础概念"}},[t._v("1.基础概念")])]),s("li",[s("a",{attrs:{href:"#_2-tensor"}},[t._v("2.Tensor")]),s("ul",[s("li",[s("a",{attrs:{href:"#_2-1-数据结构"}},[t._v("2.1 数据结构")])]),s("li",[s("a",{attrs:{href:"#_2-2-稀疏张量-sparsetensor"}},[t._v("2.2 稀疏张量（SparseTensor）")])])])]),s("li",[s("a",{attrs:{href:"#_3-operation"}},[t._v("3.Operation")]),s("ul",[s("li",[s("a",{attrs:{href:"#_3-1-tensor创建函数"}},[t._v("3.1 Tensor创建函数")])]),s("li",[s("a",{attrs:{href:"#_3-2-tensor转换函数"}},[t._v("3.2 Tensor转换函数")])]),s("li",[s("a",{attrs:{href:"#_3-3-逻辑判断"}},[t._v("3.3 逻辑判断")])]),s("li",[s("a",{attrs:{href:"#_3-4-数学函数"}},[t._v("3.4 数学函数")])]),s("li",[s("a",{attrs:{href:"#_3-5-聚合相关"}},[t._v("3.5 聚合相关")])]),s("li",[s("a",{attrs:{href:"#_3-6-序列比较与索引提取"}},[t._v("3.6 序列比较与索引提取")])])])]),s("li",[s("a",{attrs:{href:"#_4-graph"}},[t._v("4.Graph")])]),s("li",[s("a",{attrs:{href:"#_5-session"}},[t._v("5.Session")])]),s("li",[s("a",{attrs:{href:"#附录"}},[t._v("附录")])]),s("li",[s("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"tensorflow-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tensorflow-简介"}},[t._v("#")]),t._v(" TensorFlow 简介")]),t._v(" "),s("ul",[s("li",[t._v("TensorFlow 是一个开放源代码软件库，用于进行高性能数值计算。借助其灵活的架构，用户可以轻松地将计算工作部署到多种平台（CPU、GPU、TPU）和设备（桌面设备、服务器集群、移动设备、边缘设备等）。")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//www.tensorflow.org/tutorials/%3Fhl%3Dzh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.tensorflow.org/tutorials/?hl=zh-cnwww.tensorflow.org/tutorials/?hl=zh-cn"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[t._v("TensorFlow 是一个用于研究和生产的开放源代码机器学习库。TensorFlow 提供了各种 API，可供初学者和专家在桌面、移动、网络和云端环境下进行开发。")]),t._v(" "),s("li",[t._v("TensorFlow是采用数据流图（data　flow　graphs）来计算,所以首先我们得创建一个数据流流图,然后再将我们的数据（数据以张量(tensor)的形式存在）放在数据流图中计算. 节点（Nodes）在图中表示数学操作,图中的边（edges）则表示在节点间相互联系的多维数据数组, 即张量（tensor)。训练模型时tensor会不断的从数据流图中的一个节点flow到另一节点, 这就是TensorFlow名字的由来。\n"),s("strong",[t._v("张量（Tensor)")]),t._v(":张量有多种. 零阶张量为 纯量或标量 (scalar) 也就是一个数值. 比如 [1],一阶张量为 向量 (vector), 比如 一维的 [1, 2, 3],二阶张量为 矩阵 (matrix), 比如 二维的 [[1, 2, 3],[4, 5, 6],[7, 8, 9]],以此类推, 还有 三阶 三维的 …\n"),s("strong",[t._v("张量从流图的一端流动到另一端的计算过程。它生动形象地描述了复杂数据结构在人工神经网中的流动、传输、分析和处理模式。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("在机器学习中，数值通常由4种类型构成：\n（1）标量（scalar）：即一个数值，它是计算的最小单元，如“1”或“3.2”等。\n（2）向量（vector）：由一些标量构成的一维数组，如[1, 3.2, 4.6]等。\n（3）矩阵（matrix）：是由标量构成的二维数组。\n（4）张量（tensor）：由多维（通常）数组构成的数据集合，可理解为高维矩阵。")])]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/ad/tensorflow/intro-1.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("Tensorflow中的数据流图（from官网）")]),t._v(" "),s("ul",[s("li",[t._v("使用TensorFlow的优点主要表现在如下几个方面：")])]),t._v(" "),s("p",[t._v("（1）TensorFlow有一个非常直观的构架，顾名思义，它有一个“张量流”。用户可以很容易地看到张量流动的每一个部分（借助TensorBoard，在后面的章节会有所提及）。")]),t._v(" "),s("p",[t._v("（2）TensorFlow可轻松地在CPU/GPU上部署，进行分布式计算。")]),t._v(" "),s("p",[t._v("（3）TensorFlow跨平台性高，灵活性强。TensorFlow不但可以在Linux、Mac和Windows系统下运行，甚至还可以在移动终端下工作。")]),t._v(" "),s("p",[t._v("当然，TensorFlow也有不足之处，主要表现在它的代码比较底层，需要用户编写大量的代码，而且很多相似的功能，用户还不得不“重造轮子”。但“瑕不掩瑜”，TensorFlow还是以雄厚技术积淀、稳定的性能，一骑红尘，“笑傲”于众多深度学习框架之巅。")]),t._v(" "),s("h2",{attrs:{id:"tensorflow北大公开课"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tensorflow北大公开课"}},[t._v("#")]),t._v(" TensorFlow北大公开课：")]),t._v(" "),s("p",[t._v("TensorFlow北大公开课 https://www.icourse163.org/course/PKU-1002536002?tid=1002700003")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.icourse163.org/course/PKU-1002536002?tid=1002700003",target:"_blank",rel:"noopener noreferrer"}},[t._v("TensorFlow北大公开课"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"课程概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#课程概述"}},[t._v("#")]),t._v(" 课程概述")]),t._v(" "),s("p",[t._v("课程会以投影的形式，帮你梳理tensorflow的用法，希望你用纸质笔记本记录下每个打着对勾的知识点；会用录屏的形式，带你编写代码，实现实际应用，希望你用电脑复现课程的案例。每次课后，助教会分享他的tensorflow笔记和源代码，帮你查漏补缺。")]),t._v(" "),s("p",[t._v("授课目标")]),t._v(" "),s("p",[t._v("学会使用Python语言搭建人工神经网络，实现图像分类。")]),t._v(" "),s("h3",{attrs:{id:"课程大纲"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#课程大纲"}},[t._v("#")]),t._v(" 课程大纲")]),t._v(" "),s("p",[t._v("第一讲 带着大家梳理人工智能领域的基本概念：比如什么是人工智能、什么机器学习、什么是深度学习，他们的发展历史是什么，能用他们做什么。课后，助教会带领大家安装Ubuntu系统、Python解释器 和 Tensorflow环境，把同学们的电脑进行改造，让它变得更专业。")]),t._v(" "),s("p",[t._v("第二讲 串讲python语法：课程将帮同学们在最短的时间内把python语法织成网，为后续课程扫清代码关；")]),t._v(" "),s("p",[t._v("第三讲 讲解Tensorflow的关键词，搭建神经网络：这节课会介绍张量、计算图、会话等概念，并用Python搭建你的第一个神经网络，总结出神经网络搭建的八股。")]),t._v(" "),s("p",[t._v("第四讲 讲解神经网络的优化：包括损失函数、学习率、滑动平均和正则化。")]),t._v(" "),s("p",[t._v("第五讲 讲解全连接网络：使用MNIST数据集，搭建全连接网络实现手写数字的识别。包括前向传播、反向传播、识别准确率输出和反向传播断点续训。")]),t._v(" "),s("p",[t._v("第六讲 讲解全连接网络应用：更改上一讲全连接网络的代码，现场手写一个数字，输出这个数字的值。")]),t._v(" "),s("p",[t._v("第七讲 讲解卷积神经网络：使用MNIST数据集，搭建卷积神经网络实现前向传播、反向传播、识别准确率输出和反向传播断点续训。")]),t._v(" "),s("p",[t._v("第八讲 讲解卷积神经网络应用：复现ImageNet数据集训练好的模型，实现特定图片的识别。")]),t._v(" "),s("h3",{attrs:{id:"证书要求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#证书要求"}},[t._v("#")]),t._v(" 证书要求")]),t._v(" "),s("p",[t._v("满分100分，达到60分为合格，达到90分以上为优秀。")]),t._v(" "),s("p",[t._v("期中项目60分：编写Python代码，实现输入手写数字图片，输出预测的数值。识别准确率达到90%为合格：课程给出十张手写数字图片，每正确识别一张得6分。")]),t._v(" "),s("p",[t._v("期末项目40分：编写Python代码，复现卷积神经网络，输入一张图片，识别出图片的内容。识别准确率达90%为合格：课程给出十张图片，每正确识别一张得4分。")]),t._v(" "),s("h3",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("p",[t._v("《Tensorflow：实战Google深度学习框架》 郑泽宇，顾思宇 著，电子工业出版社")]),t._v(" "),s("p",[t._v("《深度学习》赵申剑，黎彧君，符天凡，李凯 译，人民邮电出版社")]),t._v(" "),s("h2",{attrs:{id:"【-】"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#【-】"}},[t._v("#")]),t._v(" 【----------------------------】")]),t._v(" "),s("h3",{attrs:{id:"tensorflow的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tensorflow的定义"}},[t._v("#")]),t._v(" tensorflow的定义")]),t._v(" "),s("ul",[s("li",[t._v("tensorflow是一个采用数据流图，用于数值计算的开源的软件库。本质上可以认为是一个数据库，tensorflow可以作为")]),t._v(" "),s("li",[t._v("Tensor（张量）意味着N维数组，Flow（流）意味")])]),t._v(" "),s("h3",{attrs:{id:"tensorflow-网站"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tensorflow-网站"}},[t._v("#")]),t._v(" tensorflow 网站")]),t._v(" "),s("ul",[s("li",[t._v("中文：https://tensorflow.google.cn/")]),t._v(" "),s("li",[t._v("英文：https://tensorflow.org/")]),t._v(" "),s("li",[t._v("github：https://github.com/tensorflow/tensorflow")])]),t._v(" "),s("h3",{attrs:{id:"tensorflow的特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tensorflow的特性"}},[t._v("#")]),t._v(" tensorflow的特性")]),t._v(" "),s("ul",[s("li",[t._v("高度灵活性：只要能将计算表示成为一个数据流图，那就可以使用tensorflow")]),t._v(" "),s("li",[t._v("可移植性：支持CPU和GPU，可以在台式机、服务器、手机端运算。"),s("strong",[t._v("现在只支持英伟达的GP")]),t._v("U")]),t._v(" "),s("li",[t._v("求微分：Tensorflow内部实现了自动对于各种给定目标函数求导的方式")]),t._v(" "),s("li",[t._v("支持多种语言：python、c、java、swift、go等")]),t._v(" "),s("li",[t._v("性能高度优化")])]),t._v(" "),s("h3",{attrs:{id:"tensorflow-playground"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tensorflow-playground"}},[t._v("#")]),t._v(" tensorflow playground")]),t._v(" "),s("p",[t._v("学习网站："),s("a",{attrs:{href:"https://playground.tensorflow.org/#activation=tanh&batchSize=10&dataset=circle&regDataset=reg-plane&learningRate=0.03&regularizationRate=0&noise=0&networkShape=4,2&seed=0.07694&showTestData=false&discretize=false&percTrainData=50&x=true&y=true&xTimesY=false&xSquared=false&ySquared=false&cosX=false&sinX=false&cosY=false&sinY=false&collectStats=false&problem=classification&initZero=false&hideText=false",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://playground.tensorflow.org"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"tensorflow的基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tensorflow的基本概念"}},[t._v("#")]),t._v(" tensorflow的基本概念")]),t._v(" "),s("ul",[s("li",[t._v("图：描述了计算过程，Tensorflow用图来表示计算过程")]),t._v(" "),s("li",[t._v("张量：Tensorflow 使用tensor表示数据，每一个tensor是一个多维化的数组")]),t._v(" "),s("li",[t._v("操作：图中的节点为op，一个op获得/输入0个或者多个Tensor，执行并计算，产生0个或多个Tensor")]),t._v(" "),s("li",[t._v("会话：session tensorflow的运行需要再绘话里面运行")])]),t._v(" "),s("h3",{attrs:{id:"tensorflow写代码流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tensorflow写代码流程"}},[t._v("#")]),t._v(" tensorflow写代码流程")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("定义变量占位符")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("根据数学原理写方程")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("定义损失函数cost")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("定义优化梯度下降 GradientDescentOptimizer")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"5"}},[s("li",[t._v("session 进行训练，for循环")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"6"}},[s("li",[t._v("保存saver")])])])]),t._v(" "),s("h2",{attrs:{id:"【-】-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#【-】-2"}},[t._v("#")]),t._v(" 【----------------------------】")]),t._v(" "),s("h2",{attrs:{id:"tensorflow-2-0简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tensorflow-2-0简介"}},[t._v("#")]),t._v(" TensorFlow 2.0简介")]),t._v(" "),s("h2",{attrs:{id:"知识树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#知识树"}},[t._v("#")]),t._v(" 知识树")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/ad/tensorflow/intro-2.png"),alt:"wxmp"}}),t._v(" "),s("h2",{attrs:{id:"_1、tensorflow-2-x-vs-1-x"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、tensorflow-2-x-vs-1-x"}},[t._v("#")]),t._v(" 1、TensorFlow 2.x vs 1.x")]),t._v(" "),s("h3",{attrs:{id:"_1-1-tensorflow发展历程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-tensorflow发展历程"}},[t._v("#")]),t._v(" 1.1 TensorFlow发展历程")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/ad/tensorflow/intro-3.png"),alt:"wxmp"}}),t._v(" "),s("h3",{attrs:{id:"_1-2-为什么要学习tensorflow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-为什么要学习tensorflow"}},[t._v("#")]),t._v(" 1.2 为什么要学习TensorFlow")]),t._v(" "),s("ul",[s("li",[t._v("开源生态成熟；")]),t._v(" "),s("li",[t._v("完整的部署流程；")]),t._v(" "),s("li",[t._v("产品化方案；")])]),t._v(" "),s("p",[s("strong",[t._v("TensorFlow 1.X有哪些问题？")])]),t._v(" "),s("ul",[s("li",[t._v("文档和接口混乱；")]),t._v(" "),s("li",[t._v("默认占用所有GPU的所有内存；")]),t._v(" "),s("li",[t._v("使用繁琐；")]),t._v(" "),s("li",[t._v("调试困难等；")])]),t._v(" "),s("h3",{attrs:{id:"_1-3-tensorflow-2-x-vs-1-x"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-tensorflow-2-x-vs-1-x"}},[t._v("#")]),t._v(" 1.3 TensorFlow 2.x vs 1.x")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/ad/tensorflow/intro-4.png"),alt:"wxmp"}}),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/ad/tensorflow/intro-5.png"),alt:"wxmp"}}),t._v(" "),s("h3",{attrs:{id:"_1-4-tensorflow-2-0-变化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-tensorflow-2-0-变化"}},[t._v("#")]),t._v(" 1.4 TensorFlow 2.0 变化")]),t._v(" "),s("p",[t._v("TensorFlow 2.0 推荐使用tf.keras、tf.data等高级库；")]),t._v(" "),s("ul",[s("li",[t._v("用Eager模式搭建原型；")]),t._v(" "),s("li",[t._v("用tf.data处理数据；")]),t._v(" "),s("li",[t._v("用tf.feature_column提取特征；")]),t._v(" "),s("li",[t._v("用tf.keras搭建模型；")]),t._v(" "),s("li",[t._v("用tf.saved_model打包模型；")])]),t._v(" "),s("h2",{attrs:{id:"_2、eager-execution"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、eager-execution"}},[t._v("#")]),t._v(" 2、Eager Execution")]),t._v(" "),s("p",[t._v("Eager模式就是类似于Python这样的命令式编程，写好程序之后，不需要编译，就可以直接运行，而且非常直观；")]),t._v(" "),s("p",[t._v("而之前的Session静态图模式则类似于C/C++的声明式编程，写好程序之后要先编译，然后才能运行；")]),t._v(" "),s("p",[t._v("Eager模式是在TF1.4版本之后引入的，在TF2.x的版本会把eager模式变为默认执行模式；")]),t._v(" "),s("p",[s("strong",[t._v("好处")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("不需要编写完整的静态图；")]),t._v(" "),s("li",[t._v("调试不需要打开会话（Session）；")]),t._v(" "),s("li",[t._v("Python上调用它进行计算可以直接得出结果；")]),t._v(" "),s("li",[t._v("TensorFlow 2.x的入门会简单得多；")])]),t._v(" "),s("h3",{attrs:{id:"_2-1-eager-execution优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-eager-execution优缺点"}},[t._v("#")]),t._v(" 2.1 Eager Execution优缺点")]),t._v(" "),s("p",[s("strong",[t._v("优点")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("eager模式提供了更直观的接口，可以像写Python代码一样写模型；")]),t._v(" "),s("li",[t._v("更方便调试；")]),t._v(" "),s("li",[t._v("自然的控制流程，像编写Python程序一样；")])]),t._v(" "),s("p",[s("strong",[t._v("缺点")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("通过graph构造的模型在分布式训练、性能优化以及线上部署上有优势；")])]),t._v(" "),s("p",[t._v("推荐使用@tf.function（而非1.x中的tf.Session）实现Graph Execution，从而将模型转换为易于部署且高性能的TensorFlow图模型；")]),t._v(" "),s("p",[t._v("举个例子：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" tensorflow "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" tf\n"),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("function")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("simple_nn_layer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("relu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("matmul"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("uniform"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ny "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("uniform"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nsimple_nn_layer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"_3、tensorflow-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、tensorflow-api"}},[t._v("#")]),t._v(" 3、TensorFlow API")]),t._v(" "),s("p",[t._v("TensorFlow API一共可以分为三个层次，即低阶API、中阶API、高阶API：")]),t._v(" "),s("ul",[s("li",[t._v("第一层为Python实现的操作符，主要包括各种张量操作算子、计算图、自动微分；")]),t._v(" "),s("li",[t._v("第二层为Python实现的模型组件，对低级API进行了函数封装，主要包括各种模型层，损失函数，优化器，数据管道，特征列等等；")]),t._v(" "),s("li",[t._v("第三层为Python实现的模型成品，一般为按照OOP方式封装的高级API，主要为tf.keras.models提供的模型的类接口；")])]),t._v(" "),s("h3",{attrs:{id:"_3-1-低层tensorflow-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-低层tensorflow-api"}},[t._v("#")]),t._v(" 3.1 低层TensorFlow API")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/ad/tensorflow/intro-6.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("举个例子，看看各种API的具体使用：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" tensorflow "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" tf\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constant"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constant"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 标量计算")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b  tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b  tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("subtract"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("b  tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("multiply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("b  tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("divide"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 向量计算")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reduce_sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reduce_mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reduce_max"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reduce_min"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reduce_prod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-2-中层tensorflow-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-中层tensorflow-api"}},[t._v("#")]),t._v(" 3.2 中层TensorFlow API")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/ad/tensorflow/intro-7.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("举个例子，如下所示：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("uniform"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shape"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" minval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 矩阵")]),t._v("\ntf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("softmax"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## softmax操作")]),t._v("\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("uniform"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shape"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" minval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 矩阵")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keras"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("layers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dense"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 全连接层")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("softmax"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## softmax操作")]),t._v("\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("uniform"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shape"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" minval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 矩阵")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keras"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LSTM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## LSTM层")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keras"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("layers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dense"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 全连接层")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("softmax"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## softmax操作")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-3-高层tensorflow-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-高层tensorflow-api"}},[t._v("#")]),t._v(" 3.3 高层TensorFlow API")]),t._v(" "),s("p",[t._v("tensorflow.keras.models\n建模方式有三种：")]),t._v(" "),s("ul",[s("li",[t._v("Sequential办法；")]),t._v(" "),s("li",[t._v("函数式API方法；")]),t._v(" "),s("li",[t._v("Model子类化自定义模型")])]),t._v(" "),s("p",[t._v("如何构建模型将会在后面详细介绍，下面我们举个例子：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" tensorflow "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" tf\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 随机初始化输入X和输出y")]),t._v("\nX "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("uniform"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shape"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("minval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("maxval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \ny "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("categorical"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("uniform"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shape"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("minval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("maxval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 构造模型")]),t._v("\nmodel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keras"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("models"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Sequential"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmodel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keras"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("layers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LSTM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("input_shape"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmodel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keras"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("layers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dense"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmodel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keras"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("layers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dense"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("activation"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'softmax'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmodel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("compilc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("optimizer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'adam'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("loss"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'categorical crossentropy'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("metrics"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'accuracy'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmodel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("summary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmodel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-4-tensorflow-api-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-tensorflow-api-总结"}},[t._v("#")]),t._v(" 3.4 TensorFlow API 总结")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/ad/tensorflow/intro-8.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("上图中的tf.data用于构造数据，Keras用于构造模型的层，接着用CPU、GPU、TPU进行加速训练，对训练结果使用TensorBoard进行可视化，可以对模型进行保存（Saved model），TensorFlow HUb的作用是模型复用，Deployment的作用是模型部署。")]),t._v(" "),s("h2",{attrs:{id:"_4、资料来源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、资料来源"}},[t._v("#")]),t._v(" 4、资料来源")]),t._v(" "),s("p",[t._v("深度之眼课程——《TensorFlow》")]),t._v(" "),s("h2",{attrs:{id:"【-】-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#【-】-3"}},[t._v("#")]),t._v(" 【----------------------------】")]),t._v(" "),s("h2",{attrs:{id:"tensorflow基础总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tensorflow基础总结"}},[t._v("#")]),t._v(" TensorFlow基础总结")]),t._v(" "),s("h2",{attrs:{id:"_1-基础概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础概念"}},[t._v("#")]),t._v(" 1.基础概念")]),t._v(" "),s("ul",[s("li",[t._v("Tensor：类型化的多维数组，图的边；Tensor所引用的并不持有具体的值，而是保持一个计算过程,可以使用session.run()或者t.eval()对tensor的值进行计算。")]),t._v(" "),s("li",[t._v("Operation:执行计算的单元，图的节点；这里大概可总结为Tensor创建,Tensor转换,逻辑判断,数学运算，聚合运算，序列比较与索引提取等。")]),t._v(" "),s("li",[t._v("Graph：一张有边与点的图，其表示了需要进行计算的任务；")]),t._v(" "),s("li",[t._v("Session:称之为会话的上下文,用于执行图。用户管理CPU和GPU和网络连接。")])]),t._v(" "),s("h2",{attrs:{id:"_2-tensor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-tensor"}},[t._v("#")]),t._v(" 2.Tensor")]),t._v(" "),s("h3",{attrs:{id:"_2-1-数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-数据结构"}},[t._v("#")]),t._v(" 2.1 数据结构")]),t._v(" "),s("ul",[s("li",[t._v("rank：数据的维度，其与线性代数中的rank不是一个概念。")]),t._v(" "),s("li",[t._v("shape:tensor每个维度数据的个数;下图表示了rank,shape的关系。")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Rank")]),t._v(" "),s("th",[t._v("Shape")]),t._v(" "),s("th",[t._v("Dimension number")]),t._v(" "),s("th",[t._v("Example")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("0")]),t._v(" "),s("td",[t._v("[]")]),t._v(" "),s("td",[t._v("0-D")]),t._v(" "),s("td",[t._v("A 0-D tensor. A scalar.")])]),t._v(" "),s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("[D0]")]),t._v(" "),s("td",[t._v("1-D")]),t._v(" "),s("td",[t._v("A 1-D tensor with shape [5].")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("[D0, D1]")]),t._v(" "),s("td",[t._v("2-D")]),t._v(" "),s("td",[t._v("A 2-D tensor with shape [3, 4].")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("[D0, D1, D2]")]),t._v(" "),s("td",[t._v("3-D")]),t._v(" "),s("td",[t._v("A 3-D tensor with shape [1, 4, 3].")])]),t._v(" "),s("tr",[s("td",[t._v("n")]),t._v(" "),s("td",[t._v("[D0, D1, ... Dn-1]")]),t._v(" "),s("td",[t._v("n-D")]),t._v(" "),s("td",[t._v("A tensor with shape [D0, D1, ... Dn-1].")])])])]),t._v(" "),s("ul",[s("li",[t._v("data type:单个数据的类型。下图表示了所有的types。")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Data type")]),t._v(" "),s("th",[t._v("Python type")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("DT_FLOAT")]),t._v(" "),s("td",[t._v("tf.float32")]),t._v(" "),s("td",[t._v("32 bits floating point.")])]),t._v(" "),s("tr",[s("td",[t._v("DT_DOUBLE")]),t._v(" "),s("td",[t._v("tf.float64")]),t._v(" "),s("td",[t._v("64 bits floating point.")])]),t._v(" "),s("tr",[s("td",[t._v("DT_INT8")]),t._v(" "),s("td",[t._v("tf.int8")]),t._v(" "),s("td",[t._v("8 bits signed integer.")])]),t._v(" "),s("tr",[s("td",[t._v("DT_INT16")]),t._v(" "),s("td",[t._v("tf.int16")]),t._v(" "),s("td",[t._v("16 bits signed integer.")])]),t._v(" "),s("tr",[s("td",[t._v("DT_INT32")]),t._v(" "),s("td",[t._v("tf.int32")]),t._v(" "),s("td",[t._v("32 bits signed integer.")])]),t._v(" "),s("tr",[s("td",[t._v("DT_INT64")]),t._v(" "),s("td",[t._v("tf.int64")]),t._v(" "),s("td",[t._v("64 bits signed integer.")])]),t._v(" "),s("tr",[s("td",[t._v("DT_UINT8")]),t._v(" "),s("td",[t._v("tf.uint8")]),t._v(" "),s("td",[t._v("8 bits unsigned integer.")])]),t._v(" "),s("tr",[s("td",[t._v("DT_UINT16")]),t._v(" "),s("td",[t._v("tf.uint16")]),t._v(" "),s("td",[t._v("16 bits unsigned integer.")])]),t._v(" "),s("tr",[s("td",[t._v("DT_STRING")]),t._v(" "),s("td",[t._v("tf.string")]),t._v(" "),s("td",[t._v("Variable length byte arrays. Each element of a Tensor is a byte array.")])]),t._v(" "),s("tr",[s("td",[t._v("DT_BOOL")]),t._v(" "),s("td",[t._v("tf.bool")]),t._v(" "),s("td",[t._v("Boolean.")])]),t._v(" "),s("tr",[s("td",[t._v("DT_COMPLEX64")]),t._v(" "),s("td",[t._v("tf.complex64")]),t._v(" "),s("td",[t._v("Complex number made of two 32 bits floating points: real and imaginary parts.")])]),t._v(" "),s("tr",[s("td",[t._v("DT_COMPLEX128")]),t._v(" "),s("td",[t._v("tf.complex128")]),t._v(" "),s("td",[t._v("Complex number made of two 64 bits floating points: real and imaginary parts.")])]),t._v(" "),s("tr",[s("td",[t._v("DT_QINT8")]),t._v(" "),s("td",[t._v("tf.qint8")]),t._v(" "),s("td",[t._v("8 bits signed integer used in quantized Ops.")])]),t._v(" "),s("tr",[s("td",[t._v("DT_QINT32")]),t._v(" "),s("td",[t._v("tf.qint32")]),t._v(" "),s("td",[t._v("32 bits signed integer used in quantized Ops.")])]),t._v(" "),s("tr",[s("td",[t._v("DT_QUINT8")]),t._v(" "),s("td",[t._v("tf.quint8")]),t._v(" "),s("td",[t._v("8 bits unsigned integer used in quantized Ops.")])])])]),t._v(" "),s("h3",{attrs:{id:"_2-2-稀疏张量-sparsetensor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-稀疏张量-sparsetensor"}},[t._v("#")]),t._v(" 2.2 稀疏张量（SparseTensor）")]),t._v(" "),s("p",[t._v("用于处理高维稀疏数据，包含indices，values，dense_shape三个属性。\nindices：形状为（N, ndims）的Tensor，N为非0元素个数，ndims表示张量阶数\nvalues：形状为（N）的Tensor，保存indices中指定的非0元素的值\ndense_shape：形状为（ndims）的Tensor，表示该稀疏张量对应稠密张量的形状")]),t._v(" "),s("h2",{attrs:{id:"_3-operation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-operation"}},[t._v("#")]),t._v(" 3.Operation")]),t._v(" "),s("h3",{attrs:{id:"_3-1-tensor创建函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-tensor创建函数"}},[t._v("#")]),t._v(" 3.1 Tensor创建函数")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("用法")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("tf.zeros(shape, dtype=tf.float32, name=None)")]),t._v(" "),s("td",[t._v("创建所有元素设置为零的张量")])]),t._v(" "),s("tr",[s("td",[t._v("tf.zeros_like(tensor, dtype=None, name=None)")]),t._v(" "),s("td",[t._v("返回tensor与所有元素设置为零相同的类型和形状的张量")])]),t._v(" "),s("tr",[s("td",[t._v("tf.ones(shape, dtype=tf.float32, name=None)")]),t._v(" "),s("td",[t._v("创建一个所有元素设置为1的张量。")])]),t._v(" "),s("tr",[s("td",[t._v("tf.ones_like(tensor, dtype=None, name=None)")]),t._v(" "),s("td",[t._v("返回tensor与所有元素设置为1相同的类型和形状的张量")])]),t._v(" "),s("tr",[s("td",[t._v("tf.fill(dims, value, name=None)")]),t._v(" "),s("td",[t._v("创建一个填充了标量值的张量")])]),t._v(" "),s("tr",[s("td",[t._v("tf.truncated_normal(shape, mean=0.0, stddev=1.0, dtype=tf.float32, seed=None, name=None)")]),t._v(" "),s("td",[t._v("从截断的正态分布中输出随机值")])]),t._v(" "),s("tr",[s("td",[t._v("tf.random_normal(shape, mean=0.0, stddev=1.0, dtype=tf.float32, seed=None, name=None)")]),t._v(" "),s("td",[t._v("从正态分布中输出随机值")])]),t._v(" "),s("tr",[s("td",[t._v("tf.random_uniform(shape, minval=0.0, maxval=1.0, dtype=tf.float32, seed=None, name=None)")]),t._v(" "),s("td",[t._v("从均匀分布输出随机值")])]),t._v(" "),s("tr",[s("td",[t._v("tf.eye(num_rows, num_columns=None, batch_shape=None, dtype=tf.float32, name=None)")]),t._v(" "),s("td",[t._v("构建一个单位矩阵, 或者 batch 个矩阵，batch_shape 以 list 的形式传入")])]),t._v(" "),s("tr",[s("td",[t._v("tf.diag(diagonal, name=None)")]),t._v(" "),s("td",[t._v("构建一个对角矩阵")])]),t._v(" "),s("tr",[s("td",[t._v("tf.global_variables_initializer()")]),t._v(" "),s("td",[t._v("初始化全部变量")])])])]),t._v(" "),s("h3",{attrs:{id:"_3-2-tensor转换函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-tensor转换函数"}},[t._v("#")]),t._v(" 3.2 Tensor转换函数")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("用法")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("tf.random_shuffle(value, seed=None, name=None)")]),t._v(" "),s("td",[t._v("沿其第一维度随机打乱")])]),t._v(" "),s("tr",[s("td",[t._v("tf.set_random_seed(seed)")]),t._v(" "),s("td",[t._v("设置图级随机种子")])]),t._v(" "),s("tr",[s("td",[t._v("tf.string_to_number(string_tensor, out_type=None, name=None)")]),t._v(" "),s("td",[t._v("张量变换")])]),t._v(" "),s("tr",[s("td",[t._v("tf.to_double(x, name='ToDouble')")]),t._v(" "),s("td",[t._v("张量变换")])]),t._v(" "),s("tr",[s("td",[t._v("tf.to_float(x, name='ToFloat')")]),t._v(" "),s("td",[t._v("张量变换")])]),t._v(" "),s("tr",[s("td",[t._v("tf.to_bfloat16(x, name='ToBFloat16')")]),t._v(" "),s("td",[t._v("张量变换")])]),t._v(" "),s("tr",[s("td",[t._v("tf.to_int32(x, name='ToInt32')")]),t._v(" "),s("td",[t._v("张量变换")])]),t._v(" "),s("tr",[s("td",[t._v("tf.to_int64(x, name='ToInt64')")]),t._v(" "),s("td",[t._v("张量变换")])]),t._v(" "),s("tr",[s("td",[t._v("tf.cast(x, dtype, name=None)")]),t._v(" "),s("td",[t._v("张量变换")])]),t._v(" "),s("tr",[s("td",[t._v("tf.shape(input, name=None)")]),t._v(" "),s("td",[t._v("用于确定张量的形状并更改张量的形状")])]),t._v(" "),s("tr",[s("td",[t._v("tf.size(input, name=None)")]),t._v(" "),s("td",[t._v("用于确定张量的形状并更改张量的形状")])]),t._v(" "),s("tr",[s("td",[t._v("tf.rank(input, name=None)")]),t._v(" "),s("td",[t._v("用于确定张量的形状并更改张量的形状")])]),t._v(" "),s("tr",[s("td",[t._v("tf.reshape(tensor, shape, name=None)")]),t._v(" "),s("td",[t._v("用于确定张量的形状并更改张量的形状")])]),t._v(" "),s("tr",[s("td",[t._v("tf.squeeze(input, squeeze_dims=None, name=None)")]),t._v(" "),s("td",[t._v("用于确定张量的形状并更改张量的形状")])]),t._v(" "),s("tr",[s("td",[t._v("tf.expand_dims(input, dim, name=None)")]),t._v(" "),s("td",[t._v("用于确定张量的形状并更改张量的形状")])]),t._v(" "),s("tr",[s("td",[t._v("tf.slice(input_, begin, size, name=None)")]),t._v(" "),s("td",[t._v("切片与扩展")])]),t._v(" "),s("tr",[s("td",[t._v("tf.split(split_dim, num_split, value, name='split')")]),t._v(" "),s("td",[t._v("切片与扩展")])]),t._v(" "),s("tr",[s("td",[t._v("tf.tile(input, multiples, name=None)")]),t._v(" "),s("td",[t._v("切片与扩展")])]),t._v(" "),s("tr",[s("td",[t._v("tf.pad(input, paddings, name=None)")]),t._v(" "),s("td",[t._v("切片与扩展")])]),t._v(" "),s("tr",[s("td",[t._v("tf.concat(concat_dim, values, name='concat')")]),t._v(" "),s("td",[t._v("切片与扩展")])]),t._v(" "),s("tr",[s("td",[t._v("tf.pack(values, name='pack')")]),t._v(" "),s("td",[t._v("切片与扩展")])]),t._v(" "),s("tr",[s("td",[t._v("tf.unpack(value, num=None, name='unpack')")]),t._v(" "),s("td",[t._v("切片与扩展")])]),t._v(" "),s("tr",[s("td",[t._v("tf.reverse_sequence(input, seq_lengths, seq_dim, name=None)")]),t._v(" "),s("td",[t._v("切片与扩展")])]),t._v(" "),s("tr",[s("td",[t._v("tf.reverse(tensor, dims, name=None)")]),t._v(" "),s("td",[t._v("切片与扩展")])]),t._v(" "),s("tr",[s("td",[t._v("tf.transpose(a, perm=None, name='transpose')")]),t._v(" "),s("td",[t._v("切片与扩展")])]),t._v(" "),s("tr",[s("td",[t._v("tf.gather(params, indices, name=None)")]),t._v(" "),s("td",[t._v("切片与扩展")])]),t._v(" "),s("tr",[s("td",[t._v("tf.dynamic_partition(data, partitions, num_partitions, name=None)")]),t._v(" "),s("td",[t._v("切片与扩展")])]),t._v(" "),s("tr",[s("td",[t._v("tf.dynamic_stitch(indices, data, name=None)")]),t._v(" "),s("td",[t._v("切片与扩展")])])])]),t._v(" "),s("h3",{attrs:{id:"_3-3-逻辑判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-逻辑判断"}},[t._v("#")]),t._v(" 3.3 逻辑判断")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("用法")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("tf.logical_and(x, y, name=None)")]),t._v(" "),s("td",[t._v("逻辑运算符")])]),t._v(" "),s("tr",[s("td",[t._v("tf.logical_not(x, name=None)")]),t._v(" "),s("td",[t._v("逻辑运算符")])]),t._v(" "),s("tr",[s("td",[t._v("tf.logical_or(x, y, name=None)")]),t._v(" "),s("td",[t._v("逻辑运算符")])]),t._v(" "),s("tr",[s("td",[t._v("tf.logical_xor(x, y, name='LogicalXor')")]),t._v(" "),s("td",[t._v("逻辑运算符")])]),t._v(" "),s("tr",[s("td",[t._v("tf.equal(x, y, name=None)")]),t._v(" "),s("td",[t._v("比较运算符")])]),t._v(" "),s("tr",[s("td",[t._v("tf.not_equal(x, y, name=None)")]),t._v(" "),s("td",[t._v("比较运算符")])]),t._v(" "),s("tr",[s("td",[t._v("tf.less(x, y, name=None)")]),t._v(" "),s("td",[t._v("比较运算符")])]),t._v(" "),s("tr",[s("td",[t._v("tf.less_equal(x, y, name=None)")]),t._v(" "),s("td",[t._v("比较运算符")])]),t._v(" "),s("tr",[s("td",[t._v("tf.greater(x, y, name=None)")]),t._v(" "),s("td",[t._v("比较运算符")])]),t._v(" "),s("tr",[s("td",[t._v("tf.greater_equal(x, y, name=None)")]),t._v(" "),s("td",[t._v("比较运算符")])]),t._v(" "),s("tr",[s("td",[t._v("tf.select(condition, t, e, name=None)")]),t._v(" "),s("td",[t._v("比较运算符")])]),t._v(" "),s("tr",[s("td",[t._v("tf.where(input, name=None)")]),t._v(" "),s("td",[t._v("比较运算符")])]),t._v(" "),s("tr",[s("td",[t._v("tf.is_finite(x, name=None)")]),t._v(" "),s("td",[t._v("判断检查")])]),t._v(" "),s("tr",[s("td",[t._v("tf.is_inf(x, name=None)")]),t._v(" "),s("td",[t._v("判断检查")])]),t._v(" "),s("tr",[s("td",[t._v("tf.is_nan(x, name=None)")]),t._v(" "),s("td",[t._v("判断检查")])]),t._v(" "),s("tr",[s("td",[t._v("tf.verify_tensor_all_finite(t, msg, name=None) 断言张量不包含任何NaN或Inf")]),t._v(" "),s("td",[t._v("判断检查")])]),t._v(" "),s("tr",[s("td",[t._v("tf.check_numerics(tensor, message, name=None)")]),t._v(" "),s("td",[t._v("判断检查")])]),t._v(" "),s("tr",[s("td",[t._v("tf.add_check_numerics_ops()")]),t._v(" "),s("td",[t._v("判断检查")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Assert(condition, data, summarize=None, name=None)")]),t._v(" "),s("td",[t._v("判断检查")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Print(input_, data, message=None, first_n=None, summarize=None, name=None)")]),t._v(" "),s("td",[t._v("判断检查")])])])]),t._v(" "),s("h3",{attrs:{id:"_3-4-数学函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-数学函数"}},[t._v("#")]),t._v(" 3.4 数学函数")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("用法")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("tf.add(x, y, name=None)")]),t._v(" "),s("td",[t._v("加法(支持 broadcasting)")])]),t._v(" "),s("tr",[s("td",[t._v("tf.subtract(x, y, name=None)")]),t._v(" "),s("td",[t._v("减")])]),t._v(" "),s("tr",[s("td",[t._v("tf.multiply(x, y, name=None)")]),t._v(" "),s("td",[t._v("乘")])]),t._v(" "),s("tr",[s("td",[t._v("tf.divide(x, y, name=None)")]),t._v(" "),s("td",[t._v("除")])]),t._v(" "),s("tr",[s("td",[t._v("tf.mod(x, y, name=None)")]),t._v(" "),s("td",[t._v("取余")])]),t._v(" "),s("tr",[s("td",[t._v("tf.pow(x, y, name=None)")]),t._v(" "),s("td",[t._v("幂")])]),t._v(" "),s("tr",[s("td",[t._v("tf.square(x, name=None)")]),t._v(" "),s("td",[t._v("求平方")])]),t._v(" "),s("tr",[s("td",[t._v("tf.sqrt(x, name=None)")]),t._v(" "),s("td",[t._v("开方")])]),t._v(" "),s("tr",[s("td",[t._v("tf.exp(x, name=None)")]),t._v(" "),s("td",[t._v("自然指数")])]),t._v(" "),s("tr",[s("td",[t._v("tf.log(x, name=None)")]),t._v(" "),s("td",[t._v("自然对数")])]),t._v(" "),s("tr",[s("td",[t._v("tf.negative(x, name=None)")]),t._v(" "),s("td",[t._v("取相反数")])]),t._v(" "),s("tr",[s("td",[t._v("tf.sign(x, name=None)")]),t._v(" "),s("td",[t._v("返回 x 的符号")])]),t._v(" "),s("tr",[s("td",[t._v("tf.reciprocal(x, name=None)")]),t._v(" "),s("td",[t._v("取倒数")])]),t._v(" "),s("tr",[s("td",[t._v("tf.abs(x, name=None)")]),t._v(" "),s("td",[t._v("求绝对值")])]),t._v(" "),s("tr",[s("td",[t._v("tf.round(x, name=None)")]),t._v(" "),s("td",[t._v("四舍五入")])]),t._v(" "),s("tr",[s("td",[t._v("tf.ceil(x, name=None)")]),t._v(" "),s("td",[t._v("向上取整")])]),t._v(" "),s("tr",[s("td",[t._v("tf.floor(x, name=None)")]),t._v(" "),s("td",[t._v("向下取整")])]),t._v(" "),s("tr",[s("td",[t._v("tf.rint(x, name=None)")]),t._v(" "),s("td",[t._v("取最接近的整数")])]),t._v(" "),s("tr",[s("td",[t._v("tf.maximum(x, y, name=None)")]),t._v(" "),s("td",[t._v("返回两tensor中的最大值 (x > y ? x : y)")])]),t._v(" "),s("tr",[s("td",[t._v("tf.minimum(x, y, name=None)")]),t._v(" "),s("td",[t._v("返回两tensor中的最小值 (x < y ? x : y)")])]),t._v(" "),s("tr",[s("td",[t._v("tf.cos(x, name=None)")]),t._v(" "),s("td",[t._v("三角函数和反三角函数")])]),t._v(" "),s("tr",[s("td",[t._v("tf.sin(x, name=None)")]),t._v(" "),s("td",[t._v("三角函数和反三角函数")])]),t._v(" "),s("tr",[s("td",[t._v("tf.tan(x, name=None)")]),t._v(" "),s("td",[t._v("三角函数和反三角函数")])]),t._v(" "),s("tr",[s("td",[t._v("tf.acos(x, name=None)")]),t._v(" "),s("td",[t._v("三角函数和反三角函数")])]),t._v(" "),s("tr",[s("td",[t._v("tf.asin(x, name=None)")]),t._v(" "),s("td",[t._v("三角函数和反三角函数")])]),t._v(" "),s("tr",[s("td",[t._v("tf.atan(x, name=None)")]),t._v(" "),s("td",[t._v("三角函数和反三角函数")])]),t._v(" "),s("tr",[s("td",[t._v("tf.matmul(a,b,name=None)")]),t._v(" "),s("td",[t._v("矩阵乘法(tensors of rank >= 2)")])]),t._v(" "),s("tr",[s("td",[t._v("tf.transpose(a, perm=None, name='transpose')")]),t._v(" "),s("td",[t._v("转置，可以通过指定 perm=[1, 0] 来进行轴变换")])]),t._v(" "),s("tr",[s("td",[t._v("tf.trace(x, name=None)")]),t._v(" "),s("td",[t._v("求矩阵的迹")])]),t._v(" "),s("tr",[s("td",[t._v("tf.matrix_determinant(input, name=None)")]),t._v(" "),s("td",[t._v("计算方阵行列式的值")])]),t._v(" "),s("tr",[s("td",[t._v("tf.matrix_inverse(input, adjoint=None, name=None)")]),t._v(" "),s("td",[t._v("求解可逆方阵的逆")])]),t._v(" "),s("tr",[s("td",[t._v("tf.svd(tensor, name=None)")]),t._v(" "),s("td",[t._v("奇异值分解")])]),t._v(" "),s("tr",[s("td",[t._v("tf.qr(input, full_matrices=None, name=None)")]),t._v(" "),s("td",[t._v("QR 分解")])]),t._v(" "),s("tr",[s("td",[t._v("tf.norm(tensor, ord='euclidean', axis=None, keep_dims=False, name=None)")]),t._v(" "),s("td",[t._v("求张量的范数(默认2)")])])])]),t._v(" "),s("h3",{attrs:{id:"_3-5-聚合相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-聚合相关"}},[t._v("#")]),t._v(" 3.5 聚合相关")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("用法")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("tf.reduce_sum(input_tensor, axis=None, keep_dims=False, name=None)")]),t._v(" "),s("td",[t._v("计算输入 tensor 所有元素的和，或者计算指定的轴所有元素的和")])]),t._v(" "),s("tr",[s("td",[t._v("tf.reduce_mean(input_tensor, axis=None, keep_dims=False, name=None)")]),t._v(" "),s("td",[t._v("求均值")])]),t._v(" "),s("tr",[s("td",[t._v("tf.reduce_max(input_tensor, axis=None, keep_dims=False, name=None)")]),t._v(" "),s("td",[t._v("求最大值")])]),t._v(" "),s("tr",[s("td",[t._v("tf.reduce_min(input_tensor, axis=None, keep_dims=False, name=None)")]),t._v(" "),s("td",[t._v("求最小值")])]),t._v(" "),s("tr",[s("td",[t._v("tf.reduce_prod(input_tensor, axis=None, keep_dims=False, name=None)")]),t._v(" "),s("td",[t._v("求累乘")])]),t._v(" "),s("tr",[s("td",[t._v("tf.reduce_all(input_tensor, axis=None, keep_dims=False, name=None)")]),t._v(" "),s("td",[t._v("全部满足条件")])]),t._v(" "),s("tr",[s("td",[t._v("tf.reduce_any(input_tensor, axis=None, keep_dims=False, name=None)")]),t._v(" "),s("td",[t._v("至少有一个满足条件")])])])]),t._v(" "),s("h3",{attrs:{id:"_3-6-序列比较与索引提取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-序列比较与索引提取"}},[t._v("#")]),t._v(" 3.6 序列比较与索引提取")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("用法")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("tf.setdiff1d(x, y, index_dtype=tf.int32, name=None)")]),t._v(" "),s("td",[t._v("比较两个 list 或者 string 的不同，并返回不同的值和索引")])]),t._v(" "),s("tr",[s("td",[t._v("tf.unique(x, out_idx=None, name=None)")]),t._v(" "),s("td",[t._v("返回 x 中的唯一值所组成的tensor 和原 tensor 中元素在现 tensor 中的索引")])]),t._v(" "),s("tr",[s("td",[t._v("tf.where(condition, x=None, y=None, name=None)")]),t._v(" "),s("td",[t._v("x if condition else y, condition 为 bool 类型的")])]),t._v(" "),s("tr",[s("td",[t._v("tf.argmax(input, axis=None, name=None, output_type=tf.int64)")]),t._v(" "),s("td",[t._v("返回沿着坐标轴方向的最大值的索引")])]),t._v(" "),s("tr",[s("td",[t._v("tf.argmin(input, axis=None, name=None, output_type=tf.int64)")]),t._v(" "),s("td",[t._v("返回沿着坐标轴方向的最小值的索引")])]),t._v(" "),s("tr",[s("td",[t._v("tf.invert_permutation(x, name=None)")]),t._v(" "),s("td",[t._v("x 的值当作 y 的索引，range(len(x)) 索引当作 y 的值")])]),t._v(" "),s("tr",[s("td",[t._v("tf.edit_distance(x,y)")]),t._v(" "),s("td",[t._v("编辑距离")])])])]),t._v(" "),s("h2",{attrs:{id:"_4-graph"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-graph"}},[t._v("#")]),t._v(" 4.Graph")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("用法")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("tf.get_default_graph()")]),t._v(" "),s("td",[t._v("访问默认图")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.seed")]),t._v(" "),s("td",[t._v("此图内使用的随机种子")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph."),s("strong",[t._v("init")]),t._v("()")]),t._v(" "),s("td",[t._v("创建一个新的空的图")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.as_default()")]),t._v(" "),s("td",[t._v("返回一个使得当前图成为默认图的上下文管理器")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.as_graph_def(from_version=None, add_shapes=False)")]),t._v(" "),s("td",[t._v("返回一个表示这个图的序列化的 GraphDef。")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.as_graph_element(obj, allow_tensor=True, allow_operation=True)")]),t._v(" "),s("td",[t._v("给定一个obj，看它能否对应到图中的元素")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.get_operation_by_name(name)")]),t._v(" "),s("td",[t._v("根据名字获取某个operation")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.get_tensor_by_name(name)")]),t._v(" "),s("td",[t._v("根据名字获取某个tensor")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.get_operations()")]),t._v(" "),s("td",[t._v("获取所有operations")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.is_feedable(tensor)")]),t._v(" "),s("td",[t._v("判断是否可feed或可fetch")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.is_fetchable(tensor_or_op)")]),t._v(" "),s("td",[t._v("判断是否可feed或可fetch")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.prevent_feeding(tensor)")]),t._v(" "),s("td",[t._v("设置不可feed或不可fetch")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.prevent_fetching(op)")]),t._v(" "),s("td",[t._v("设置不可feed或不可fetch")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.finalize()")]),t._v(" "),s("td",[t._v("结束这个图，使它只读,不能向g添加任何新的操作")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.finalized")]),t._v(" "),s("td",[t._v("如果这个图已经结束，它为真")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.control_dependencies(control_inputs)")]),t._v(" "),s("td",[t._v("返回一个明确控制依赖（control dependencies）的上下文管理器")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.devide(device_name_or_function)")]),t._v(" "),s("td",[t._v("返回一个明确默认设备的使用的上下文管理器")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.name_scope(name)")]),t._v(" "),s("td",[t._v("返回为操作创建分层的上下文管理器")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.add_to_collection(name,value)")]),t._v(" "),s("td",[t._v("将value值存入给定name的collection")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.add_to_collections(names,value)")]),t._v(" "),s("td",[t._v("将value存入给定的names的collections中")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Graph.get_collection(name,scope=None)")]),t._v(" "),s("td",[t._v("返回给定名称集合的值的列表")])])])]),t._v(" "),s("h2",{attrs:{id:"_5-session"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-session"}},[t._v("#")]),t._v(" 5.Session")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("用法")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("tf.Session()")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("tf.InteractiveSession()")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("tf.get_default_session()")]),t._v(" "),s("td",[t._v("获取默认session")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Session().graph")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("tf.Session(). "),s("strong",[t._v("init")]),t._v("(self, target='', graph=None, config=None)")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("tf.Session().as_default()")]),t._v(" "),s("td",[t._v("返回使该对象成为默认session的上下文管理器.")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Session().close")]),t._v(" "),s("td",[t._v("关闭这个session")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Session().list_devices()")]),t._v(" "),s("td",[t._v("列出此session中的可用设备.")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Session().run(fetches,feed_dict=None)")]),t._v(" "),s("td",[t._v("执行")])]),t._v(" "),s("tr",[s("td",[t._v("tf.Session().reset(target)")]),t._v(" "),s("td",[t._v("在target上重置资源容器,并关闭所有连接的会话.")])])])]),t._v(" "),s("h2",{attrs:{id:"附录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#附录"}},[t._v("#")]),t._v(" 附录")]),t._v(" "),s("p",[t._v("https://www.jianshu.com/p/55a47b1720ba\nhttps://www.cnblogs.com/qjoanven/p/7736025.html\nhttps://blog.csdn.net/xun527/article/details/79690226\nhttps://blog.bitsrc.io/learn-tensorflow-fundamentals-in-20-minutes-cdef2dec331a\nhttps://blog.csdn.net/kmsj0x00/article/details/80698794\nhttps://www.w3cschool.cn/tensorflow_python/tensorflow_python-slp52jz8.html")]),t._v(" "),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),s("ul",[s("li",[t._v("https://www.cnblogs.com/raisok/p/12659627.html")]),t._v(" "),s("li",[t._v("https://zhuanlan.zhihu.com/p/52550025")]),t._v(" "),s("li",[t._v("https://blog.csdn.net/qq_37388085/article/details/108250718")]),t._v(" "),s("li",[t._v("https://www.cnblogs.com/arachis/p/TF_BASICS.html")]),t._v(" "),s("li",[t._v("https://www.icourse163.org/course/PKU-1002536002?tid=1002700003")])])])}),[],!1,null,null,null);a.default=e.exports}}]);