(window.webpackJsonp=window.webpackJsonp||[]).push([[822],{1338:function(t,a,s){"use strict";s.r(a);var n=s(53),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("本文主要是介绍 Spring-基础内容。")])]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#_1、spring框架的概述"}},[t._v("1、Spring框架的概述")])]),s("li",[s("a",{attrs:{href:"#_2、spring框架的体系结构"}},[t._v("2、Spring框架的体系结构")])]),s("li",[s("a",{attrs:{href:"#_3、spring框架的两大核心"}},[t._v("3、Spring框架的两大核心")]),s("ul",[s("li",[s("a",{attrs:{href:"#_3-1、ioc-inverse-of-control-控制反转"}},[t._v("3.1、IOC（Inverse of Control 控制反转）")])]),s("li",[s("a",{attrs:{href:"#_3-1-1、di-dependency-injection-依赖注入"}},[t._v("3.1.1、DI（Dependency Injection，依赖注入）")])]),s("li",[s("a",{attrs:{href:"#_3-2、aop-aspect-oriented-programming-面向切面编程"}},[t._v("3.2、AOP（Aspect Oriented Programming 面向切面编程）")])])])]),s("li",[s("a",{attrs:{href:"#_4、spring框架的优势"}},[t._v("4、Spring框架的优势")])]),s("li",[s("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),s("p"),t._v(" "),s("h1",{attrs:{id:"spring框架的入门介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring框架的入门介绍"}},[t._v("#")]),t._v(" Spring框架的入门介绍")]),t._v(" "),s("h2",{attrs:{id:"_1、spring框架的概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、spring框架的概述"}},[t._v("#")]),t._v(" 1、Spring框架的概述")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Spring 是 2003 年兴起的一个轻量级的 Java 开发框架，由 Rod Johnson 创建。它解决了业务逻辑层和其他各层的松耦合问题，并将面向接口的编程思想贯穿整个系统应用。简单来说，Spring 是一个分层的 JavaSE/EE Full-Stack（一站式） 轻量级开源框架。")])]),t._v(" "),s("li",[s("p",[t._v("官方网址："),s("a",{attrs:{href:"https://spring.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://spring.io"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[t._v("下载地址：https://repo.spring.io/libs-release-local/org/springframework/spring")])])]),t._v(" "),s("p",[t._v("那么问题来了，为什么说 Spring 是"),s("strong",[t._v("分层")]),t._v("、"),s("strong",[t._v("一站式")]),t._v("、"),s("strong",[t._v("轻量级")]),t._v("的框架呢？\n  （1）分层，JavaEE 经典的 MVC 三层结构为表现层、业务层、持久层。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("功能")]),t._v(" "),s("th",[t._v("举例")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Web 表现层")]),t._v(" "),s("td",[t._v("负责页面数据显示、页面跳转调度。")]),t._v(" "),s("td",[t._v("JSP/Servlet、SpringMVC")])]),t._v(" "),s("tr",[s("td",[t._v("Service 业务层")]),t._v(" "),s("td",[t._v("负责业务处理、功能逻辑和事务控制。")]),t._v(" "),s("td",[t._v("Service、JavaBean、EJB")])]),t._v(" "),s("tr",[s("td",[t._v("Dao 持久层")]),t._v(" "),s("td",[t._v("负责数据存取和封装，及与数据库打交道。")]),t._v(" "),s("td",[t._v("JDBC、Hibernate、Mybatis")])])])]),t._v(" "),s("p",[t._v("（2）一站式，指 Spring 为JavaEE 的每一层都提供了解决方案，比如：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("解决方案")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Web 表现层")]),t._v(" "),s("td",[t._v("Struts1、Struts2、Spring MVC")])]),t._v(" "),s("tr",[s("td",[t._v("Service 业务层")]),t._v(" "),s("td",[t._v("IoC 控制反转、AOP 面向切面编程、事务控制")])]),t._v(" "),s("tr",[s("td",[t._v("Dao 持久层")]),t._v(" "),s("td",[t._v("JdbcTemplate、HibernateTemplate、ORM 框架（对象关系映射）的整合")])])])]),t._v(" "),s("p",[t._v("（3）轻量级，指从大小与开销两方面而言，Spring都是轻量的。")]),t._v(" "),s("p",[t._v("完整的 Spring 框架可以在一个大小只有 1MB 多的 Jar 文件里发布。并且 Spring 所需的处理开销也是微不足道的。Spring 的出现解决了 EJB 臃肿、低效、繁琐复杂、脱离现实的情况。而且使用 Spring 编程是非侵入式的。Spring 应用中的对象不依赖于 Spring 的特定类。")]),t._v(" "),s("h2",{attrs:{id:"_2、spring框架的体系结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、spring框架的体系结构"}},[t._v("#")]),t._v(" 2、Spring框架的体系结构")]),t._v(" "),s("p",[t._v("Spring 框架是一个分层架构，它包含一系列的功能要素，被分为大约20个模块。这些模块分为 Core Container、Data Access/Integration、Web、AOP、Aspects、Instrumentation 和 Test，如下图所示：")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/assets/img/spring/basic/intro-1.png"),alt:"wxmp"}}),t._v(" "),s("p",[t._v("核心容器（Core Container）包括 Core、Beans、Context、EL 模块：")]),t._v(" "),s("p",[t._v("1、Core 和 Beans 模块提供了 Spring 最基础的功能，Core 模块是核心，为其他模块提供支持，包括 Spring 的核心工具类。Beans 是 Spring 管理实体类 Bean 的主要模块，提供 IoC 控制反转和依赖注入 DI。控制反转即将控制权由原来的程序员自己管理交给 Spring 来管理，依赖注入就是注入对象实例，有四种方式，即接口注入、setter 方法注入、构造器注入和注解注入。")]),t._v(" "),s("p",[t._v("2、Context 上下文模块，主要基于 Core 和 Beans 模块 Context 模块的 Context 包继承了 Beans 包的功能，还增加了国际化（I18N）、事件传播等，Context 上下文模块，还包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。")]),t._v(" "),s("p",[t._v("3、Expression Language，表达式语言模块，又称 SpEL，提供了在运行期间查询和操作对象图的强大能力。包含五个主要特性：①使用 Bean 的 ID 引用 Bean；②调用方法和访问对象的属性；③对值进行算术，关系和逻辑运算；④正则表达式匹配；⑤集合操作。")]),t._v(" "),s("h2",{attrs:{id:"_3、spring框架的两大核心"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、spring框架的两大核心"}},[t._v("#")]),t._v(" 3、Spring框架的两大核心")]),t._v(" "),s("p",[t._v("Spring 两大核心分别为 IOC（Inverse of Control 控制反转）和 AOP（Aspect Oriented Programming 面向切面编程）。")]),t._v(" "),s("h3",{attrs:{id:"_3-1、ioc-inverse-of-control-控制反转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1、ioc-inverse-of-control-控制反转"}},[t._v("#")]),t._v(" 3.1、IOC（Inverse of Control 控制反转）")]),t._v(" "),s("p",[t._v("简单来说，IOC 就是将对象的创建权利交给 Spring 工厂进行管理。比如说原来我们创建对象的方法是：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" user"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("使用 IOC 后可以这样写：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUser")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("其中，控制反转还包括了 DI（Dependency Injection，依赖注入）和DL（Dependency Lookup，依赖查找）。")]),t._v(" "),s("h3",{attrs:{id:"_3-1-1、di-dependency-injection-依赖注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1、di-dependency-injection-依赖注入"}},[t._v("#")]),t._v(" 3.1.1、DI（Dependency Injection，依赖注入）")]),t._v(" "),s("p",[t._v("依赖注入是指在 Spring 框架创建 Bean 对象时，动态地将依赖对象注入到 Bean 组件。简单的说，就是将另外一个 Bean 对象动态地注入到另一个 Bean 中。")]),t._v(" "),s("p",[t._v("依赖注入的做法：由 Spring 容器创建 Service、Dao 对象，并且通过注解或配置将 Dao 传入Servcie，那么 Service 对象就包含了 Dao 对象的引用。比如：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserServiceImpl")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//通过注解注入UserMapper对象")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserMapper")]),t._v(" userMapper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"_3-2、aop-aspect-oriented-programming-面向切面编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2、aop-aspect-oriented-programming-面向切面编程"}},[t._v("#")]),t._v(" 3.2、AOP（Aspect Oriented Programming 面向切面编程）")]),t._v(" "),s("p",[t._v("AOP 采取横向抽取机制，取代了传统纵向继承体系重复性代码的编写方式（例如性能监视、事务管理、安全检查、缓存、日志记录等）。")]),t._v(" "),s("p",[t._v("AOP 基于代理思想，对原来目标对象，创建代理对象，在不修改原对象代码情况下，通过代理对象，调用增强功能的代码，从而对原有业务方法进行增强。例如可以在插入 User 对象之前进行打印日志，请看下面的代码示例。\n  UserService.java：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("前置增强类 PrintLogBefore.java：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//前置增强代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrintLogBefore")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodBeforeAdvice")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Logger")]),t._v(" log "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Logger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLogger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrintLogBefore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c\n\tlass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("before")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v(" method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tlog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"在插入User之前执行的方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("最后配置切入点：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("printBefore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("com.atlantis.aop.test.PrintLogBefore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("aop:")]),t._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("aop:")]),t._v("pointcut")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("expression")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("execution(public void save(com.atlantis.aop.domain.User))"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("pointcut"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("aop:")]),t._v("advisor")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("advice-ref")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("printBefore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("pointcut-ref")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("pointcut"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("aop:")]),t._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n")])])]),s("p",[t._v("这样在调用 add(User user) 方法之前就会执行前置增强类"),s("code",[t._v("PrintLogBefore.java")]),t._v("的"),s("code",[t._v("before()")]),t._v("方法。")]),t._v(" "),s("h2",{attrs:{id:"_4、spring框架的优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、spring框架的优势"}},[t._v("#")]),t._v(" 4、Spring框架的优势")]),t._v(" "),s("p",[s("strong",[t._v("（1）方便解耦，简化开发")]),t._v("。通过 Spring 提供的 IoC 容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可\n以更专注于上层的应用。")]),t._v(" "),s("p",[s("strong",[t._v("（2）AOP 编程的支持")]),t._v("。通过 Spring 的 AOP 功能，方便进行面向切面的编程，许多不容易用传统 OOP 实现的功能可以通过 AOP 轻松应付。")]),t._v(" "),s("p",[s("strong",[t._v("（3）声明式事务的支持")]),t._v("。可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理，提高开发效率和质量。")]),t._v(" "),s("p",[s("strong",[t._v("（4）方便程序的测试")]),t._v("。可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。")]),t._v(" "),s("p",[s("strong",[t._v("（5）方便集成各种优秀框架")]),t._v("。Spring 可以降低各种框架的使用难度，提供了对各种优秀框架（Struts、Hibernate、Hessian、Quartz等）的直接支持。")]),t._v(" "),s("p",[s("strong",[t._v("（6）降低 JavaEE API 的使用难度")]),t._v("。Spring 对 JavaEE API（如 JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些 API 的使用难度大为降低。")]),t._v(" "),s("p",[s("strong",[t._v("（7）Java 源码是经典学习范例")]),t._v("。Spring 的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对 Java 设计模式灵活运用以及对 Java 技术的高深造诣。它的源代码无意是 Java 技术的最佳实践的范例。")]),t._v(" "),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),s("ul",[s("li",[t._v("https://blog.csdn.net/q961250375/article/details/102817130")])])])}),[],!1,null,null,null);a.default=e.exports}}]);