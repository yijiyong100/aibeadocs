(window.webpackJsonp=window.webpackJsonp||[]).push([[823],{1339:function(t,a,r){"use strict";r.r(a);var o=r(53),i=Object(o.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[t._v("本文主要是介绍 IOC和AOP-原理简介 。")])]),t._v(" "),r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#spring框架ioc和aop的实现原理简介"}},[t._v("Spring框架IOC和AOP的实现原理简介")])]),r("li",[r("a",{attrs:{href:"#ioc-inversion-of-control"}},[t._v("IoC（Inversion of Control）")])]),r("li",[r("a",{attrs:{href:"#aop-aspect-oriented-programming"}},[t._v("AOP（Aspect Oriented Programming）")]),r("ul",[r("li",[r("a",{attrs:{href:"#_1-aop面向方面编程基于ioc-是对oop的有益补充"}},[t._v("(1). AOP面向方面编程基于IoC，是对OOP的有益补充；")])]),r("li",[r("a",{attrs:{href:"#_2-aop利用一种称为-横切-的技术"}},[t._v("(2). AOP利用一种称为“横切”的技术：")])]),r("li",[r("a",{attrs:{href:"#_3-aop代表的是一个横向的关-系"}},[t._v("(3). AOP代表的是一个横向的关 系：")])]),r("li",[r("a",{attrs:{href:"#_4-实现aop的技术-主要分为两大类"}},[t._v("(4). 实现AOP的技术，主要分为两大类：")])]),r("li",[r("a",{attrs:{href:"#_5-spring实现aop-jdk动态代理和cglib代理"}},[t._v("(5). Spring实现AOP：JDK动态代理和CGLIB代理")])]),r("li",[r("a",{attrs:{href:"#_6-aop使用场景"}},[t._v("(6). AOP使用场景：")])])])]),r("li",[r("a",{attrs:{href:"#参考文章"}},[t._v("参考文章")])])])]),r("p"),t._v(" "),r("h2",{attrs:{id:"spring框架ioc和aop的实现原理简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring框架ioc和aop的实现原理简介"}},[t._v("#")]),t._v(" Spring框架IOC和AOP的实现原理简介")]),t._v(" "),r("p",[t._v("本文讲的是面试之Spring框架IOC和AOP的实现原理， IoC（Inversion of Control） (1). IoC（Inversion of Control）是指"),r("strong",[t._v("容器")]),t._v("控制"),r("strong",[t._v("程序对象之间")]),t._v("的"),r("strong",[t._v("关系")]),t._v("，而不是传统实现中，由"),r("strong",[t._v("程序代码")]),t._v("直接操控。控制权由"),r("strong",[t._v("应用代码")]),t._v("中转到了"),r("strong",[t._v("外部容器")]),t._v("，控制权的转移是IOC。")]),t._v(" "),r("h2",{attrs:{id:"ioc-inversion-of-control"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ioc-inversion-of-control"}},[t._v("#")]),t._v(" IoC（Inversion of Control）")]),t._v(" "),r("p",[t._v("(1). IoC（Inversion of Control）是指容器控制程序对象之间的关系，而不是传统实现中，由程序代码直接操控。控制权由应用代码中转到了外部容器，控制权的转移是所谓反转。 对于Spring而言，就是由Spring来控制对象的生命周期和对象之间的关系；IoC还有另外一个名字——“依赖注入（Dependency Injection）”。从名字上理解，所谓依赖注入，即组件之间的依赖关系由容器在"),r("strong",[t._v("运行期决定")]),t._v("，即由容器动态地将某种依赖关系注入到组件之中。")]),t._v(" "),r("p",[t._v("(2). 在Spring的工作方式中，所有的类都会在spring容器中登记，告诉spring这是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。")]),t._v(" "),r("p",[t._v("(3). 在系统运行中，动态的向某个对象提供它所需要的其他对象。")]),t._v(" "),r("p",[t._v("(4). 依赖注入的思想是通过反射机制实现的\n在实例化一个类时，它通过反射调用类中set方法将事先保存在HashMap中的类属性注入到类中。 总而言之，在传统的对象创建方式中，通常由调用者来创建被调用者的实例，而在Spring中创建被调用者的工作由Spring来完成，然后注入调用者，即所谓的依赖注入or控制反转。 注入方式有两种：依赖注入和设置注入；\nIoC的优点：降低了组件之间的耦合，降低了业务对象之间替换的复杂性，使之能够灵活的管理对象。")]),t._v(" "),r("h2",{attrs:{id:"aop-aspect-oriented-programming"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#aop-aspect-oriented-programming"}},[t._v("#")]),t._v(" AOP（Aspect Oriented Programming）")]),t._v(" "),r("h3",{attrs:{id:"_1-aop面向方面编程基于ioc-是对oop的有益补充"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-aop面向方面编程基于ioc-是对oop的有益补充"}},[t._v("#")]),t._v(" (1). AOP面向方面编程基于IoC，是对OOP的有益补充；")]),t._v(" "),r("h3",{attrs:{id:"_2-aop利用一种称为-横切-的技术"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-aop利用一种称为-横切-的技术"}},[t._v("#")]),t._v(" (2). AOP利用一种称为“横切”的技术：")]),t._v(" "),r("p",[t._v("剖解开封装的对象内部，并将那些影响了 多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的 逻辑或责任封装起来，比如日志记录，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。")]),t._v(" "),r("h3",{attrs:{id:"_3-aop代表的是一个横向的关-系"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-aop代表的是一个横向的关-系"}},[t._v("#")]),t._v(" (3). AOP代表的是一个横向的关 系：")]),t._v(" "),r("p",[t._v("将“对象”比作一个空心的圆柱体，其中封装的是对象的属性和行为；则面向方面编程的方法，就是将这个圆柱体以切面形式剖开，选择性的提供业务逻辑。而 剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹，但完成了效果。")]),t._v(" "),r("h3",{attrs:{id:"_4-实现aop的技术-主要分为两大类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-实现aop的技术-主要分为两大类"}},[t._v("#")]),t._v(" (4). 实现AOP的技术，主要分为两大类：")]),t._v(" "),r("p",[t._v("一是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；")]),t._v(" "),r("p",[t._v("二是采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码。")]),t._v(" "),r("h3",{attrs:{id:"_5-spring实现aop-jdk动态代理和cglib代理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-spring实现aop-jdk动态代理和cglib代理"}},[t._v("#")]),t._v(" (5). Spring实现AOP：JDK动态代理和CGLIB代理")]),t._v(" "),r("p",[t._v("JDK动态代理：其代理对象必须是某个接口的实现，它是通过在运行期间创建一个接口的实现类来完成对目标对象的代理；\n其核心的两个类是InvocationHandler和Proxy。")]),t._v(" "),r("p",[t._v("CGLIB代理：实现原理类似于JDK动态代理，只是它在运行期间生成的代理对象是针对目标类扩展的子类。CGLIB是高效的代码生成包，底层是依靠ASM（开源的java字节码编辑类库）操作字节码实现的，性能比JDK强；需要引入包asm.jar和cglib.jar。\n使用AspectJ注入式切面和@AspectJ注解驱动的切面实际上底层也是通过动态代理实现的。")]),t._v(" "),r("h3",{attrs:{id:"_6-aop使用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-aop使用场景"}},[t._v("#")]),t._v(" (6). AOP使用场景：")]),t._v(" "),r("ul",[r("li",[t._v("Authentication 权限检查")]),t._v(" "),r("li",[t._v("Caching 缓存")]),t._v(" "),r("li",[t._v("Context passing 内容传递")]),t._v(" "),r("li",[t._v("Error handling 错误处理")]),t._v(" "),r("li",[t._v("Lazy loading　延迟加载")]),t._v(" "),r("li",[t._v("Debugging　　调试")]),t._v(" "),r("li",[t._v("logging, tracing, profiling and monitoring　日志记录，跟踪，优化，校准")]),t._v(" "),r("li",[t._v("Performance optimization　性能优化，效率检查")]),t._v(" "),r("li",[t._v("Persistence　　持久化")]),t._v(" "),r("li",[t._v("Resource pooling　资源池")]),t._v(" "),r("li",[t._v("Synchronization　同步")]),t._v(" "),r("li",[t._v("Transactions 事务管理\n另外Filter的实现和struts2的拦截器的实现都是AOP思想的体现。")])]),t._v(" "),r("h2",{attrs:{id:"参考文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),r("ul",[r("li",[t._v("https://www.cnblogs.com/yaochunhui/p/14164431.html")])])])}),[],!1,null,null,null);a.default=i.exports}}]);