(window.webpackJsonp=window.webpackJsonp||[]).push([[838],{1354:function(i,v,t){"use strict";t.r(v);var s=t(53),r=Object(s.a)({},(function(){var i=this,v=i.$createElement,t=i._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[i._v("TIP")]),i._v(" "),t("p",[i._v("本文主要是介绍 SpringCloud-原理详解 。")])]),i._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#概述"}},[i._v("概述")])]),t("li",[t("a",{attrs:{href:"#一、业务场景介绍"}},[i._v("一、业务场景介绍")])]),t("li",[t("a",{attrs:{href:"#二、spring-cloud核心组件-eureka"}},[i._v("二、Spring Cloud核心组件：Eureka")])]),t("li",[t("a",{attrs:{href:"#三、spring-cloud核心组件-feign"}},[i._v("三、Spring Cloud核心组件：Feign")])]),t("li",[t("a",{attrs:{href:"#四、spring-cloud核心组件-ribbon"}},[i._v("四、Spring Cloud核心组件：Ribbon")])]),t("li",[t("a",{attrs:{href:"#五、spring-cloud核心组件-hystrix"}},[i._v("五、Spring Cloud核心组件：Hystrix")])]),t("li",[t("a",{attrs:{href:"#六、spring-cloud核心组件-zuul"}},[i._v("六、Spring Cloud核心组件：Zuul")])]),t("li",[t("a",{attrs:{href:"#七、总结"}},[i._v("七、总结：")])]),t("li",[t("a",{attrs:{href:"#参考文章"}},[i._v("参考文章")])])])]),t("p"),i._v(" "),t("h1",{attrs:{id:"spring-cloud原理详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud原理详解"}},[i._v("#")]),i._v(" Spring Cloud原理详解")]),i._v(" "),t("h2",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[i._v("#")]),i._v(" 概述")]),i._v(" "),t("p",[i._v("毫无疑问，Spring Cloud是目前微服务架构领域的翘楚，无数的书籍博客都在讲解这个技术。不过大多数讲解还停留在对Spring Cloud功能使用的层面，其底层的很多原理，很多人可能并不知晓。"),t("strong",[i._v("因此本文将通过大量的手绘图")]),i._v("，给大家谈谈Spring Cloud微服务架构的底层原理。")]),i._v(" "),t("p",[i._v("实际上，Spring Cloud是一个全家桶式的技术栈，包含了很多组件。本文先从其最核心的几个组件入手，来剖析一下其底层的工作原理。"),t("strong",[i._v("也就是Eureka、Ribbon、Feign、Hystrix、Zuul这几个组件。")])]),i._v(" "),t("h2",{attrs:{id:"一、业务场景介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、业务场景介绍"}},[i._v("#")]),i._v(" 一、业务场景介绍")]),i._v(" "),t("p",[i._v("先来给大家说一个业务场景，假设咱们现在开发一个电商网站，要实现支付订单的功能，流程如下：")]),i._v(" "),t("ul",[t("li",[i._v("创建一个订单后，如果用户立刻支付了这个订单，我们需要将订单状态更新为“已支付”")]),i._v(" "),t("li",[i._v("扣减相应的商品库存")]),i._v(" "),t("li",[i._v("通知仓储中心，进行发货")]),i._v(" "),t("li",[i._v("给用户的这次购物增加相应的积分")])]),i._v(" "),t("p",[i._v("针对上述流程，"),t("strong",[i._v("我们需要有订单服务、库存服务、仓储服务、积分服务")]),i._v("。整个流程的大体思路如下：")]),i._v(" "),t("ul",[t("li",[i._v("用户针对一个订单完成支付之后，就会去找订单服务，更新订单状态")]),i._v(" "),t("li",[i._v("订单服务调用库存服务，完成相应功能")]),i._v(" "),t("li",[i._v("订单服务调用仓储服务，完成相应功能")]),i._v(" "),t("li",[i._v("订单服务调用积分服务，完成相应功能")])]),i._v(" "),t("p",[t("strong",[i._v("至此，整个支付订单的业务流程结束")])]),i._v(" "),t("p",[i._v("下图这张图，清晰表明了各服务间的调用过程：")]),i._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:i.$withBase("/assets/img/spring/springcloud/prindetail/iZmZiNDhjNDgxYTM_aW1hZ2VWaWV3Mi8wL3cvMTI4MC9oLzk2MC9mb3JtYXQvd2VicC9pZ25vcmUtZXJyb3IvMQ.png"),alt:"wxmp"}}),i._v(" "),t("p",[i._v("好！有了业务场景之后，咱们就一起来看看Spring Cloud微服务架构中，这几个组件如何相互协作，各自发挥的作用以及其背后的原理。")]),i._v(" "),t("h2",{attrs:{id:"二、spring-cloud核心组件-eureka"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、spring-cloud核心组件-eureka"}},[i._v("#")]),i._v(" 二、Spring Cloud核心组件：Eureka")]),i._v(" "),t("p",[t("strong",[i._v("咱们来考虑第一个问题")]),i._v("：订单服务想要调用库存服务、仓储服务，或者积分服务，怎么调用？")]),i._v(" "),t("ul",[t("li",[i._v("订单服务压根儿就不知道人家库存服务在哪台机器上啊！他就算想要发起一个请求，都不知道发送给谁，有心无力！")]),i._v(" "),t("li",[i._v("这时候，就轮到Spring Cloud Eureka出场了。Eureka是微服务架构中的注册中心，专门负责服务的注册与发现。")])]),i._v(" "),t("p",[i._v("咱们来看看下面的这张图，结合图来仔细剖析一下整个流程：")]),i._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:i.$withBase("/assets/img/spring/springcloud/prindetail/iZmZjYjdjZTMxYjg_aW1hZ2VWaWV3Mi8wL3cvMTI4MC9oLzk2MC9mb3JtYXQvd2VicC9pZ25vcmUtZXJyb3IvMQ.png"),alt:"wxmp"}}),i._v(" "),t("p",[i._v("如上图所示，库存服务、仓储服务、积分服务中都有一个"),t("strong",[i._v("Eureka Client组件，这个组件专门负责将这个服务的信息注册到Eureka Server中")]),i._v("。说白了，就是告诉Eureka Server，自己在哪台机器上，监听着哪个端口。而"),t("strong",[i._v("Eureka Server是一个注册中心，里面有一个注册表，保存了各服务所在的机器和端口号")])]),i._v(" "),t("p",[i._v("订单服务里也有一个Eureka Client组件，这个Eureka Client组件会找Eureka Server问一下：库存服务在哪台机器啊？监听着哪个端口啊？仓储服务呢？积分服务呢？然后就可以把这些相关信息从Eureka Server的注册表中拉取到自己本地缓存起来。")]),i._v(" "),t("p",[i._v("这时如果订单服务想要调用库存服务，不就可以找自己本地的Eureka Client问一下库存服务在哪台机器？监听哪个端口吗？收到响应后，紧接着就可以发送一个请求过去，调用库存服务扣减库存的那个接口！同理，如果订单服务要调用仓储服务、积分服务，也是如法炮制。")]),i._v(" "),t("p",[i._v("总结一下：")]),i._v(" "),t("ul",[t("li",[i._v("**Eureka Client：**负责将这个服务的信息注册到Eureka Server中")]),i._v(" "),t("li",[i._v("**Eureka Server：**注册中心，里面有一个注册表，保存了各个服务所在的机器和端口号")])]),i._v(" "),t("h2",{attrs:{id:"三、spring-cloud核心组件-feign"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、spring-cloud核心组件-feign"}},[i._v("#")]),i._v(" 三、Spring Cloud核心组件：Feign")]),i._v(" "),t("p",[i._v("现在订单服务确实知道库存服务、积分服务、仓库服务在哪里了，同时也监听着哪些端口号了。"),t("strong",[i._v("但是新问题又来了：难道订单服务要自己写一大堆代码，跟其他服务建立网络连接，然后构造一个复杂的请求，接着发送请求过去，最后对返回的响应结果再写一大堆代码来处理吗？")])]),i._v(" "),t("p",[i._v("这是上述流程翻译的代码片段，咱们一起来看看，体会一下这种绝望而无助的感受！！！")]),i._v(" "),t("p",[t("strong",[i._v("友情提示，前方高能：")])]),i._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:i.$withBase("/assets/img/spring/springcloud/prindetail/iY2VkOTYwZjIwMjQ_aW1hZ2VWaWV3Mi8wL3cvMTI4MC9oLzk2MC9mb3JtYXQvd2VicC9pZ25vcmUtZXJyb3IvMQ.png"),alt:"wxmp"}}),i._v(" "),t("p",[i._v("看完上面那一大段代码，有没有感到后背发凉、一身冷汗？实际上你进行服务间调用时，如果每次都手写代码，代码量比上面那段要多至少几倍，所以这个事压根儿就不是地球人能干的。")]),i._v(" "),t("p",[i._v("既然如此，那怎么办呢？别急，Feign早已为我们提供好了优雅的解决方案。来看看如果用Feign的话，你的订单服务调用库存服务的代码会变成啥样？")]),i._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:i.$withBase("/assets/img/spring/springcloud/prindetail/iY2YwMWI3NzNkZDQ_aW1hZ2VWaWV3Mi8wL3cvMTI4MC9oLzk2MC9mb3JtYXQvd2VicC9pZ25vcmUtZXJyb3IvMQ.png"),alt:"wxmp"}}),i._v(" "),t("p",[i._v("看完上面的代码什么感觉？是不是感觉整个世界都干净了，又找到了活下去的勇气！没有底层的建立连接、构造请求、解析响应的代码，直接就是用注解定义一个 FeignClient接口，然后调用那个接口就可以了。人家Feign Client会在底层根据你的注解，跟你指定的服务建立连接、构造请求、发起靕求、获取响应、解析响应，等等。这一系列脏活累活，人家Feign全给你干了。")]),i._v(" "),t("p",[i._v("那么问题来了，Feign是如何做到这么神奇的呢？很简单，"),t("strong",[i._v("Feign的一个关键机制就是使用了动态代理")]),i._v("。咱们一起来看看下面的图，结合图来分析：")]),i._v(" "),t("ul",[t("li",[i._v("首先，如果你对某个接口定义了@FeignClient注解，Feign就会针对这个接口创建一个动态代理")]),i._v(" "),t("li",[i._v("接着你要是调用那个接口，本质就是会调用 Feign创建的动态代理，这是核心中的核心")]),i._v(" "),t("li",[i._v("Feign的动态代理会根据你在接口上的@RequestMapping等注解，来动态构造出你要请求的服务的地址")]),i._v(" "),t("li",[i._v("最后针对这个地址，发起请求、解析响应")])]),i._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:i.$withBase("/assets/img/spring/springcloud/prindetail/iZmZmNTA1YjJhMjA_aW1hZ2VWaWV3Mi8wL3cvMTI4MC9oLzk2MC9mb3JtYXQvd2VicC9pZ25vcmUtZXJyb3IvMQ.png"),alt:"wxmp"}}),i._v(" "),t("h2",{attrs:{id:"四、spring-cloud核心组件-ribbon"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、spring-cloud核心组件-ribbon"}},[i._v("#")]),i._v(" 四、Spring Cloud核心组件：Ribbon")]),i._v(" "),t("p",[i._v("说完了Feign，还没完。现在新的问题又来了，如果人家库存服务部署在了5台机器上，如下所示：")]),i._v(" "),t("ul",[t("li",[i._v("192.168.169:9000")]),i._v(" "),t("li",[i._v("192.168.170:9000")]),i._v(" "),t("li",[i._v("192.168.171:9000")]),i._v(" "),t("li",[i._v("192.168.172:9000")]),i._v(" "),t("li",[i._v("192.168.173:9000")])]),i._v(" "),t("p",[t("strong",[i._v("这下麻烦了！人家Feign怎么知道该请求哪台机器呢？")])]),i._v(" "),t("ul",[t("li",[i._v("这时Spring Cloud Ribbon就派上用场了。Ribbon就是专门解决这个问题的。它的作用是"),t("strong",[i._v("负载均衡")]),i._v("，会帮你在每次请求时选择一台机器，均匀的把请求分发到各个机器上")]),i._v(" "),t("li",[i._v("Ribbon的负载均衡默认使用的最经典的"),t("strong",[i._v("Round Robin轮询算法")]),i._v("。这是啥？简单来说，就是如果订单服务对库存服务发起10次请求，那就先让你请求第1台机器、然后是第2台机器、第3台机器、第4台机器、第5台机器，接着再来—个循环，第1台机器、第2台机器。。。以此类推。")])]),i._v(" "),t("p",[t("strong",[i._v("此外，Ribbon是和Feign以及Eureka紧密协作，完成工作的，具体如下：")])]),i._v(" "),t("ul",[t("li",[i._v("首先Ribbon会从 Eureka Client里获取到对应的服务注册表，也就知道了所有的服务都部署在了哪些机器上，在监听哪些端口号。")]),i._v(" "),t("li",[i._v("然后Ribbon就可以使用默认的Round Robin算法，从中选择一台机器")]),i._v(" "),t("li",[i._v("Feign就会针对这台机器，构造并发起请求。")])]),i._v(" "),t("p",[i._v("对上述整个过程，再来一张图，帮助大家更深刻的理解：")]),i._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:i.$withBase("/assets/img/spring/springcloud/prindetail/jMDAxZGMxNTVlOTg_aW1hZ2VWaWV3Mi8wL3cvMTI4MC9oLzk2MC9mb3JtYXQvd2VicC9pZ25vcmUtZXJyb3IvMQ.png"),alt:"wxmp"}}),i._v(" "),t("h2",{attrs:{id:"五、spring-cloud核心组件-hystrix"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、spring-cloud核心组件-hystrix"}},[i._v("#")]),i._v(" 五、Spring Cloud核心组件：Hystrix")]),i._v(" "),t("p",[i._v("在微服务架构里，一个系统会有很多的服务。"),t("strong",[i._v("以本文的业务场景为例")]),i._v("：订单服务在一个业务流程里需要调用三个服务。现在假设订单服务自己最多只有100个线程可以处理请求，然后呢，积分服务不幸的挂了，每次订单服务调用积分服务的时候，都会卡住几秒钟，然后抛出—个超时异常。")]),i._v(" "),t("p",[t("strong",[i._v("咱们一起来分析一下，这样会导致什么问题？")])]),i._v(" "),t("ol",[t("li",[i._v("如果系统处于高并发的场景下，大量请求涌过来的时候，订单服务的100个线程都会卡在请求积分服务这块。导致订单服务没有一个线程可以处理请求")]),i._v(" "),t("li",[i._v("然后就会导致别人请求订单服务的时候，发现订单服务也挂了，不响应任何请求了")])]),i._v(" "),t("p",[i._v("上面这个，就是"),t("strong",[i._v("微服务架构中恐怖的服务雪崩问题")]),i._v("，如下图所示：")]),i._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:i.$withBase("/assets/img/spring/springcloud/prindetail/jMDAzM2Y2NGEwYTc_aW1hZ2VWaWV3Mi8wL3cvMTI4MC9oLzk2MC9mb3JtYXQvd2VicC9pZ25vcmUtZXJyb3IvMQ.png"),alt:"wxmp"}}),i._v(" "),t("p",[i._v("如上图，这么多服务互相调用，要是不做任何保护的话，某一个服务挂了，就会引起连锁反应，导致别的服务也挂。比如积分服务挂了，会导致订单服务的线程全部卡在请求积分服务这里，没有一个线程可以工作，瞬间导致订单服务也挂了，别人请求订单服务全部会卡住，无法响应。")]),i._v(" "),t("p",[t("strong",[i._v("但是我们思考一下，就算积分服务挂了，订单服务也可以不用挂啊！为什么？")])]),i._v(" "),t("ul",[t("li",[i._v("我们结合业务来看：支付订单的时候，只要把库存扣减了，然后通知仓库发货就OK了")]),i._v(" "),t("li",[i._v("如果积分服务挂了，大不了等他恢复之后，慢慢人肉手工恢复数据！为啥一定要因为一个积分服务挂了，就直接导致订单服务也挂了呢？不可以接受！")])]),i._v(" "),t("p",[t("strong",[i._v("现在问题分析完了，如何解决？")])]),i._v(" "),t("p",[i._v("这时就轮到Hystrix闪亮登场了。Hystrix是隔离、熔断以及降级的一个框架。啥意思呢？说白了，"),t("strong",[i._v("Hystrix会搞很多个小小的线程池")]),i._v("，比如订单服务请求库存服务是一个线程池，请求仓储服务是一个线程池，请求积分服务是一个线程池。每个线程池里的线程就仅仅用于请求那个服务。")]),i._v(" "),t("p",[t("strong",[i._v("打个比方：现在很不幸，积分服务挂了，会咋样？")])]),i._v(" "),t("p",[i._v("当然会导致订单服务里那个用来调用积分服务的线程都卡死不能工作了啊！但由于订单服务调用库存服务、仓储服务的这两个线程池都是正常工作的，所以这两个服务不会受到任何影响。")]),i._v(" "),t("p",[i._v("这个时候如果别人请求订单服务，订单服务还是可以正常调用库存服务扣减库存，调用仓储服务通知发货。只不过调用积分服务的时候，每次都会报错。**但是如果积分服务都挂了，每次调用都要去卡住几秒钟干啥呢？有意义吗？当然没有！**所以我们直接对积分服务熔断不就得了，比如在5分钟内请求积分服务直接就返回了，不要去走网络请求卡住几秒钟，"),t("strong",[i._v("这个过程，就是所谓的熔断！")])]),i._v(" "),t("p",[i._v("**那人家又说，兄弟，积分服务挂了你就熔断，好歹你干点儿什么啊！别啥都不干就直接返回啊？**没问题，咱们就来个降级：每次调用积分服务，你就在数据库里记录一条消息，说给某某用户增加了多少积分，因为积分服务挂了，导致没增加成功！这样等积分服务恢复了，你可以根据这些记录手工加一下积分。"),t("strong",[i._v("这个过程，就是所谓的降级。")])]),i._v(" "),t("p",[i._v("为帮助大家更直观的理解，接下来用一张图，梳理一下Hystrix隔离、熔断和降级的全流程：")]),i._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:i.$withBase("/assets/img/spring/springcloud/prindetail/jMDA0ZWRmOTQ0MjY_aW1hZ2VWaWV3Mi8wL3cvMTI4MC9oLzk2MC9mb3JtYXQvd2VicC9pZ25vcmUtZXJyb3IvMQ.png"),alt:"wxmp"}}),i._v(" "),t("h2",{attrs:{id:"六、spring-cloud核心组件-zuul"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、spring-cloud核心组件-zuul"}},[i._v("#")]),i._v(" 六、Spring Cloud核心组件：Zuul")]),i._v(" "),t("p",[i._v("说完了Hystrix，接着给大家说说最后一个组件：Zuul，也就是微服务网关。**这个组件是负责网络路由的。**不懂网络路由？行，那我给你说说，如果没有Zuul的日常工作会怎样？")]),i._v(" "),t("p",[i._v("假设你后台部署了几百个服务，现在有个前端兄弟，人家请求是直接从浏览器那儿发过来的。"),t("strong",[i._v("打个比方")]),i._v("：人家要请求一下库存服务，你难道还让人家记着这服务的名字叫做inventory-service？部署在5台机器上？就算人家肯记住这一个，你后台可有几百个服务的名称和地址呢？难不成人家请求一个，就得记住一个？你要这样玩儿，那真是友谊的小船，说翻就翻！")]),i._v(" "),t("p",[i._v("上面这种情况，压根儿是不现实的。所以一般微服务架构中都必然会设计一个网关在里面，像android、ios、pc前端、微信小程序、H5等等，不用去关心后端有几百个服务，就知道有一个网关，所有请求都往网关走，网关会根据请求中的一些特征，将请求转发给后端的各个服务。")]),i._v(" "),t("p",[i._v("而且有一个网关之后，还有很多好处，比如可以做"),t("strong",[i._v("统一的降级、限流、认证授权、安全")]),i._v("，等等。")]),i._v(" "),t("h2",{attrs:{id:"七、总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、总结"}},[i._v("#")]),i._v(" 七、总结：")]),i._v(" "),t("p",[i._v("最后再来总结一下，上述几个Spring Cloud核心组件，在微服务架构中，分别扮演的角色：")]),i._v(" "),t("ul",[t("li",[t("strong",[i._v("Eureka")]),i._v("：各个服务启动时，Eureka Client都会将服务注册到Eureka Server，并且Eureka Client还可以反过来从Eureka Server拉取注册表，从而知道其他服务在哪里")]),i._v(" "),t("li",[t("strong",[i._v("Ribbon")]),i._v("：服务间发起请求的时候，基于Ribbon做负载均衡，从一个服务的多台机器中选择一台")]),i._v(" "),t("li",[t("strong",[i._v("Feign")]),i._v("：基于Feign的动态代理机制，根据注解和选择的机器，拼接请求URL地址，发起请求")]),i._v(" "),t("li",[t("strong",[i._v("Hystrix")]),i._v("：发起请求是通过Hystrix的线程池来走的，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题")]),i._v(" "),t("li",[t("strong",[i._v("Zuul")]),i._v("：如果前端、移动端要调用后端系统，统一从Zuul网关进入，由Zuul网关转发请求给对应的服务")])]),i._v(" "),t("p",[i._v("以上就是我们通过一个电商业务场景，阐述了Spring Cloud微服务架构几个核心组件的底层原理。")]),i._v(" "),t("p",[i._v("**文字总结还不够直观？没问题！**我们将Spring Cloud的5个核心组件通过一张图串联起来，再来直观的感受一下其底层的架构原理：")]),i._v(" "),t("img",{staticClass:"zoom-custom-imgs",attrs:{src:i.$withBase("/assets/img/spring/springcloud/prindetail/jMDA2YjE1MzZmNDM_aW1hZ2VWaWV3Mi8wL3cvMTI4MC9oLzk2MC9mb3JtYXQvd2VicC9pZ25vcmUtZXJyb3IvMQ.png"),alt:"wxmp"}}),i._v(" "),t("h2",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[i._v("#")]),i._v(" 参考文章")]),i._v(" "),t("ul",[t("li",[i._v("https://blog.csdn.net/qq_41701956/article/details/83829539")])])])}),[],!1,null,null,null);v.default=r.exports}}]);